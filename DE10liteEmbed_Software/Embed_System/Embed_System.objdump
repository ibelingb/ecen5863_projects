
Embed_System.elf:     file format elf32-littlenios2
Embed_System.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0400016c

Program Header:
    LOAD off    0x00001020 vaddr 0x09404020 paddr 0x04000000 align 2**12
         filesz 0x0000016c memsz 0x0000016c flags r-x
    LOAD off    0x0000216c vaddr 0x0400016c paddr 0x0400016c align 2**12
         filesz 0x00005198 memsz 0x00005198 flags r-x
    LOAD off    0x00007304 vaddr 0x04005304 paddr 0x04005e94 align 2**12
         filesz 0x00000b90 memsz 0x00000b90 flags rw-
    LOAD off    0x00008a24 vaddr 0x04006a24 paddr 0x04006a24 align 2**12
         filesz 0x00000000 memsz 0x000001e4 flags rw-
    LOAD off    0x00008000 vaddr 0x09404000 paddr 0x09404000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  09404000  09404000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  09404020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004e64  0400016c  0400016c  0000216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000334  04004fd0  04004fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000b90  04005304  04005e94  00007304  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001e4  04006a24  04006a24  00008a24  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04006c08  04006c08  00008020  2**0
                  CONTENTS
  7 .onchip_flash_0_data 00000000  09200000  09200000  00008020  2**0
                  CONTENTS
  8 .onchip_ram   00000000  0940418c  0940418c  00008020  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000b30  00000000  00000000  00008048  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00019aff  00000000  00000000  00008b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000070a2  00000000  00000000  00022677  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007488  00000000  00000000  00029719  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001638  00000000  00000000  00030ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ee5  00000000  00000000  000321dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000638e  00000000  00000000  000350c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  0003b450  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000838  00000000  00000000  0003b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003e9ce  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0003e9d1  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003e9dd  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003e9de  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0003e9df  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0003e9e3  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0003e9e7  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  0003e9eb  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  0003e9f4  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0003e9fd  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000005  00000000  00000000  0003ea06  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000028  00000000  00000000  0003ea0b  2**0
                  CONTENTS, READONLY
 31 .jdi          0000a171  00000000  00000000  0003ea33  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000bdb8f  00000000  00000000  00048ba4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
09404000 l    d  .entry	00000000 .entry
09404020 l    d  .exceptions	00000000 .exceptions
0400016c l    d  .text	00000000 .text
04004fd0 l    d  .rodata	00000000 .rodata
04005304 l    d  .rwdata	00000000 .rwdata
04006a24 l    d  .bss	00000000 .bss
04006c08 l    d  .sdram	00000000 .sdram
09200000 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
0940418c l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Embed_System_bsp//obj/HAL/src/crt0.o
040001b4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alarm_util.c
00000000 l    df *ABS*	00000000 delay_wait.c
00000000 l    df *ABS*	00000000 error_loop.c
00000000 l    df *ABS*	00000000 jtag_uart_util.c
00000000 l    df *ABS*	00000000 led_util.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04005440 l     O .rwdata	0000002c jtag_uart
04005404 l     O .rwdata	0000003c modular_adc_0
04005304 l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04000fe8 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
0400106c l     F .text	00000064 alt_adc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04001e84 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040020d4 l     F .text	00000074 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
04005614 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04003170 l     F .text	00000008 __fp_unlock
04003184 l     F .text	0000019c __sinit.part.1
04003320 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
040045bc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04005e90 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
04006a6c g     O .bss	00000004 alt_instruction_exception_handler
040011d0 g     F .text	00000020 adc_stop
04004b50 g     F .text	00000054 _isatty_r
04000bac g     F .text	00000050 alt_main
040003fc g     F .text	00000044 my_alarm_callback
04006b08 g     O .bss	00000100 alt_irq
04004ba4 g     F .text	00000060 _lseek_r
04005e94 g       *ABS*	00000000 __flash_rwdata_start
04006c08 g       *ABS*	00000000 __alt_heap_start
040048d8 g     F .text	0000005c __sseek
040034c0 g     F .text	00000010 __sinit
04002a9c g     F .text	00000140 __swbuf_r
04003328 g     F .text	00000068 __sfmoreglue
04004df4 g     F .text	00000004 __malloc_unlock
04006a44 g     O .bss	00000004 LAST_DELAY
04006a48 g     O .bss	00000004 PRINT_STDIO_WRAP_COUNT
040034a8 g     F .text	00000018 _cleanup
04002358 g     F .text	00000008 altera_nios2_gen2_irq_init
09404000 g     F .entry	0000001c __reset
0400128c g     F .text	00000018 adc_interrupt_disable
04000000 g       *ABS*	00000000 __flash_exceptions_start
04004af4 g     F .text	0000005c _fstat_r
04006a70 g     O .bss	00000004 errno
040029f0 g     F .text	00000014 __srget
04004854 g     F .text	00000008 __seofread
04001108 g     F .text	00000064 altera_modular_adc_init
04006a51 g     O .bss	00000001 LED_MASK
04006a58 g     O .bss	00000004 alt_argv
0400de40 g       *ABS*	00000000 _gp
04006a50 g     O .bss	00000001 LED_STATE
04001c98 g     F .text	00000060 alt_onchip_flash_poll_for_status_write_passed
0400546c g     O .rwdata	00000180 alt_fd_list
04002558 g     F .text	00000070 _getc_r
040025c8 g     F .text	00000088 getc
04001ef8 g     F .text	00000078 alt_find_dev
040026cc g     F .text	00000148 memcpy
09200000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
04003178 g     F .text	0000000c _cleanup_r
04001218 g     F .text	00000014 adc_set_mode_run_continuously
04002148 g     F .text	00000074 alt_io_redirect
040024ac g     F .text	00000074 alt_exception_cause_generated_bad_addr
04000f40 g     F .text	00000074 altera_avalon_jtag_uart_read
04000950 g     F .text	00000064 .hidden __udivsi3
04004cf0 g     F .text	00000084 isatty
04001c38 g     F .text	00000060 alt_onchip_flash_poll_for_status_erase_passed
0400245c g     F .text	00000050 alt_icache_flush
04006a7c g     O .bss	00000004 __malloc_top_pad
04005e54 g     O .rwdata	00000008 altera_onchip_flash_list
040047ac g     F .text	00000054 _sbrk_r
04004c04 g     F .text	00000060 _read_r
04005e4c g     O .rwdata	00000008 altera_modular_adc_list
04001e2c g     F .text	00000040 alt_dcache_flush
04001394 g     F .text	00000178 alt_onchip_flash_erase_block
04005e5c g     O .rwdata	00000004 alt_max_fd
040049f0 g     F .text	000000f0 _fclose_r
04003140 g     F .text	00000030 fflush
04006a78 g     O .bss	00000004 __malloc_max_sbrked_mem
04004d74 g     F .text	0000007c lseek
04005e80 g     O .rwdata	00000004 _global_impure_ptr
04006c08 g       *ABS*	00000000 __bss_end
0400206c g     F .text	00000068 alt_iic_isr_register
04000a8c g     F .text	0000000c alt_getchar
04000db8 g     F .text	000000f4 alt_tick
04006aa8 g     O .bss	00000018 ALARM_100MS
040012c8 g     F .text	00000014 adc_wait_for_interrupt
040034e0 g     F .text	00000018 __fp_lock_all
04002054 g     F .text	00000018 alt_ic_irq_enabled
04000d84 g     F .text	00000034 alt_alarm_stop
04006a68 g     O .bss	00000004 alt_irq_active
040006a4 g     F .text	00000030 set_delay_mode_100ms
094040fc g     F .exceptions	00000064 alt_irq_handler
040055ec g     O .rwdata	00000028 alt_dev_null
04006ac0 g     O .bss	00000018 ALARM_1MS
04000704 g     F .text	00000030 set_delay_mode_1ms
04001200 g     F .text	00000018 adc_set_mode_run_once
04001e6c g     F .text	00000018 alt_dcache_flush_all
04005e94 g       *ABS*	00000000 __ram_rwdata_end
04006a4c g     O .bss	00000004 PRINT_STDIO_MASK
04005e60 g     O .rwdata	00000008 alt_dev_list
04004f0c g     F .text	000000c4 write
04002814 g     F .text	000000a0 _putc_r
04000734 g     F .text	00000024 set_delay_mode_none
04005304 g       *ABS*	00000000 __ram_rodata_end
04004c78 g     F .text	00000078 fstat
04000758 g     F .text	0000002c error_loop
040011f0 g     F .text	00000010 adc_start
040009b4 g     F .text	00000058 .hidden __umodsi3
04006c08 g       *ABS*	00000000 end
04006a24 g     O .bss	00000008 ALARM_250MS_CONTEXT
09404160 g     F .exceptions	0000002c alt_instruction_exception_entry
09408000 g       *ABS*	00000000 __alt_stack_pointer
04001024 g     F .text	00000048 alt_avalon_timer_sc_init
04000fb4 g     F .text	00000034 altera_avalon_jtag_uart_write
040034d0 g     F .text	00000004 __sfp_lock_acquire
0400134c g     F .text	00000048 alt_onchip_flash_get_info
04003634 g     F .text	00000310 _free_r
04000bfc g     F .text	0000017c alt_printf
0400297c g     F .text	00000074 __srget_r
04002d48 g     F .text	00000180 __call_exitprocs
04005e88 g     O .rwdata	00000004 __malloc_sbrk_base
0400016c g     F .text	0000004c _start
04006a64 g     O .bss	00000004 _alt_tick_rate
04006a60 g     O .bss	00000004 _alt_nticks
04004df8 g     F .text	000000c8 read
04000ecc g     F .text	00000054 alt_sys_init
04006a2c g     O .bss	00000008 ALARM_100MS_CONTEXT
04005304 g       *ABS*	00000000 __ram_rwdata_start
04004fd0 g       *ABS*	00000000 __ram_rodata_start
04006a80 g     O .bss	00000028 __malloc_current_mallinfo
04000f20 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0400240c g     F .text	00000050 alt_get_fd
04006ad8 g     O .bss	00000018 ALARM_250MS
04001cf8 g     F .text	00000078 alt_busy_sleep
0400499c g     F .text	00000054 _close_r
040005b0 g     F .text	000000c4 delay_wait
04002650 g     F .text	0000007c memcmp
0940418c g       *ABS*	00000000 __alt_stack_base
04002bf4 g     F .text	00000154 __swsetup_r
04001278 g     F .text	00000014 adc_interrupt_enable
040012dc g     F .text	00000070 alt_onchip_flash_read
04003390 g     F .text	00000118 __sfp
04005a38 g     O .rwdata	00000408 __malloc_av_
040034dc g     F .text	00000004 __sinit_lock_release
04004800 g     F .text	00000054 __sread
04002360 g     F .text	000000ac alt_find_file
04001e8c g     F .text	0000006c alt_dev_llist_insert
04004df0 g     F .text	00000004 __malloc_lock
04004ec0 g     F .text	0000004c sbrk
040030e4 g     F .text	0000005c _fflush_r
04005e74 g     O .rwdata	00000008 alt_flash_dev_list
04006a24 g       *ABS*	00000000 __bss_start
04004494 g     F .text	00000128 memset
040001b8 g     F .text	00000244 main
04006a54 g     O .bss	00000004 alt_envp
04006a74 g     O .bss	00000004 __malloc_max_total_mem
04000f30 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
04002bdc g     F .text	00000018 __swbuf
040010d0 g     F .text	00000038 alt_adc_word_read
04006a34 g     O .bss	00000008 ALARM_10MS_CONTEXT
04004934 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04004ae0 g     F .text	00000014 fclose
04003c88 g     F .text	0000080c _malloc_r
04005e70 g     O .rwdata	00000004 alt_errno
04001bdc g     F .text	0000005c alt_onchip_flash_poll_for_status_to_go_idle
04003944 g     F .text	000000c4 _fwalk
040028b4 g     F .text	000000c8 putc
04000858 g     F .text	00000084 .hidden __divsi3
04003510 g     F .text	00000124 _malloc_trim_r
04001938 g     F .text	000002a4 altera_onchip_flash_init
04004fd0 g       *ABS*	00000000 __flash_rodata_start
04000eac g     F .text	00000020 alt_irq_init
04002334 g     F .text	00000024 alt_release_fd
0400493c g     F .text	00000060 _write_r
040007f8 g     F .text	00000060 update_led
04005e84 g     O .rwdata	00000004 _impure_ptr
04006a5c g     O .bss	00000004 alt_argc
04002ec8 g     F .text	0000021c __sflush_r
040045d8 g     F .text	000001d4 __srefill_r
04000674 g     F .text	00000030 set_delay_mode_250ms
09404020 g       .exceptions	00000000 alt_irq_entry
040034f8 g     F .text	00000018 __fp_unlock_all
04005e68 g     O .rwdata	00000008 alt_fs_list
0400150c g     F .text	00000220 alt_onchip_flash_write_block
09404020 g       *ABS*	00000000 __ram_exceptions_start
04001fe0 g     F .text	00000004 alt_ic_isr_register
04000784 g     F .text	00000074 print_binary_count_stdio
04005e94 g       *ABS*	00000000 _edata
0400172c g     F .text	0000020c alt_onchip_flash_write
04006c08 g       *ABS*	00000000 _end
04001f70 g     F .text	00000050 alt_flash_open_dev
04006af0 g     O .bss	00000018 ALARM_10MS
040012b8 g     F .text	00000010 adc_interrupt_asserted
0940418c g       *ABS*	00000000 __ram_exceptions_end
0400201c g     F .text	00000038 alt_ic_irq_disable
0400485c g     F .text	0000007c __swrite
04005e8c g     O .rwdata	00000004 __malloc_trim_threshold
040012a4 g     F .text	00000014 adc_clear_interrupt_status
04002520 g     F .text	00000038 exit
04003a08 g     F .text	000000c4 _fwalk_reent
04001fc0 g     F .text	00000014 alt_flash_close_dev
040008dc g     F .text	00000074 .hidden __modsi3
09408000 g       *ABS*	00000000 __alt_data_end
09404020 g     F .exceptions	00000000 alt_exception
040034d4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
09404000 g       *ABS*	00000000 __alt_mem_onchip_ram
040011c8 g     F .text	00000008 altera_modular_adc_open
04004c64 g     F .text	00000014 _exit
04000a0c g     F .text	00000080 alt_alarm_start
04003acc g     F .text	000001bc __smakebuf_r
04002a04 g     F .text	00000098 strlen
040021bc g     F .text	00000178 open
04000440 g     F .text	00000170 alarm_init
04000d78 g     F .text	0000000c alt_putchar
0400122c g     F .text	0000004c adc_recalibrate
04006a3c g     O .bss	00000008 ALARM_1MS_CONTEXT
04001fd4 g     F .text	0000000c alt_icache_flush_all
04005e7c g     O .rwdata	00000004 alt_priority_mask
04001fe4 g     F .text	00000038 alt_ic_irq_enable
040006d4 g     F .text	00000030 set_delay_mode_10ms
04005e40 g     O .rwdata	00000001 DELAY_MODE
04005e44 g     O .rwdata	00000008 alt_alarm_list
04001d70 g     F .text	000000bc close
04000a98 g     F .text	00000114 alt_load
0400116c g     F .text	0000005c alt_adc_register_callback
040034d8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

09404000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 9404000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 9404004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 9404008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 940400c:	00bffd16 	blt	zero,r2,9404004 <__alt_data_end+0xffffc004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 9404010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 9404014:	08405b14 	ori	at,at,364
    jmp r1
 9404018:	0800683a 	jmp	at
 940401c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

09404020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 9404020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 9404024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 9404028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 940402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 9404030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 9404034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 9404038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 940403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 9404040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 9404044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 9404048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 940404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 9404050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 9404054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 9404058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 940405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 9404060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 9404064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 9404068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 940406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 9404070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 9404074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 9404078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 940407c:	10000326 	beq	r2,zero,940408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 9404080:	20000226 	beq	r4,zero,940408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 9404084:	94040fc0 	call	94040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 9404088:	00000706 	br	94040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 940408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 9404090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 9404094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 9404098:	94041600 	call	9404160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 940409c:	1000021e 	bne	r2,zero,94040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 94040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 94040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 94040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 94040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 94040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 94040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 94040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 94040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 94040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 94040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 94040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 94040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 94040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 94040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 94040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 94040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 94040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 94040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 94040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 94040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 94040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 94040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 94040f8:	ef80083a 	eret

094040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 94040fc:	defffe04 	addi	sp,sp,-8
 9404100:	dfc00115 	stw	ra,4(sp)
 9404104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 9404108:	000b313a 	rdctl	r5,ipending
 940410c:	04010034 	movhi	r16,1024
 9404110:	841ac204 	addi	r16,r16,27400
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 9404114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 9404118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 940411c:	1000051e 	bne	r2,zero,9404134 <alt_irq_handler+0x38>
 9404120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 9404124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 9404128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 940412c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 9404130:	203ffc26 	beq	r4,zero,9404124 <__alt_data_end+0xffffc124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 9404134:	180690fa 	slli	r3,r3,3
 9404138:	80c7883a 	add	r3,r16,r3
 940413c:	18800017 	ldw	r2,0(r3)
 9404140:	19000117 	ldw	r4,4(r3)
 9404144:	103ee83a 	callr	r2
 9404148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 940414c:	283ff11e 	bne	r5,zero,9404114 <__alt_data_end+0xffffc114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 9404150:	dfc00117 	ldw	ra,4(sp)
 9404154:	dc000017 	ldw	r16,0(sp)
 9404158:	dec00204 	addi	sp,sp,8
 940415c:	f800283a 	ret

09404160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 9404160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 9404164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 9404168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 940416c:	d0a30b17 	ldw	r2,-29652(gp)
 9404170:	10000326 	beq	r2,zero,9404180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 9404174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 9404178:	2008d0ba 	srli	r4,r4,2
 940417c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 9404180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 9404184:	0005883a 	mov	r2,zero
 9404188:	f800283a 	ret

Disassembly of section .text:

0400016c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 400016c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000170:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000174:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000178:	00bffd16 	blt	zero,r2,4000170 <__alt_data_end+0xfabf8170>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 400017c:	06c25034 	movhi	sp,2368
    ori sp, sp, %lo(__alt_stack_pointer)
 4000180:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
 4000184:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000188:	d6b79014 	ori	gp,gp,56896
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 400018c:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000190:	109a8914 	ori	r2,r2,27172

    movhi r3, %hi(__bss_end)
 4000194:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000198:	18db0214 	ori	r3,r3,27656

    beq r2, r3, 1f
 400019c:	10c00326 	beq	r2,r3,40001ac <_start+0x40>

0:
    stw zero, (r2)
 40001a0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001a4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001a8:	10fffd36 	bltu	r2,r3,40001a0 <__alt_data_end+0xfabf81a0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001ac:	4000a980 	call	4000a98 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001b0:	4000bac0 	call	4000bac <alt_main>

040001b4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001b4:	003fff06 	br	40001b4 <__alt_data_end+0xfabf81b4>

040001b8 <main>:

#define MAX_COUNT 0xFF  //use a 8-bit maximum count value since we have a 8-bit LED PIO

// the main() application routine
int main(void)
{
 40001b8:	defffb04 	addi	sp,sp,-20
 40001bc:	dfc00415 	stw	ra,16(sp)
 40001c0:	df000315 	stw	fp,12(sp)
 40001c4:	df000304 	addi	fp,sp,12
  alt_u8 binary_count;
  char input;
  int dir;
  
  // announce that we're running on STDOUT
  alt_printf("\nled_control program starting...\n\n");
 40001c8:	01010034 	movhi	r4,1024
 40001cc:	2113f404 	addi	r4,r4,20432
 40001d0:	4000bfc0 	call	4000bfc <alt_printf>
  alt_printf ("CONGRATULATIONS!  You have successfully compiled a Nios II project!\n");
 40001d4:	01010034 	movhi	r4,1024
 40001d8:	2113fd04 	addi	r4,r4,20468
 40001dc:	4000bfc0 	call	4000bfc <alt_printf>

  // initialize some peripherals and helper routines
  alarm_init();           // see src/alarm_util.c
 40001e0:	40004400 	call	4000440 <alarm_init>
  
  // start an infinite loop

  while(1) {

    alt_printf("\nPress 'u' to count up\n");
 40001e4:	01010034 	movhi	r4,1024
 40001e8:	21140f04 	addi	r4,r4,20540
 40001ec:	4000bfc0 	call	4000bfc <alt_printf>
    alt_printf("Press 'd' to count down\n");
 40001f0:	01010034 	movhi	r4,1024
 40001f4:	21141504 	addi	r4,r4,20564
 40001f8:	4000bfc0 	call	4000bfc <alt_printf>
    alt_printf("Press '3' to count by threes\n");
 40001fc:	01010034 	movhi	r4,1024
 4000200:	21141c04 	addi	r4,r4,20592
 4000204:	4000bfc0 	call	4000bfc <alt_printf>
    alt_printf("Press 't' to down count by tens\n");
 4000208:	01010034 	movhi	r4,1024
 400020c:	21142404 	addi	r4,r4,20624
 4000210:	4000bfc0 	call	4000bfc <alt_printf>
    alt_printf("Press '5' to up count by fives\n");
 4000214:	01010034 	movhi	r4,1024
 4000218:	21142d04 	addi	r4,r4,20660
 400021c:	4000bfc0 	call	4000bfc <alt_printf>
    input = alt_getchar();
 4000220:	4000a8c0 	call	4000a8c <alt_getchar>
 4000224:	e0bfff05 	stb	r2,-4(fp)
    alt_getchar();
 4000228:	4000a8c0 	call	4000a8c <alt_getchar>
    alt_printf("You selected: '%c'\n",input);
 400022c:	e0bfff07 	ldb	r2,-4(fp)
 4000230:	100b883a 	mov	r5,r2
 4000234:	01010034 	movhi	r4,1024
 4000238:	21143504 	addi	r4,r4,20692
 400023c:	4000bfc0 	call	4000bfc <alt_printf>
	if (input == 'u') {
 4000240:	e0bfff07 	ldb	r2,-4(fp)
 4000244:	10801d58 	cmpnei	r2,r2,117
 4000248:	1000071e 	bne	r2,zero,4000268 <main+0xb0>
        dir = 1;
 400024c:	00800044 	movi	r2,1
 4000250:	e0bffe15 	stw	r2,-8(fp)
    	binary_count = 0;
 4000254:	e03ffd05 	stb	zero,-12(fp)
        alt_printf(" -  counting up by 1\n");
 4000258:	01010034 	movhi	r4,1024
 400025c:	21143a04 	addi	r4,r4,20712
 4000260:	4000bfc0 	call	4000bfc <alt_printf>
 4000264:	00003106 	br	400032c <main+0x174>
    }
    else if (input == 'd') {
 4000268:	e0bfff07 	ldb	r2,-4(fp)
 400026c:	10801918 	cmpnei	r2,r2,100
 4000270:	1000081e 	bne	r2,zero,4000294 <main+0xdc>
        dir = -1;
 4000274:	00bfffc4 	movi	r2,-1
 4000278:	e0bffe15 	stw	r2,-8(fp)
    	binary_count = MAX_COUNT;
 400027c:	00bfffc4 	movi	r2,-1
 4000280:	e0bffd05 	stb	r2,-12(fp)
        alt_printf(" -  counting down by 1\n");
 4000284:	01010034 	movhi	r4,1024
 4000288:	21144004 	addi	r4,r4,20736
 400028c:	4000bfc0 	call	4000bfc <alt_printf>
 4000290:	00002606 	br	400032c <main+0x174>
    }
    else if (input == '3') {
 4000294:	e0bfff07 	ldb	r2,-4(fp)
 4000298:	10800cd8 	cmpnei	r2,r2,51
 400029c:	1000071e 	bne	r2,zero,40002bc <main+0x104>
        dir = 3;
 40002a0:	008000c4 	movi	r2,3
 40002a4:	e0bffe15 	stw	r2,-8(fp)
    	binary_count = 0;
 40002a8:	e03ffd05 	stb	zero,-12(fp)
        alt_printf(" -  counting up by 3\n");
 40002ac:	01010034 	movhi	r4,1024
 40002b0:	21144604 	addi	r4,r4,20760
 40002b4:	4000bfc0 	call	4000bfc <alt_printf>
 40002b8:	00001c06 	br	400032c <main+0x174>
    }
    else if (input == 't') {
 40002bc:	e0bfff07 	ldb	r2,-4(fp)
 40002c0:	10801d18 	cmpnei	r2,r2,116
 40002c4:	1000081e 	bne	r2,zero,40002e8 <main+0x130>
        dir = -10;
 40002c8:	00bffd84 	movi	r2,-10
 40002cc:	e0bffe15 	stw	r2,-8(fp)
        binary_count = MAX_COUNT;
 40002d0:	00bfffc4 	movi	r2,-1
 40002d4:	e0bffd05 	stb	r2,-12(fp)
        alt_printf(" -  counting down by 10\n");
 40002d8:	01010034 	movhi	r4,1024
 40002dc:	21144c04 	addi	r4,r4,20784
 40002e0:	4000bfc0 	call	4000bfc <alt_printf>
 40002e4:	00001106 	br	400032c <main+0x174>
    }
    else if (input == '5') {
 40002e8:	e0bfff07 	ldb	r2,-4(fp)
 40002ec:	10800d58 	cmpnei	r2,r2,53
 40002f0:	1000071e 	bne	r2,zero,4000310 <main+0x158>
        dir = 5;
 40002f4:	00800144 	movi	r2,5
 40002f8:	e0bffe15 	stw	r2,-8(fp)
    	binary_count = 0;
 40002fc:	e03ffd05 	stb	zero,-12(fp)
        alt_printf(" -  counting up by 5\n");
 4000300:	01010034 	movhi	r4,1024
 4000304:	21145304 	addi	r4,r4,20812
 4000308:	4000bfc0 	call	4000bfc <alt_printf>
 400030c:	00000706 	br	400032c <main+0x174>
    }
    else {
        dir = 1;
 4000310:	00800044 	movi	r2,1
 4000314:	e0bffe15 	stw	r2,-8(fp)
        binary_count = MAX_COUNT;
 4000318:	00bfffc4 	movi	r2,-1
 400031c:	e0bffd05 	stb	r2,-12(fp)
        alt_printf("INVALID ENTRY");
 4000320:	01010034 	movhi	r4,1024
 4000324:	21145904 	addi	r4,r4,20836
 4000328:	4000bfc0 	call	4000bfc <alt_printf>
    }
        
    // initialize the line wrap count variable
    PRINT_STDIO_WRAP_COUNT = 0;
 400032c:	d0230215 	stw	zero,-29688(gp)

    // print the binary count out the STDOUT
    print_binary_count_stdio(binary_count);         // see src/jtag_uart_util.c
 4000330:	e0bffd03 	ldbu	r2,-12(fp)
 4000334:	1009883a 	mov	r4,r2
 4000338:	40007840 	call	4000784 <print_binary_count_stdio>

    // update the green led display with the binary count
    update_led(binary_count);                      // see src/led_util.c
 400033c:	e0bffd03 	ldbu	r2,-12(fp)
 4000340:	1009883a 	mov	r4,r2
 4000344:	40007f80 	call	40007f8 <update_led>

    // wait for the delay period
    delay_wait();                                   // see src/delay_wait.c
 4000348:	40005b00 	call	40005b0 <delay_wait>

    // count until we reach all the maximum count
    while( (binary_count < MAX_COUNT && dir > 0) ||
 400034c:	00000c06 	br	4000380 <main+0x1c8>
    	   (binary_count > 0 && dir == -1) ||
    	   (binary_count > 10 && dir == -10)
    	   )
    {
        // increment the binary counter
        binary_count= binary_count + dir;
 4000350:	e0bffe17 	ldw	r2,-8(fp)
 4000354:	1007883a 	mov	r3,r2
 4000358:	e0bffd03 	ldbu	r2,-12(fp)
 400035c:	1885883a 	add	r2,r3,r2
 4000360:	e0bffd05 	stb	r2,-12(fp)

        // print the binary count out the STDOUT
        print_binary_count_stdio(binary_count);         // see src/jtag_uart_util.c
 4000364:	e0bffd03 	ldbu	r2,-12(fp)
 4000368:	1009883a 	mov	r4,r2
 400036c:	40007840 	call	4000784 <print_binary_count_stdio>
            
        // update the green led display with the binary count
        update_led(binary_count);                      // see src/led_util.c
 4000370:	e0bffd03 	ldbu	r2,-12(fp)
 4000374:	1009883a 	mov	r4,r2
 4000378:	40007f80 	call	40007f8 <update_led>
    
        // wait for the delay period
        delay_wait();                                   // see src/delay_wait.c
 400037c:	40005b00 	call	40005b0 <delay_wait>

    // wait for the delay period
    delay_wait();                                   // see src/delay_wait.c

    // count until we reach all the maximum count
    while( (binary_count < MAX_COUNT && dir > 0) ||
 4000380:	e0bffd03 	ldbu	r2,-12(fp)
 4000384:	10803fe0 	cmpeqi	r2,r2,255
 4000388:	1000021e 	bne	r2,zero,4000394 <main+0x1dc>
 400038c:	e0bffe17 	ldw	r2,-8(fp)
 4000390:	00bfef16 	blt	zero,r2,4000350 <__alt_data_end+0xfabf8350>
 4000394:	e0bffd03 	ldbu	r2,-12(fp)
 4000398:	10000326 	beq	r2,zero,40003a8 <main+0x1f0>
    	   (binary_count > 0 && dir == -1) ||
 400039c:	e0bffe17 	ldw	r2,-8(fp)
 40003a0:	10bfffe0 	cmpeqi	r2,r2,-1
 40003a4:	103fea1e 	bne	r2,zero,4000350 <__alt_data_end+0xfabf8350>
 40003a8:	e0bffd03 	ldbu	r2,-12(fp)
 40003ac:	108002f0 	cmpltui	r2,r2,11
 40003b0:	1000031e 	bne	r2,zero,40003c0 <main+0x208>
    	   (binary_count > 10 && dir == -10)
 40003b4:	e0bffe17 	ldw	r2,-8(fp)
 40003b8:	10bffda0 	cmpeqi	r2,r2,-10
 40003bc:	103fe41e 	bne	r2,zero,4000350 <__alt_data_end+0xfabf8350>
        // wait for the delay period
        delay_wait();                                   // see src/delay_wait.c
    }

    // If down-counting by 10 and binary_count is below 10, then set LEDs to all off.
    if(binary_count < 10 && dir == -10) {
 40003c0:	e0bffd03 	ldbu	r2,-12(fp)
 40003c4:	108002a8 	cmpgeui	r2,r2,10
 40003c8:	1000071e 	bne	r2,zero,40003e8 <main+0x230>
 40003cc:	e0bffe17 	ldw	r2,-8(fp)
 40003d0:	10bffd98 	cmpnei	r2,r2,-10
 40003d4:	1000041e 	bne	r2,zero,40003e8 <main+0x230>
    	binary_count = 0;
 40003d8:	e03ffd05 	stb	zero,-12(fp)
    	update_led(binary_count);
 40003dc:	e0bffd03 	ldbu	r2,-12(fp)
 40003e0:	1009883a 	mov	r4,r2
 40003e4:	40007f80 	call	40007f8 <update_led>
    }

    // announce loop completion on STDOUT and the UART
    alt_printf("\n\n LED control program completed its loop ...\n\n");
 40003e8:	01010034 	movhi	r4,1024
 40003ec:	21145d04 	addi	r4,r4,20852
 40003f0:	4000bfc0 	call	4000bfc <alt_printf>

    // wait for the delay period
    delay_wait();                                   // see src/delay_wait.c
 40003f4:	40005b00 	call	40005b0 <delay_wait>
        
  }
 40003f8:	003f7a06 	br	40001e4 <__alt_data_end+0xfabf81e4>

040003fc <my_alarm_callback>:
#include "../inc/main_includes.h"

// define the alarm call back routine that will be used by all alarms we start
// the alarm context will keep the alarms separate
alt_u32 my_alarm_callback (void* context)
{
 40003fc:	defffd04 	addi	sp,sp,-12
 4000400:	df000215 	stw	fp,8(sp)
 4000404:	df000204 	addi	fp,sp,8
 4000408:	e13fff15 	stw	r4,-4(fp)
    MY_ALARM_STRUCT *my_alarm_context;

    // cast the context pointer into our alarm context structure pointer
    my_alarm_context = context;
 400040c:	e0bfff17 	ldw	r2,-4(fp)
 4000410:	e0bffe15 	stw	r2,-8(fp)

    // increment the alarm count
    my_alarm_context->alarm_count++;
 4000414:	e0bffe17 	ldw	r2,-8(fp)
 4000418:	10800117 	ldw	r2,4(r2)
 400041c:	10c00044 	addi	r3,r2,1
 4000420:	e0bffe17 	ldw	r2,-8(fp)
 4000424:	10c00115 	stw	r3,4(r2)

    // return the timeout value for this alarm
    return (my_alarm_context->alarm_timeout);
 4000428:	e0bffe17 	ldw	r2,-8(fp)
 400042c:	10800017 	ldw	r2,0(r2)
}
 4000430:	e037883a 	mov	sp,fp
 4000434:	df000017 	ldw	fp,0(sp)
 4000438:	dec00104 	addi	sp,sp,4
 400043c:	f800283a 	ret

04000440 <alarm_init>:
alt_alarm ALARM_1MS;
MY_ALARM_STRUCT ALARM_1MS_CONTEXT;

// main() should call this initialization routine when it starts to get the alarms running
void alarm_init(void)
{
 4000440:	defffd04 	addi	sp,sp,-12
 4000444:	dfc00215 	stw	ra,8(sp)
 4000448:	df000115 	stw	fp,4(sp)
 400044c:	df000104 	addi	fp,sp,4
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4000450:	d0a30917 	ldw	r2,-29660(gp)
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
 4000454:	1004d0ba 	srli	r2,r2,2
 4000458:	d0a2f915 	stw	r2,-29724(gp)
    ALARM_250MS_CONTEXT.alarm_count = 0;
 400045c:	d022fa15 	stw	zero,-29720(gp)
    return_result = alt_alarm_start (
 4000460:	d0a2f917 	ldw	r2,-29724(gp)
 4000464:	d1e2f904 	addi	r7,gp,-29724
 4000468:	01810034 	movhi	r6,1024
 400046c:	3180ff04 	addi	r6,r6,1020
 4000470:	100b883a 	mov	r5,r2
 4000474:	01010034 	movhi	r4,1024
 4000478:	211ab604 	addi	r4,r4,27352
 400047c:	4000a0c0 	call	4000a0c <alt_alarm_start>
 4000480:	e0bfff15 	stw	r2,-4(fp)
                        ALARM_250MS_CONTEXT.alarm_timeout,  //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_250MS_CONTEXT)       //void* context
                    );

    if(return_result)
 4000484:	e0bfff17 	ldw	r2,-4(fp)
 4000488:	10000426 	beq	r2,zero,400049c <alarm_init+0x5c>
    {
        alt_printf("\n\nError when starting 250ms alarm...\n");
 400048c:	01010034 	movhi	r4,1024
 4000490:	21146904 	addi	r4,r4,20900
 4000494:	4000bfc0 	call	4000bfc <alt_printf>
        error_loop();
 4000498:	40007580 	call	4000758 <error_loop>
 400049c:	d0a30917 	ldw	r2,-29660(gp)
    }

    // initialize the context structure for the 100ms alarm and start it running
    ALARM_100MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/10;
 40004a0:	01400284 	movi	r5,10
 40004a4:	1009883a 	mov	r4,r2
 40004a8:	40009500 	call	4000950 <__udivsi3>
 40004ac:	d0a2fb15 	stw	r2,-29716(gp)
    ALARM_100MS_CONTEXT.alarm_count = 0;
 40004b0:	d022fc15 	stw	zero,-29712(gp)
    return_result = alt_alarm_start (
 40004b4:	d0a2fb17 	ldw	r2,-29716(gp)
 40004b8:	d1e2fb04 	addi	r7,gp,-29716
 40004bc:	01810034 	movhi	r6,1024
 40004c0:	3180ff04 	addi	r6,r6,1020
 40004c4:	100b883a 	mov	r5,r2
 40004c8:	01010034 	movhi	r4,1024
 40004cc:	211aaa04 	addi	r4,r4,27304
 40004d0:	4000a0c0 	call	4000a0c <alt_alarm_start>
 40004d4:	e0bfff15 	stw	r2,-4(fp)
                        ALARM_100MS_CONTEXT.alarm_timeout,  //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_100MS_CONTEXT)       //void* context
                    );

    if(return_result)
 40004d8:	e0bfff17 	ldw	r2,-4(fp)
 40004dc:	10000426 	beq	r2,zero,40004f0 <alarm_init+0xb0>
    {
        alt_printf("\n\nError when starting 100ms alarm...\n");
 40004e0:	01010034 	movhi	r4,1024
 40004e4:	21147304 	addi	r4,r4,20940
 40004e8:	4000bfc0 	call	4000bfc <alt_printf>
        error_loop();
 40004ec:	40007580 	call	4000758 <error_loop>
 40004f0:	d0a30917 	ldw	r2,-29660(gp)
    }

    // initialize the context structure for the 10ms alarm and start it running
    ALARM_10MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/100;
 40004f4:	01401904 	movi	r5,100
 40004f8:	1009883a 	mov	r4,r2
 40004fc:	40009500 	call	4000950 <__udivsi3>
 4000500:	d0a2fd15 	stw	r2,-29708(gp)
    ALARM_10MS_CONTEXT.alarm_count = 0;
 4000504:	d022fe15 	stw	zero,-29704(gp)
    return_result = alt_alarm_start (
 4000508:	d0a2fd17 	ldw	r2,-29708(gp)
 400050c:	d1e2fd04 	addi	r7,gp,-29708
 4000510:	01810034 	movhi	r6,1024
 4000514:	3180ff04 	addi	r6,r6,1020
 4000518:	100b883a 	mov	r5,r2
 400051c:	01010034 	movhi	r4,1024
 4000520:	211abc04 	addi	r4,r4,27376
 4000524:	4000a0c0 	call	4000a0c <alt_alarm_start>
 4000528:	e0bfff15 	stw	r2,-4(fp)
                        ALARM_10MS_CONTEXT.alarm_timeout,   //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_10MS_CONTEXT)        //void* context
                    );

    if(return_result)
 400052c:	e0bfff17 	ldw	r2,-4(fp)
 4000530:	10000426 	beq	r2,zero,4000544 <alarm_init+0x104>
    {
        alt_printf("\n\nError when starting 10ms alarm...\n");
 4000534:	01010034 	movhi	r4,1024
 4000538:	21147d04 	addi	r4,r4,20980
 400053c:	4000bfc0 	call	4000bfc <alt_printf>
        error_loop();
 4000540:	40007580 	call	4000758 <error_loop>
 4000544:	d0a30917 	ldw	r2,-29660(gp)
    }

    // initialize the context structure for the 1ms alarm and start it running
    ALARM_1MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/1000;
 4000548:	0140fa04 	movi	r5,1000
 400054c:	1009883a 	mov	r4,r2
 4000550:	40009500 	call	4000950 <__udivsi3>
 4000554:	d0a2ff15 	stw	r2,-29700(gp)
    ALARM_1MS_CONTEXT.alarm_count = 0;
 4000558:	d0230015 	stw	zero,-29696(gp)
    return_result = alt_alarm_start (
 400055c:	d0a2ff17 	ldw	r2,-29700(gp)
 4000560:	d1e2ff04 	addi	r7,gp,-29700
 4000564:	01810034 	movhi	r6,1024
 4000568:	3180ff04 	addi	r6,r6,1020
 400056c:	100b883a 	mov	r5,r2
 4000570:	01010034 	movhi	r4,1024
 4000574:	211ab004 	addi	r4,r4,27328
 4000578:	4000a0c0 	call	4000a0c <alt_alarm_start>
 400057c:	e0bfff15 	stw	r2,-4(fp)
                        ALARM_1MS_CONTEXT.alarm_timeout,    //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_1MS_CONTEXT)         //void* context
                    );

    if(return_result)
 4000580:	e0bfff17 	ldw	r2,-4(fp)
 4000584:	10000426 	beq	r2,zero,4000598 <alarm_init+0x158>
    {
        alt_printf("\n\nError when starting 1ms alarm...\n");
 4000588:	01010034 	movhi	r4,1024
 400058c:	21148704 	addi	r4,r4,21020
 4000590:	4000bfc0 	call	4000bfc <alt_printf>
        error_loop();
 4000594:	40007580 	call	4000758 <error_loop>
    }

}
 4000598:	0001883a 	nop
 400059c:	e037883a 	mov	sp,fp
 40005a0:	dfc00117 	ldw	ra,4(sp)
 40005a4:	df000017 	ldw	fp,0(sp)
 40005a8:	dec00204 	addi	sp,sp,8
 40005ac:	f800283a 	ret

040005b0 <delay_wait>:
volatile alt_u32 LAST_DELAY = 0;
volatile alt_u8  DELAY_MODE = DELAY_MODE_100MS;

// the main() loop can call this routine to delay based on the current delay mode
void delay_wait(void)
{
 40005b0:	defffd04 	addi	sp,sp,-12
 40005b4:	dfc00215 	stw	ra,8(sp)
 40005b8:	df000115 	stw	fp,4(sp)
 40005bc:	df000104 	addi	fp,sp,4
    alt_u32 this_delay = LAST_DELAY;
 40005c0:	d0a30117 	ldw	r2,-29692(gp)
 40005c4:	e0bfff15 	stw	r2,-4(fp)

    if(DELAY_MODE != DELAY_MODE_NONE)
 40005c8:	d0a00003 	ldbu	r2,-32768(gp)
 40005cc:	10803fcc 	andi	r2,r2,255
 40005d0:	10002226 	beq	r2,zero,400065c <delay_wait+0xac>
    {
        do      // wait until we see the proper delay count increment
        {
            switch(DELAY_MODE)
 40005d4:	d0a00003 	ldbu	r2,-32768(gp)
 40005d8:	10803fcc 	andi	r2,r2,255
 40005dc:	10c000a0 	cmpeqi	r3,r2,2
 40005e0:	18000f1e 	bne	r3,zero,4000620 <delay_wait+0x70>
 40005e4:	10c000c8 	cmpgei	r3,r2,3
 40005e8:	1800031e 	bne	r3,zero,40005f8 <delay_wait+0x48>
 40005ec:	10800060 	cmpeqi	r2,r2,1
 40005f0:	10000e1e 	bne	r2,zero,400062c <delay_wait+0x7c>
 40005f4:	00001006 	br	4000638 <delay_wait+0x88>
 40005f8:	10c000e0 	cmpeqi	r3,r2,3
 40005fc:	1800051e 	bne	r3,zero,4000614 <delay_wait+0x64>
 4000600:	10800120 	cmpeqi	r2,r2,4
 4000604:	10000c26 	beq	r2,zero,4000638 <delay_wait+0x88>
            {
                case(DELAY_MODE_250MS):
                    this_delay = ALARM_250MS_CONTEXT.alarm_count;
 4000608:	d0a2fa17 	ldw	r2,-29720(gp)
 400060c:	e0bfff15 	stw	r2,-4(fp)
                    break;
 4000610:	00000d06 	br	4000648 <delay_wait+0x98>
                case(DELAY_MODE_100MS):
                    this_delay = ALARM_100MS_CONTEXT.alarm_count;
 4000614:	d0a2fc17 	ldw	r2,-29712(gp)
 4000618:	e0bfff15 	stw	r2,-4(fp)
                    break;
 400061c:	00000a06 	br	4000648 <delay_wait+0x98>
                case(DELAY_MODE_10MS):
                    this_delay = ALARM_10MS_CONTEXT.alarm_count;
 4000620:	d0a2fe17 	ldw	r2,-29704(gp)
 4000624:	e0bfff15 	stw	r2,-4(fp)
                    break;
 4000628:	00000706 	br	4000648 <delay_wait+0x98>
                case(DELAY_MODE_1MS):
                    this_delay = ALARM_1MS_CONTEXT.alarm_count;
 400062c:	d0a30017 	ldw	r2,-29696(gp)
 4000630:	e0bfff15 	stw	r2,-4(fp)
                    break;
 4000634:	00000406 	br	4000648 <delay_wait+0x98>
                default:
                    alt_printf("Error: invalid delay mode detected...\n");
 4000638:	01010034 	movhi	r4,1024
 400063c:	21149004 	addi	r4,r4,21056
 4000640:	4000bfc0 	call	4000bfc <alt_printf>
                    error_loop();
 4000644:	40007580 	call	4000758 <error_loop>
            }
        } while(LAST_DELAY == this_delay);
 4000648:	d0e30117 	ldw	r3,-29692(gp)
 400064c:	e0bfff17 	ldw	r2,-4(fp)
 4000650:	18bfe026 	beq	r3,r2,40005d4 <__alt_data_end+0xfabf85d4>

        LAST_DELAY = this_delay;
 4000654:	e0bfff17 	ldw	r2,-4(fp)
 4000658:	d0a30115 	stw	r2,-29692(gp)
    }

}
 400065c:	0001883a 	nop
 4000660:	e037883a 	mov	sp,fp
 4000664:	dfc00117 	ldw	ra,4(sp)
 4000668:	df000017 	ldw	fp,0(sp)
 400066c:	dec00204 	addi	sp,sp,8
 4000670:	f800283a 	ret

04000674 <set_delay_mode_250ms>:

// these are convenience routines for setting the delay modes
void set_delay_mode_250ms(void)
{
 4000674:	deffff04 	addi	sp,sp,-4
 4000678:	df000015 	stw	fp,0(sp)
 400067c:	d839883a 	mov	fp,sp
   DELAY_MODE = DELAY_MODE_250MS;
 4000680:	00800104 	movi	r2,4
 4000684:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_250MS_CONTEXT.alarm_count;
 4000688:	d0a2fa17 	ldw	r2,-29720(gp)
 400068c:	d0a30115 	stw	r2,-29692(gp)
}
 4000690:	0001883a 	nop
 4000694:	e037883a 	mov	sp,fp
 4000698:	df000017 	ldw	fp,0(sp)
 400069c:	dec00104 	addi	sp,sp,4
 40006a0:	f800283a 	ret

040006a4 <set_delay_mode_100ms>:

void set_delay_mode_100ms(void)
{
 40006a4:	deffff04 	addi	sp,sp,-4
 40006a8:	df000015 	stw	fp,0(sp)
 40006ac:	d839883a 	mov	fp,sp
   DELAY_MODE = DELAY_MODE_100MS;
 40006b0:	008000c4 	movi	r2,3
 40006b4:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_100MS_CONTEXT.alarm_count;
 40006b8:	d0a2fc17 	ldw	r2,-29712(gp)
 40006bc:	d0a30115 	stw	r2,-29692(gp)
}
 40006c0:	0001883a 	nop
 40006c4:	e037883a 	mov	sp,fp
 40006c8:	df000017 	ldw	fp,0(sp)
 40006cc:	dec00104 	addi	sp,sp,4
 40006d0:	f800283a 	ret

040006d4 <set_delay_mode_10ms>:

void set_delay_mode_10ms(void)
{
 40006d4:	deffff04 	addi	sp,sp,-4
 40006d8:	df000015 	stw	fp,0(sp)
 40006dc:	d839883a 	mov	fp,sp
   DELAY_MODE = DELAY_MODE_10MS;
 40006e0:	00800084 	movi	r2,2
 40006e4:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_10MS_CONTEXT.alarm_count;
 40006e8:	d0a2fe17 	ldw	r2,-29704(gp)
 40006ec:	d0a30115 	stw	r2,-29692(gp)
}
 40006f0:	0001883a 	nop
 40006f4:	e037883a 	mov	sp,fp
 40006f8:	df000017 	ldw	fp,0(sp)
 40006fc:	dec00104 	addi	sp,sp,4
 4000700:	f800283a 	ret

04000704 <set_delay_mode_1ms>:

void set_delay_mode_1ms(void)
{
 4000704:	deffff04 	addi	sp,sp,-4
 4000708:	df000015 	stw	fp,0(sp)
 400070c:	d839883a 	mov	fp,sp
   DELAY_MODE = DELAY_MODE_1MS;
 4000710:	00800044 	movi	r2,1
 4000714:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_1MS_CONTEXT.alarm_count;
 4000718:	d0a30017 	ldw	r2,-29696(gp)
 400071c:	d0a30115 	stw	r2,-29692(gp)
}
 4000720:	0001883a 	nop
 4000724:	e037883a 	mov	sp,fp
 4000728:	df000017 	ldw	fp,0(sp)
 400072c:	dec00104 	addi	sp,sp,4
 4000730:	f800283a 	ret

04000734 <set_delay_mode_none>:

void set_delay_mode_none(void)
{
 4000734:	deffff04 	addi	sp,sp,-4
 4000738:	df000015 	stw	fp,0(sp)
 400073c:	d839883a 	mov	fp,sp
   DELAY_MODE = DELAY_MODE_NONE;
 4000740:	d0200005 	stb	zero,-32768(gp)
}
 4000744:	0001883a 	nop
 4000748:	e037883a 	mov	sp,fp
 400074c:	df000017 	ldw	fp,0(sp)
 4000750:	dec00104 	addi	sp,sp,4
 4000754:	f800283a 	ret

04000758 <error_loop>:

#include "../inc/main_includes.h"

// any non-recoverable errors that are detected in the application can jump to here
void error_loop(void)
{
 4000758:	defffe04 	addi	sp,sp,-8
 400075c:	dfc00115 	stw	ra,4(sp)
 4000760:	df000015 	stw	fp,0(sp)
 4000764:	d839883a 	mov	fp,sp
    // indicate that we got into the error loop
    alt_printf("\nError loop entered...\n");
 4000768:	01010034 	movhi	r4,1024
 400076c:	21149a04 	addi	r4,r4,21096
 4000770:	4000bfc0 	call	4000bfc <alt_printf>
    alt_printf("\nApplication halted...\n");
 4000774:	01010034 	movhi	r4,1024
 4000778:	2114a004 	addi	r4,r4,21120
 400077c:	4000bfc0 	call	4000bfc <alt_printf>

    // infinite loop
    while(1);
 4000780:	003fff06 	br	4000780 <__alt_data_end+0xfabf8780>

04000784 <print_binary_count_stdio>:
volatile int PRINT_STDIO_WRAP_COUNT = 0;
volatile int PRINT_STDIO_MASK = 0;

// this routine is called by the main() loop
void print_binary_count_stdio(alt_u16 binary_count)
{
 4000784:	defffd04 	addi	sp,sp,-12
 4000788:	dfc00215 	stw	ra,8(sp)
 400078c:	df000115 	stw	fp,4(sp)
 4000790:	df000104 	addi	fp,sp,4
 4000794:	2005883a 	mov	r2,r4
 4000798:	e0bfff0d 	sth	r2,-4(fp)
    // print if we aren't masked off
    if(!PRINT_STDIO_MASK)
 400079c:	d0a30317 	ldw	r2,-29684(gp)
 40007a0:	10000f1e 	bne	r2,zero,40007e0 <print_binary_count_stdio+0x5c>
    {
        // print the binary count
        alt_printf("0x%x ", binary_count);
 40007a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40007a8:	100b883a 	mov	r5,r2
 40007ac:	01010034 	movhi	r4,1024
 40007b0:	2114a604 	addi	r4,r4,21144
 40007b4:	4000bfc0 	call	4000bfc <alt_printf>

        // print a new line character after every 16 prints
        PRINT_STDIO_WRAP_COUNT++;
 40007b8:	d0a30217 	ldw	r2,-29688(gp)
 40007bc:	10800044 	addi	r2,r2,1
 40007c0:	d0a30215 	stw	r2,-29688(gp)
        if(PRINT_STDIO_WRAP_COUNT >= 16)
 40007c4:	d0a30217 	ldw	r2,-29688(gp)
 40007c8:	10800410 	cmplti	r2,r2,16
 40007cc:	1000041e 	bne	r2,zero,40007e0 <print_binary_count_stdio+0x5c>
        {
            alt_printf("\n");
 40007d0:	01010034 	movhi	r4,1024
 40007d4:	2114a804 	addi	r4,r4,21152
 40007d8:	4000bfc0 	call	4000bfc <alt_printf>
            PRINT_STDIO_WRAP_COUNT = 0;
 40007dc:	d0230215 	stw	zero,-29688(gp)
        }
    }
}
 40007e0:	0001883a 	nop
 40007e4:	e037883a 	mov	sp,fp
 40007e8:	dfc00117 	ldw	ra,4(sp)
 40007ec:	df000017 	ldw	fp,0(sp)
 40007f0:	dec00204 	addi	sp,sp,8
 40007f4:	f800283a 	ret

040007f8 <update_led>:

volatile alt_u8  LED_MASK = 0;

// convenience routine for updating the bank of leds
void update_led(alt_u8 display_value)
{
 40007f8:	defffe04 	addi	sp,sp,-8
 40007fc:	df000115 	stw	fp,4(sp)
 4000800:	df000104 	addi	fp,sp,4
 4000804:	2005883a 	mov	r2,r4
 4000808:	e0bfff05 	stb	r2,-4(fp)
            LED_STATE = display_value & 0xFF;
 400080c:	e0bfff03 	ldbu	r2,-4(fp)
 4000810:	d0a30405 	stb	r2,-29680(gp)
            LED_STATE &= ~LED_MASK;
 4000814:	d0a30443 	ldbu	r2,-29679(gp)
 4000818:	10803fcc 	andi	r2,r2,255
 400081c:	0084303a 	nor	r2,zero,r2
 4000820:	1007883a 	mov	r3,r2
 4000824:	d0a30403 	ldbu	r2,-29680(gp)
 4000828:	1884703a 	and	r2,r3,r2
 400082c:	d0a30405 	stb	r2,-29680(gp)
            IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, LED_STATE);
 4000830:	d0a30403 	ldbu	r2,-29680(gp)
 4000834:	10c03fcc 	andi	r3,r2,255
 4000838:	00820034 	movhi	r2,2048
 400083c:	10800804 	addi	r2,r2,32
 4000840:	10c00035 	stwio	r3,0(r2)
}
 4000844:	0001883a 	nop
 4000848:	e037883a 	mov	sp,fp
 400084c:	df000017 	ldw	fp,0(sp)
 4000850:	dec00104 	addi	sp,sp,4
 4000854:	f800283a 	ret

04000858 <__divsi3>:
 4000858:	20001b16 	blt	r4,zero,40008c8 <__divsi3+0x70>
 400085c:	000f883a 	mov	r7,zero
 4000860:	28001616 	blt	r5,zero,40008bc <__divsi3+0x64>
 4000864:	200d883a 	mov	r6,r4
 4000868:	29001a2e 	bgeu	r5,r4,40008d4 <__divsi3+0x7c>
 400086c:	00800804 	movi	r2,32
 4000870:	00c00044 	movi	r3,1
 4000874:	00000106 	br	400087c <__divsi3+0x24>
 4000878:	10000d26 	beq	r2,zero,40008b0 <__divsi3+0x58>
 400087c:	294b883a 	add	r5,r5,r5
 4000880:	10bfffc4 	addi	r2,r2,-1
 4000884:	18c7883a 	add	r3,r3,r3
 4000888:	293ffb36 	bltu	r5,r4,4000878 <__alt_data_end+0xfabf8878>
 400088c:	0005883a 	mov	r2,zero
 4000890:	18000726 	beq	r3,zero,40008b0 <__divsi3+0x58>
 4000894:	0005883a 	mov	r2,zero
 4000898:	31400236 	bltu	r6,r5,40008a4 <__divsi3+0x4c>
 400089c:	314dc83a 	sub	r6,r6,r5
 40008a0:	10c4b03a 	or	r2,r2,r3
 40008a4:	1806d07a 	srli	r3,r3,1
 40008a8:	280ad07a 	srli	r5,r5,1
 40008ac:	183ffa1e 	bne	r3,zero,4000898 <__alt_data_end+0xfabf8898>
 40008b0:	38000126 	beq	r7,zero,40008b8 <__divsi3+0x60>
 40008b4:	0085c83a 	sub	r2,zero,r2
 40008b8:	f800283a 	ret
 40008bc:	014bc83a 	sub	r5,zero,r5
 40008c0:	39c0005c 	xori	r7,r7,1
 40008c4:	003fe706 	br	4000864 <__alt_data_end+0xfabf8864>
 40008c8:	0109c83a 	sub	r4,zero,r4
 40008cc:	01c00044 	movi	r7,1
 40008d0:	003fe306 	br	4000860 <__alt_data_end+0xfabf8860>
 40008d4:	00c00044 	movi	r3,1
 40008d8:	003fee06 	br	4000894 <__alt_data_end+0xfabf8894>

040008dc <__modsi3>:
 40008dc:	20001716 	blt	r4,zero,400093c <__modsi3+0x60>
 40008e0:	000f883a 	mov	r7,zero
 40008e4:	2005883a 	mov	r2,r4
 40008e8:	28001216 	blt	r5,zero,4000934 <__modsi3+0x58>
 40008ec:	2900162e 	bgeu	r5,r4,4000948 <__modsi3+0x6c>
 40008f0:	01800804 	movi	r6,32
 40008f4:	00c00044 	movi	r3,1
 40008f8:	00000106 	br	4000900 <__modsi3+0x24>
 40008fc:	30000a26 	beq	r6,zero,4000928 <__modsi3+0x4c>
 4000900:	294b883a 	add	r5,r5,r5
 4000904:	31bfffc4 	addi	r6,r6,-1
 4000908:	18c7883a 	add	r3,r3,r3
 400090c:	293ffb36 	bltu	r5,r4,40008fc <__alt_data_end+0xfabf88fc>
 4000910:	18000526 	beq	r3,zero,4000928 <__modsi3+0x4c>
 4000914:	1806d07a 	srli	r3,r3,1
 4000918:	11400136 	bltu	r2,r5,4000920 <__modsi3+0x44>
 400091c:	1145c83a 	sub	r2,r2,r5
 4000920:	280ad07a 	srli	r5,r5,1
 4000924:	183ffb1e 	bne	r3,zero,4000914 <__alt_data_end+0xfabf8914>
 4000928:	38000126 	beq	r7,zero,4000930 <__modsi3+0x54>
 400092c:	0085c83a 	sub	r2,zero,r2
 4000930:	f800283a 	ret
 4000934:	014bc83a 	sub	r5,zero,r5
 4000938:	003fec06 	br	40008ec <__alt_data_end+0xfabf88ec>
 400093c:	0109c83a 	sub	r4,zero,r4
 4000940:	01c00044 	movi	r7,1
 4000944:	003fe706 	br	40008e4 <__alt_data_end+0xfabf88e4>
 4000948:	00c00044 	movi	r3,1
 400094c:	003ff106 	br	4000914 <__alt_data_end+0xfabf8914>

04000950 <__udivsi3>:
 4000950:	200d883a 	mov	r6,r4
 4000954:	2900152e 	bgeu	r5,r4,40009ac <__udivsi3+0x5c>
 4000958:	28001416 	blt	r5,zero,40009ac <__udivsi3+0x5c>
 400095c:	00800804 	movi	r2,32
 4000960:	00c00044 	movi	r3,1
 4000964:	00000206 	br	4000970 <__udivsi3+0x20>
 4000968:	10000e26 	beq	r2,zero,40009a4 <__udivsi3+0x54>
 400096c:	28000516 	blt	r5,zero,4000984 <__udivsi3+0x34>
 4000970:	294b883a 	add	r5,r5,r5
 4000974:	10bfffc4 	addi	r2,r2,-1
 4000978:	18c7883a 	add	r3,r3,r3
 400097c:	293ffa36 	bltu	r5,r4,4000968 <__alt_data_end+0xfabf8968>
 4000980:	18000826 	beq	r3,zero,40009a4 <__udivsi3+0x54>
 4000984:	0005883a 	mov	r2,zero
 4000988:	31400236 	bltu	r6,r5,4000994 <__udivsi3+0x44>
 400098c:	314dc83a 	sub	r6,r6,r5
 4000990:	10c4b03a 	or	r2,r2,r3
 4000994:	1806d07a 	srli	r3,r3,1
 4000998:	280ad07a 	srli	r5,r5,1
 400099c:	183ffa1e 	bne	r3,zero,4000988 <__alt_data_end+0xfabf8988>
 40009a0:	f800283a 	ret
 40009a4:	0005883a 	mov	r2,zero
 40009a8:	f800283a 	ret
 40009ac:	00c00044 	movi	r3,1
 40009b0:	003ff406 	br	4000984 <__alt_data_end+0xfabf8984>

040009b4 <__umodsi3>:
 40009b4:	2005883a 	mov	r2,r4
 40009b8:	2900122e 	bgeu	r5,r4,4000a04 <__umodsi3+0x50>
 40009bc:	28001116 	blt	r5,zero,4000a04 <__umodsi3+0x50>
 40009c0:	01800804 	movi	r6,32
 40009c4:	00c00044 	movi	r3,1
 40009c8:	00000206 	br	40009d4 <__umodsi3+0x20>
 40009cc:	30000c26 	beq	r6,zero,4000a00 <__umodsi3+0x4c>
 40009d0:	28000516 	blt	r5,zero,40009e8 <__umodsi3+0x34>
 40009d4:	294b883a 	add	r5,r5,r5
 40009d8:	31bfffc4 	addi	r6,r6,-1
 40009dc:	18c7883a 	add	r3,r3,r3
 40009e0:	293ffa36 	bltu	r5,r4,40009cc <__alt_data_end+0xfabf89cc>
 40009e4:	18000626 	beq	r3,zero,4000a00 <__umodsi3+0x4c>
 40009e8:	1806d07a 	srli	r3,r3,1
 40009ec:	11400136 	bltu	r2,r5,40009f4 <__umodsi3+0x40>
 40009f0:	1145c83a 	sub	r2,r2,r5
 40009f4:	280ad07a 	srli	r5,r5,1
 40009f8:	183ffb1e 	bne	r3,zero,40009e8 <__alt_data_end+0xfabf89e8>
 40009fc:	f800283a 	ret
 4000a00:	f800283a 	ret
 4000a04:	00c00044 	movi	r3,1
 4000a08:	003ff706 	br	40009e8 <__alt_data_end+0xfabf89e8>

04000a0c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 4000a0c:	d0a30917 	ldw	r2,-29660(gp)
 4000a10:	10001a26 	beq	r2,zero,4000a7c <alt_alarm_start+0x70>
  {
    if (alarm)
 4000a14:	20001b26 	beq	r4,zero,4000a84 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
 4000a18:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
 4000a1c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000a20:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000a24:	00bfff84 	movi	r2,-2
 4000a28:	1884703a 	and	r2,r3,r2
 4000a2c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4000a30:	d0a30817 	ldw	r2,-29664(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 4000a34:	11800044 	addi	r6,r2,1
 4000a38:	314b883a 	add	r5,r6,r5
 4000a3c:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4000a40:	28800b36 	bltu	r5,r2,4000a70 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
 4000a44:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4000a48:	d0a00104 	addi	r2,gp,-32764
 4000a4c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
 4000a50:	d0a00117 	ldw	r2,-32764(gp)
 4000a54:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 4000a58:	d0a00117 	ldw	r2,-32764(gp)
  list->next           = entry;
 4000a5c:	d1200115 	stw	r4,-32764(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 4000a60:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000a64:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
 4000a68:	0005883a 	mov	r2,zero
 4000a6c:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
 4000a70:	00800044 	movi	r2,1
 4000a74:	20800405 	stb	r2,16(r4)
 4000a78:	003ff306 	br	4000a48 <__alt_data_end+0xfabf8a48>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
 4000a7c:	00bfde84 	movi	r2,-134
 4000a80:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
 4000a84:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
 4000a88:	f800283a 	ret

04000a8c <alt_getchar>:
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
 4000a8c:	d0a01117 	ldw	r2,-32700(gp)
 4000a90:	11000117 	ldw	r4,4(r2)
 4000a94:	40025c81 	jmpi	40025c8 <getc>

04000a98 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000a98:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000a9c:	01810034 	movhi	r6,1024
 4000aa0:	01c10034 	movhi	r7,1024
 4000aa4:	dfc00015 	stw	ra,0(sp)
 4000aa8:	3194c104 	addi	r6,r6,21252
 4000aac:	39d7a504 	addi	r7,r7,24212
 4000ab0:	31c01026 	beq	r6,r7,4000af4 <alt_load+0x5c>
  {
    while( to != end )
 4000ab4:	00810034 	movhi	r2,1024
 4000ab8:	1097a504 	addi	r2,r2,24212
 4000abc:	30800d26 	beq	r6,r2,4000af4 <alt_load+0x5c>
 4000ac0:	30c00104 	addi	r3,r6,4
 4000ac4:	10c7c83a 	sub	r3,r2,r3
 4000ac8:	1806d0ba 	srli	r3,r3,2
 4000acc:	0005883a 	mov	r2,zero
 4000ad0:	18c00044 	addi	r3,r3,1
 4000ad4:	18c7883a 	add	r3,r3,r3
 4000ad8:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 4000adc:	11c9883a 	add	r4,r2,r7
 4000ae0:	21400017 	ldw	r5,0(r4)
 4000ae4:	1189883a 	add	r4,r2,r6
 4000ae8:	10800104 	addi	r2,r2,4
 4000aec:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000af0:	10fffa1e 	bne	r2,r3,4000adc <__alt_data_end+0xfabf8adc>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000af4:	01825034 	movhi	r6,2368
 4000af8:	01c10034 	movhi	r7,1024
 4000afc:	31900804 	addi	r6,r6,16416
 4000b00:	39c00004 	addi	r7,r7,0
 4000b04:	31c01026 	beq	r6,r7,4000b48 <alt_load+0xb0>
  {
    while( to != end )
 4000b08:	00825034 	movhi	r2,2368
 4000b0c:	10906304 	addi	r2,r2,16780
 4000b10:	30800d26 	beq	r6,r2,4000b48 <alt_load+0xb0>
 4000b14:	30c00104 	addi	r3,r6,4
 4000b18:	10c7c83a 	sub	r3,r2,r3
 4000b1c:	1806d0ba 	srli	r3,r3,2
 4000b20:	0005883a 	mov	r2,zero
 4000b24:	18c00044 	addi	r3,r3,1
 4000b28:	18c7883a 	add	r3,r3,r3
 4000b2c:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 4000b30:	11c9883a 	add	r4,r2,r7
 4000b34:	21400017 	ldw	r5,0(r4)
 4000b38:	1189883a 	add	r4,r2,r6
 4000b3c:	10800104 	addi	r2,r2,4
 4000b40:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000b44:	18bffa1e 	bne	r3,r2,4000b30 <__alt_data_end+0xfabf8b30>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000b48:	01810034 	movhi	r6,1024
 4000b4c:	01c10034 	movhi	r7,1024
 4000b50:	3193f404 	addi	r6,r6,20432
 4000b54:	39d3f404 	addi	r7,r7,20432
 4000b58:	31c01026 	beq	r6,r7,4000b9c <alt_load+0x104>
  {
    while( to != end )
 4000b5c:	00810034 	movhi	r2,1024
 4000b60:	1094c104 	addi	r2,r2,21252
 4000b64:	30800d26 	beq	r6,r2,4000b9c <alt_load+0x104>
 4000b68:	30c00104 	addi	r3,r6,4
 4000b6c:	10c7c83a 	sub	r3,r2,r3
 4000b70:	1806d0ba 	srli	r3,r3,2
 4000b74:	0005883a 	mov	r2,zero
 4000b78:	18c00044 	addi	r3,r3,1
 4000b7c:	18c7883a 	add	r3,r3,r3
 4000b80:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 4000b84:	11c9883a 	add	r4,r2,r7
 4000b88:	21400017 	ldw	r5,0(r4)
 4000b8c:	1189883a 	add	r4,r2,r6
 4000b90:	10800104 	addi	r2,r2,4
 4000b94:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000b98:	10fffa1e 	bne	r2,r3,4000b84 <__alt_data_end+0xfabf8b84>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4000b9c:	4001e6c0 	call	4001e6c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 4000ba0:	dfc00017 	ldw	ra,0(sp)
 4000ba4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 4000ba8:	4001fd41 	jmpi	4001fd4 <alt_icache_flush_all>

04000bac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000bac:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000bb0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000bb4:	dfc00115 	stw	ra,4(sp)
 4000bb8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000bbc:	4000eac0 	call	4000eac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000bc0:	4000ecc0 	call	4000ecc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4000bc4:	01810034 	movhi	r6,1024
 4000bc8:	3194a904 	addi	r6,r6,21156
 4000bcc:	300b883a 	mov	r5,r6
 4000bd0:	3009883a 	mov	r4,r6
 4000bd4:	40021480 	call	4002148 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000bd8:	d1a30517 	ldw	r6,-29676(gp)
 4000bdc:	d1630617 	ldw	r5,-29672(gp)
 4000be0:	d1230717 	ldw	r4,-29668(gp)
 4000be4:	40001b80 	call	40001b8 <main>
  close(STDOUT_FILENO);
 4000be8:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000bec:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
 4000bf0:	4001d700 	call	4001d70 <close>
  exit (result);
 4000bf4:	8009883a 	mov	r4,r16
 4000bf8:	40025200 	call	4002520 <exit>

04000bfc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 4000bfc:	defff304 	addi	sp,sp,-52
 4000c00:	dc000015 	stw	r16,0(sp)
 4000c04:	2021883a 	mov	r16,r4
 4000c08:	dfc00915 	stw	ra,36(sp)
 4000c0c:	df000815 	stw	fp,32(sp)
 4000c10:	ddc00715 	stw	r23,28(sp)
 4000c14:	dd800615 	stw	r22,24(sp)
 4000c18:	dd400515 	stw	r21,20(sp)
 4000c1c:	dd000415 	stw	r20,16(sp)
 4000c20:	dcc00315 	stw	r19,12(sp)
 4000c24:	dc800215 	stw	r18,8(sp)
 4000c28:	dc400115 	stw	r17,4(sp)
 4000c2c:	d9400a15 	stw	r5,40(sp)
 4000c30:	d9800b15 	stw	r6,44(sp)
 4000c34:	d9c00c15 	stw	r7,48(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4000c38:	04400944 	movi	r17,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
 4000c3c:	dcc00a04 	addi	r19,sp,40
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 4000c40:	054018c4 	movi	r21,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 4000c44:	05801e04 	movi	r22,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4000c48:	048003c4 	movi	r18,15
                        if (digit <= 9)
 4000c4c:	05000244 	movi	r20,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4000c50:	81000007 	ldb	r4,0(r16)
 4000c54:	20000526 	beq	r4,zero,4000c6c <alt_printf+0x70>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4000c58:	24401026 	beq	r4,r17,4000c9c <alt_printf+0xa0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4000c5c:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
 4000c60:	4000d780 	call	4000d78 <alt_putchar>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4000c64:	81000007 	ldb	r4,0(r16)
 4000c68:	203ffb1e 	bne	r4,zero,4000c58 <__alt_data_end+0xfabf8c58>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4000c6c:	dfc00917 	ldw	ra,36(sp)
 4000c70:	df000817 	ldw	fp,32(sp)
 4000c74:	ddc00717 	ldw	r23,28(sp)
 4000c78:	dd800617 	ldw	r22,24(sp)
 4000c7c:	dd400517 	ldw	r21,20(sp)
 4000c80:	dd000417 	ldw	r20,16(sp)
 4000c84:	dcc00317 	ldw	r19,12(sp)
 4000c88:	dc800217 	ldw	r18,8(sp)
 4000c8c:	dc400117 	ldw	r17,4(sp)
 4000c90:	dc000017 	ldw	r16,0(sp)
 4000c94:	dec00d04 	addi	sp,sp,52
 4000c98:	f800283a 	ret
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 4000c9c:	80800047 	ldb	r2,1(r16)
 4000ca0:	84000084 	addi	r16,r16,2
 4000ca4:	103ff126 	beq	r2,zero,4000c6c <__alt_data_end+0xfabf8c6c>
            {
                if (c == '%')
 4000ca8:	14402926 	beq	r2,r17,4000d50 <alt_printf+0x154>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 4000cac:	15402b26 	beq	r2,r21,4000d5c <alt_printf+0x160>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 4000cb0:	15800b26 	beq	r2,r22,4000ce0 <alt_printf+0xe4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 4000cb4:	00c01cc4 	movi	r3,115
 4000cb8:	10ffe51e 	bne	r2,r3,4000c50 <__alt_data_end+0xfabf8c50>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 4000cbc:	9f000017 	ldw	fp,0(r19)
 4000cc0:	9cc00104 	addi	r19,r19,4

                    while(*s)
 4000cc4:	e1000007 	ldb	r4,0(fp)
 4000cc8:	203fe126 	beq	r4,zero,4000c50 <__alt_data_end+0xfabf8c50>
                      alt_putchar(*s++);
 4000ccc:	e7000044 	addi	fp,fp,1
 4000cd0:	4000d780 	call	4000d78 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 4000cd4:	e1000007 	ldb	r4,0(fp)
 4000cd8:	203ffc1e 	bne	r4,zero,4000ccc <__alt_data_end+0xfabf8ccc>
 4000cdc:	003fdc06 	br	4000c50 <__alt_data_end+0xfabf8c50>
                    alt_putchar(v);
                }
                else if (c == 'x')
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 4000ce0:	9dc00017 	ldw	r23,0(r19)
 4000ce4:	9cc00104 	addi	r19,r19,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4000ce8:	b8002026 	beq	r23,zero,4000d6c <alt_printf+0x170>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4000cec:	b8bc002c 	andhi	r2,r23,61440
 4000cf0:	07000704 	movi	fp,28
 4000cf4:	1000101e 	bne	r2,zero,4000d38 <alt_printf+0x13c>
                        digit_shift -= 4;
 4000cf8:	e73fff04 	addi	fp,fp,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4000cfc:	9704983a 	sll	r2,r18,fp
 4000d00:	15c4703a 	and	r2,r2,r23
 4000d04:	103ffc26 	beq	r2,zero,4000cf8 <__alt_data_end+0xfabf8cf8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4000d08:	e03fd116 	blt	fp,zero,4000c50 <__alt_data_end+0xfabf8c50>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4000d0c:	9708983a 	sll	r4,r18,fp
 4000d10:	25c8703a 	and	r4,r4,r23
 4000d14:	2708d83a 	srl	r4,r4,fp
                        if (digit <= 9)
 4000d18:	a1000b36 	bltu	r20,r4,4000d48 <alt_printf+0x14c>
                            c = '0' + digit;
 4000d1c:	21000c04 	addi	r4,r4,48
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
 4000d20:	21003fcc 	andi	r4,r4,255
 4000d24:	2100201c 	xori	r4,r4,128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4000d28:	e73fff04 	addi	fp,fp,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
 4000d2c:	213fe004 	addi	r4,r4,-128
 4000d30:	4000d780 	call	4000d78 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4000d34:	e03fc616 	blt	fp,zero,4000c50 <__alt_data_end+0xfabf8c50>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4000d38:	9708983a 	sll	r4,r18,fp
 4000d3c:	25c8703a 	and	r4,r4,r23
 4000d40:	2708d83a 	srl	r4,r4,fp
                        if (digit <= 9)
 4000d44:	a13ff52e 	bgeu	r20,r4,4000d1c <__alt_data_end+0xfabf8d1c>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
 4000d48:	210015c4 	addi	r4,r4,87
 4000d4c:	003ff406 	br	4000d20 <__alt_data_end+0xfabf8d20>
            if ((c = *w++) != 0)
            {
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4000d50:	8809883a 	mov	r4,r17
 4000d54:	4000d780 	call	4000d78 <alt_putchar>
 4000d58:	003fbd06 	br	4000c50 <__alt_data_end+0xfabf8c50>
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 4000d5c:	99000017 	ldw	r4,0(r19)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 4000d60:	9cc00104 	addi	r19,r19,4
                    alt_putchar(v);
 4000d64:	4000d780 	call	4000d78 <alt_putchar>
 4000d68:	003fb906 	br	4000c50 <__alt_data_end+0xfabf8c50>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
 4000d6c:	01000c04 	movi	r4,48
 4000d70:	4000d780 	call	4000d78 <alt_putchar>
                        continue;
 4000d74:	003fb606 	br	4000c50 <__alt_data_end+0xfabf8c50>

04000d78 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 4000d78:	d0a01117 	ldw	r2,-32700(gp)
 4000d7c:	11400217 	ldw	r5,8(r2)
 4000d80:	40028b41 	jmpi	40028b4 <putc>

04000d84 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000d84:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000d88:	00bfff84 	movi	r2,-2
 4000d8c:	1884703a 	and	r2,r3,r2
 4000d90:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4000d94:	21400117 	ldw	r5,4(r4)
 4000d98:	20800017 	ldw	r2,0(r4)
 4000d9c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
 4000da0:	21400117 	ldw	r5,4(r4)
 4000da4:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4000da8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
 4000dac:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000db0:	1801703a 	wrctl	status,r3
 4000db4:	f800283a 	ret

04000db8 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4000db8:	d0a30817 	ldw	r2,-29664(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4000dbc:	defffa04 	addi	sp,sp,-24
 4000dc0:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4000dc4:	d4200117 	ldw	r16,-32764(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4000dc8:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4000dcc:	dc800215 	stw	r18,8(sp)
 4000dd0:	dfc00515 	stw	ra,20(sp)
 4000dd4:	dd000415 	stw	r20,16(sp)
 4000dd8:	dcc00315 	stw	r19,12(sp)
 4000ddc:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4000de0:	d4a00104 	addi	r18,gp,-32764

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4000de4:	d0a30815 	stw	r2,-29664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4000de8:	84801126 	beq	r16,r18,4000e30 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
 4000dec:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000df0:	053fff84 	movi	r20,-2
 4000df4:	00000606 	br	4000e10 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
 4000df8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4000dfc:	d0e30817 	ldw	r3,-29664(gp)
 4000e00:	80800217 	ldw	r2,8(r16)
 4000e04:	1880122e 	bgeu	r3,r2,4000e50 <alt_tick+0x98>
 4000e08:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4000e0c:	8c800826 	beq	r17,r18,4000e30 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4000e10:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 4000e14:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4000e18:	103ff826 	beq	r2,zero,4000dfc <__alt_data_end+0xfabf8dfc>
 4000e1c:	d0a30817 	ldw	r2,-29664(gp)
 4000e20:	103ff526 	beq	r2,zero,4000df8 <__alt_data_end+0xfabf8df8>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4000e24:	d0a30817 	ldw	r2,-29664(gp)
 4000e28:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4000e2c:	8cbff81e 	bne	r17,r18,4000e10 <__alt_data_end+0xfabf8e10>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4000e30:	dfc00517 	ldw	ra,20(sp)
 4000e34:	dd000417 	ldw	r20,16(sp)
 4000e38:	dcc00317 	ldw	r19,12(sp)
 4000e3c:	dc800217 	ldw	r18,8(sp)
 4000e40:	dc400117 	ldw	r17,4(sp)
 4000e44:	dc000017 	ldw	r16,0(sp)
 4000e48:	dec00604 	addi	sp,sp,24
 4000e4c:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
 4000e50:	80800317 	ldw	r2,12(r16)
 4000e54:	81000517 	ldw	r4,20(r16)
 4000e58:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4000e5c:	10000726 	beq	r2,zero,4000e7c <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 4000e60:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4000e64:	d1230817 	ldw	r4,-29664(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 4000e68:	10c5883a 	add	r2,r2,r3
 4000e6c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4000e70:	113fe52e 	bgeu	r2,r4,4000e08 <__alt_data_end+0xfabf8e08>
        {
          alarm->rollover = 1;
 4000e74:	84c00405 	stb	r19,16(r16)
 4000e78:	003fe306 	br	4000e08 <__alt_data_end+0xfabf8e08>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000e7c:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000e80:	1506703a 	and	r3,r2,r20
 4000e84:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4000e88:	81000117 	ldw	r4,4(r16)
 4000e8c:	80c00017 	ldw	r3,0(r16)
 4000e90:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
 4000e94:	81000117 	ldw	r4,4(r16)
 4000e98:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4000e9c:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
 4000ea0:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000ea4:	1001703a 	wrctl	status,r2
 4000ea8:	003fd706 	br	4000e08 <__alt_data_end+0xfabf8e08>

04000eac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000eac:	deffff04 	addi	sp,sp,-4
 4000eb0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4000eb4:	40023580 	call	4002358 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000eb8:	00800044 	movi	r2,1
 4000ebc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000ec0:	dfc00017 	ldw	ra,0(sp)
 4000ec4:	dec00104 	addi	sp,sp,4
 4000ec8:	f800283a 	ret

04000ecc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000ecc:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4000ed0:	01c0fa04 	movi	r7,1000
 4000ed4:	01800084 	movi	r6,2
 4000ed8:	000b883a 	mov	r5,zero
 4000edc:	01020034 	movhi	r4,2048
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000ee0:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4000ee4:	40010240 	call	4001024 <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4000ee8:	01010034 	movhi	r4,1024
 4000eec:	21151004 	addi	r4,r4,21568
 4000ef0:	d1600804 	addi	r5,gp,-32736
 4000ef4:	4001e8c0 	call	4001e8c <alt_dev_llist_insert>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
 4000ef8:	01010034 	movhi	r4,1024
 4000efc:	21150104 	addi	r4,r4,21508
 4000f00:	01800044 	movi	r6,1
 4000f04:	000b883a 	mov	r5,zero
 4000f08:	40011080 	call	4001108 <altera_modular_adc_init>
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
 4000f0c:	01010034 	movhi	r4,1024
 4000f10:	2114c104 	addi	r4,r4,21252
}
 4000f14:	dfc00017 	ldw	ra,0(sp)
 4000f18:	dec00104 	addi	sp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
 4000f1c:	40019381 	jmpi	4001938 <altera_onchip_flash_init>

04000f20 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4000f20:	20800017 	ldw	r2,0(r4)
 4000f24:	21c00217 	ldw	r7,8(r4)
 4000f28:	11000a04 	addi	r4,r2,40
 4000f2c:	4000f401 	jmpi	4000f40 <altera_avalon_jtag_uart_read>

04000f30 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000f30:	20800017 	ldw	r2,0(r4)
 4000f34:	21c00217 	ldw	r7,8(r4)
 4000f38:	11000a04 	addi	r4,r2,40
 4000f3c:	4000fb41 	jmpi	4000fb4 <altera_avalon_jtag_uart_write>

04000f40 <altera_avalon_jtag_uart_read>:
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;
 4000f40:	298d883a 	add	r6,r5,r6

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 4000f44:	22400017 	ldw	r9,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4000f48:	2980162e 	bgeu	r5,r6,4000fa4 <altera_avalon_jtag_uart_read+0x64>
 4000f4c:	2807883a 	mov	r3,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 4000f50:	3a90000c 	andi	r10,r7,16384
 4000f54:	00000306 	br	4000f64 <altera_avalon_jtag_uart_read+0x24>
  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000f58:	19000005 	stb	r4,0(r3)
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4000f5c:	1180092e 	bgeu	r2,r6,4000f84 <altera_avalon_jtag_uart_read+0x44>
 4000f60:	1007883a 	mov	r3,r2
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4000f64:	49000037 	ldwio	r4,0(r9)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4000f68:	2220000c 	andi	r8,r4,32768
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000f6c:	18800044 	addi	r2,r3,1

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4000f70:	403ff91e 	bne	r8,zero,4000f58 <__alt_data_end+0xfabf8f58>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
 4000f74:	28c0061e 	bne	r5,r3,4000f90 <altera_avalon_jtag_uart_read+0x50>
      break;
    else if(flags & O_NONBLOCK)
 4000f78:	5000081e 	bne	r10,zero,4000f9c <altera_avalon_jtag_uart_read+0x5c>
 4000f7c:	2805883a 	mov	r2,r5
 4000f80:	003ff706 	br	4000f60 <__alt_data_end+0xfabf8f60>
      break;   
    
  }

  if (ptr != buffer)
 4000f84:	28800726 	beq	r5,r2,4000fa4 <altera_avalon_jtag_uart_read+0x64>
    return ptr - buffer;
 4000f88:	1145c83a 	sub	r2,r2,r5
 4000f8c:	f800283a 	ret
 4000f90:	1805883a 	mov	r2,r3
 4000f94:	1145c83a 	sub	r2,r2,r5
 4000f98:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 4000f9c:	00bffd44 	movi	r2,-11
 4000fa0:	f800283a 	ret
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 4000fa4:	39d0000c 	andi	r7,r7,16384
 4000fa8:	383ffc1e 	bne	r7,zero,4000f9c <__alt_data_end+0xfabf8f9c>
    return -EWOULDBLOCK;
  else
    return -EIO;
 4000fac:	00bffec4 	movi	r2,-5
}
 4000fb0:	f800283a 	ret

04000fb4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4000fb4:	21c00017 	ldw	r7,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000fb8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 4000fbc:	298d883a 	add	r6,r5,r6
 4000fc0:	39000104 	addi	r4,r7,4

  while (ptr < end)
 4000fc4:	2980072e 	bgeu	r5,r6,4000fe4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4000fc8:	20c00037 	ldwio	r3,0(r4)
 4000fcc:	18ffffec 	andhi	r3,r3,65535
 4000fd0:	183ffd26 	beq	r3,zero,4000fc8 <__alt_data_end+0xfabf8fc8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4000fd4:	28c00007 	ldb	r3,0(r5)
 4000fd8:	38c00035 	stwio	r3,0(r7)
 4000fdc:	29400044 	addi	r5,r5,1
 4000fe0:	003ff806 	br	4000fc4 <__alt_data_end+0xfabf8fc4>

  return count;
}
 4000fe4:	f800283a 	ret

04000fe8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4000fe8:	defffe04 	addi	sp,sp,-8
 4000fec:	dfc00115 	stw	ra,4(sp)
 4000ff0:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4000ff4:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4000ff8:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000ffc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001000:	00bfff84 	movi	r2,-2
 4001004:	8084703a 	and	r2,r16,r2
 4001008:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 400100c:	4000db80 	call	4000db8 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001010:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 4001014:	dfc00117 	ldw	ra,4(sp)
 4001018:	dc000017 	ldw	r16,0(sp)
 400101c:	dec00204 	addi	sp,sp,8
 4001020:	f800283a 	ret

04001024 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4001024:	d0e30917 	ldw	r3,-29660(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4001028:	defffe04 	addi	sp,sp,-8
 400102c:	dfc00115 	stw	ra,4(sp)
 4001030:	2005883a 	mov	r2,r4
 4001034:	2809883a 	mov	r4,r5
 4001038:	300b883a 	mov	r5,r6
 400103c:	1800011e 	bne	r3,zero,4001044 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
 4001040:	d1e30915 	stw	r7,-29660(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4001044:	00c001c4 	movi	r3,7
 4001048:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 400104c:	01810034 	movhi	r6,1024
 4001050:	3183fa04 	addi	r6,r6,4072
 4001054:	d8000015 	stw	zero,0(sp)
 4001058:	100f883a 	mov	r7,r2
 400105c:	4001fe00 	call	4001fe0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4001060:	dfc00117 	ldw	ra,4(sp)
 4001064:	dec00204 	addi	sp,sp,8
 4001068:	f800283a 	ret

0400106c <alt_adc_irq>:
static void alt_adc_irq(void *context)
{
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
    alt_irq_context cpu_sr = 0;

	if(NULL != dev)
 400106c:	20001726 	beq	r4,zero,40010cc <alt_adc_irq+0x60>
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
 4001070:	defffd04 	addi	sp,sp,-12
 4001074:	dc000015 	stw	r16,0(sp)
 4001078:	2021883a 	mov	r16,r4
 400107c:	dfc00215 	stw	ra,8(sp)
 4001080:	dc400115 	stw	r17,4(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001084:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001088:	00bfff84 	movi	r2,-2
 400108c:	8884703a 	and	r2,r17,r2
 4001090:	1001703a 	wrctl	status,r2
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
 4001094:	20800a17 	ldw	r2,40(r4)
 4001098:	10000226 	beq	r2,zero,40010a4 <alt_adc_irq+0x38>
		{
			dev->callback (dev->callback_context);
 400109c:	21000b17 	ldw	r4,44(r4)
 40010a0:	103ee83a 	callr	r2
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 40010a4:	80800c17 	ldw	r2,48(r16)
 40010a8:	10804104 	addi	r2,r2,260
 40010ac:	10c00037 	ldwio	r3,0(r2)
 40010b0:	18c00054 	ori	r3,r3,1
 40010b4:	10c00035 	stwio	r3,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40010b8:	8801703a 	wrctl	status,r17
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
}
 40010bc:	dfc00217 	ldw	ra,8(sp)
 40010c0:	dc400117 	ldw	r17,4(sp)
 40010c4:	dc000017 	ldw	r16,0(sp)
 40010c8:	dec00304 	addi	sp,sp,12
 40010cc:	f800283a 	ret

040010d0 <alt_adc_word_read>:
    alt_u32 word_length = len;
    alt_u32* dest_buf = dest_ptr;
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
 40010d0:	28000b26 	beq	r5,zero,4001100 <alt_adc_word_read+0x30>
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 40010d4:	30000826 	beq	r6,zero,40010f8 <alt_adc_word_read+0x28>
 40010d8:	0005883a 	mov	r2,zero
 40010dc:	2149c83a 	sub	r4,r4,r5
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
 40010e0:	2907883a 	add	r3,r5,r4
 40010e4:	18c00037 	ldwio	r3,0(r3)
 40010e8:	28c00015 	stw	r3,0(r5)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 40010ec:	10800044 	addi	r2,r2,1
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
 40010f0:	29400104 	addi	r5,r5,4
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 40010f4:	30bffa1e 	bne	r6,r2,40010e0 <__alt_data_end+0xfabf90e0>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
 40010f8:	0005883a 	mov	r2,zero
 40010fc:	f800283a 	ret
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
    {
    	return -EINVAL;
 4001100:	00bffa84 	movi	r2,-22
       dest_buf++;
    }

    return 0;

}
 4001104:	f800283a 	ret

04001108 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 4001108:	defffb04 	addi	sp,sp,-20
 400110c:	dc000115 	stw	r16,4(sp)
 4001110:	2821883a 	mov	r16,r5
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 4001114:	d1600304 	addi	r5,gp,-32756

}


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 4001118:	dc800315 	stw	r18,12(sp)
 400111c:	dc400215 	stw	r17,8(sp)
 4001120:	dfc00415 	stw	ra,16(sp)
 4001124:	2025883a 	mov	r18,r4
 4001128:	3023883a 	mov	r17,r6
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 400112c:	4001e8c0 	call	4001e8c <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
 4001130:	80000816 	blt	r16,zero,4001154 <altera_modular_adc_init+0x4c>
 4001134:	88000716 	blt	r17,zero,4001154 <altera_modular_adc_init+0x4c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
 4001138:	01810034 	movhi	r6,1024
 400113c:	31841b04 	addi	r6,r6,4204
 4001140:	d8000015 	stw	zero,0(sp)
 4001144:	900f883a 	mov	r7,r18
 4001148:	880b883a 	mov	r5,r17
 400114c:	8009883a 	mov	r4,r16
 4001150:	4001fe00 	call	4001fe0 <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
 4001154:	dfc00417 	ldw	ra,16(sp)
 4001158:	dc800317 	ldw	r18,12(sp)
 400115c:	dc400217 	ldw	r17,8(sp)
 4001160:	dc000117 	ldw	r16,4(sp)
 4001164:	dec00504 	addi	sp,sp,20
 4001168:	f800283a 	ret

0400116c <alt_adc_register_callback>:
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
    dev->callback         = callback;
 400116c:	21400a15 	stw	r5,40(r4)
    dev->callback_context = context;
 4001170:	21800b15 	stw	r6,44(r4)
    dev->sample_store_base = sample_store_base;
 4001174:	21c00c15 	stw	r7,48(r4)
	
	if(NULL != callback)
 4001178:	28000926 	beq	r5,zero,40011a0 <alt_adc_register_callback+0x34>
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 400117c:	38c04104 	addi	r3,r7,260
 4001180:	18800037 	ldwio	r2,0(r3)
 4001184:	10800054 	ori	r2,r2,1
 4001188:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
}

void adc_interrupt_enable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 400118c:	39c04004 	addi	r7,r7,256
 4001190:	38800037 	ldwio	r2,0(r7)
 4001194:	10800054 	ori	r2,r2,1
 4001198:	38800035 	stwio	r2,0(r7)
 400119c:	f800283a 	ret
}

void adc_interrupt_disable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 40011a0:	38c04004 	addi	r3,r7,256
 40011a4:	19000037 	ldwio	r4,0(r3)
 40011a8:	00bfff84 	movi	r2,-2
 40011ac:	2084703a 	and	r2,r4,r2
 40011b0:	18800035 	stwio	r2,0(r3)
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 40011b4:	39c04104 	addi	r7,r7,260
 40011b8:	38800037 	ldwio	r2,0(r7)
 40011bc:	10800054 	ori	r2,r2,1
 40011c0:	38800035 	stwio	r2,0(r7)
 40011c4:	f800283a 	ret

040011c8 <altera_modular_adc_open>:
alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
    alt_modular_adc_dev *dev = NULL;

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
 40011c8:	d1600304 	addi	r5,gp,-32756
 40011cc:	4001ef81 	jmpi	4001ef8 <alt_find_dev>

040011d0 <adc_stop>:
    return dev;
}

void adc_stop(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 40011d0:	20c00037 	ldwio	r3,0(r4)
 40011d4:	00bfff84 	movi	r2,-2
 40011d8:	1884703a 	and	r2,r3,r2
 40011dc:	20800035 	stwio	r2,0(r4)
 40011e0:	20800037 	ldwio	r2,0(r4)
 40011e4:	1080004c 	andi	r2,r2,1
 40011e8:	103ffd1e 	bne	r2,zero,40011e0 <__alt_data_end+0xfabf91e0>
}
 40011ec:	f800283a 	ret

040011f0 <adc_start>:

void adc_start(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 40011f0:	20800037 	ldwio	r2,0(r4)
 40011f4:	10800054 	ori	r2,r2,1
 40011f8:	20800035 	stwio	r2,0(r4)
 40011fc:	f800283a 	ret

04001200 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
 4001200:	20c00037 	ldwio	r3,0(r4)
 4001204:	00bffc44 	movi	r2,-15
 4001208:	1884703a 	and	r2,r3,r2
 400120c:	10800094 	ori	r2,r2,2
 4001210:	20800035 	stwio	r2,0(r4)
 4001214:	f800283a 	ret

04001218 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
 4001218:	20c00037 	ldwio	r3,0(r4)
 400121c:	00bffc44 	movi	r2,-15
 4001220:	1884703a 	and	r2,r3,r2
 4001224:	20800035 	stwio	r2,0(r4)
 4001228:	f800283a 	ret

0400122c <adc_recalibrate>:
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
 400122c:	20c00037 	ldwio	r3,0(r4)
    return dev;
}

void adc_stop(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 4001230:	21400037 	ldwio	r5,0(r4)
 4001234:	00bfff84 	movi	r2,-2
 4001238:	2884703a 	and	r2,r5,r2
 400123c:	20800035 	stwio	r2,0(r4)
 4001240:	20800037 	ldwio	r2,0(r4)
 4001244:	1080004c 	andi	r2,r2,1
 4001248:	103ffd1e 	bne	r2,zero,4001240 <__alt_data_end+0xfabf9240>
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
 400124c:	20800037 	ldwio	r2,0(r4)
 4001250:	10800394 	ori	r2,r2,14
 4001254:	20800035 	stwio	r2,0(r4)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
}

void adc_start(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 4001258:	20800037 	ldwio	r2,0(r4)
 400125c:	10800054 	ori	r2,r2,1
 4001260:	20800035 	stwio	r2,0(r4)
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 4001264:	20800037 	ldwio	r2,0(r4)
 4001268:	1080004c 	andi	r2,r2,1
 400126c:	103ffd1e 	bne	r2,zero,4001264 <__alt_data_end+0xfabf9264>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
 4001270:	20c00035 	stwio	r3,0(r4)
 4001274:	f800283a 	ret

04001278 <adc_interrupt_enable>:
}

void adc_interrupt_enable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 4001278:	21004004 	addi	r4,r4,256
 400127c:	20800037 	ldwio	r2,0(r4)
 4001280:	10800054 	ori	r2,r2,1
 4001284:	20800035 	stwio	r2,0(r4)
 4001288:	f800283a 	ret

0400128c <adc_interrupt_disable>:
}

void adc_interrupt_disable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 400128c:	21004004 	addi	r4,r4,256
 4001290:	20c00037 	ldwio	r3,0(r4)
 4001294:	00bfff84 	movi	r2,-2
 4001298:	1884703a 	and	r2,r3,r2
 400129c:	20800035 	stwio	r2,0(r4)
 40012a0:	f800283a 	ret

040012a4 <adc_clear_interrupt_status>:
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 40012a4:	21004104 	addi	r4,r4,260
 40012a8:	20800037 	ldwio	r2,0(r4)
 40012ac:	10800054 	ori	r2,r2,1
 40012b0:	20800035 	stwio	r2,0(r4)
 40012b4:	f800283a 	ret

040012b8 <adc_interrupt_asserted>:
}

int adc_interrupt_asserted(int sample_store_base)
{
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
 40012b8:	20804137 	ldwio	r2,260(r4)
 40012bc:	1080004c 	andi	r2,r2,1
}
 40012c0:	0085c83a 	sub	r2,zero,r2
 40012c4:	f800283a 	ret

040012c8 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
 40012c8:	21004104 	addi	r4,r4,260
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
 40012cc:	20800037 	ldwio	r2,0(r4)
 40012d0:	1080004c 	andi	r2,r2,1
 40012d4:	103ffd26 	beq	r2,zero,40012cc <__alt_data_end+0xfabf92cc>
}
 40012d8:	f800283a 	ret

040012dc <alt_onchip_flash_read>:
{
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
 40012dc:	20c00b17 	ldw	r3,44(r4)
 40012e0:	28c0160e 	bge	r5,r3,400133c <alt_onchip_flash_read+0x60>
 40012e4:	2005883a 	mov	r2,r4
 40012e8:	29c9883a 	add	r4,r5,r7
 40012ec:	19001316 	blt	r3,r4,400133c <alt_onchip_flash_read+0x60>
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
 40012f0:	defffe04 	addi	sp,sp,-8
 40012f4:	dc000015 	stw	r16,0(sp)
 40012f8:	1021883a 	mov	r16,r2
    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
 40012fc:	10800a17 	ldw	r2,40(r2)
 4001300:	3009883a 	mov	r4,r6
 4001304:	380d883a 	mov	r6,r7
 4001308:	114b883a 	add	r5,r2,r5
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
 400130c:	dfc00115 	stw	ra,4(sp)
    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
 4001310:	40026cc0 	call	40026cc <memcpy>

    if (NULL != flash->csr_base) {
 4001314:	80802f17 	ldw	r2,188(r16)
 4001318:	10000326 	beq	r2,zero,4001328 <alt_onchip_flash_read+0x4c>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
 400131c:	10800037 	ldwio	r2,0(r2)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
 4001320:	1080010c 	andi	r2,r2,4
 4001324:	10000726 	beq	r2,zero,4001344 <alt_onchip_flash_read+0x68>
    int           offset,
    void          *dest_addr,
    int           length
)
{
    int ret_code = 0;
 4001328:	0005883a 	mov	r2,zero
            /* Read failed.  Return error.*/
            ret_code = -EIO;
        }
    }
    return ret_code;
}
 400132c:	dfc00117 	ldw	ra,4(sp)
 4001330:	dc000017 	ldw	r16,0(sp)
 4001334:	dec00204 	addi	sp,sp,8
 4001338:	f800283a 	ret
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
 400133c:	00bffc84 	movi	r2,-14
 4001340:	f800283a 	ret

    if (NULL != flash->csr_base) {
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
            /* Read failed.  Return error.*/
            ret_code = -EIO;
 4001344:	00bffec4 	movi	r2,-5
 4001348:	003ff806 	br	400132c <__alt_data_end+0xfabf932c>

0400134c <alt_onchip_flash_get_info>:
{
    int ret_code = 0;

    alt_flash_dev* flash = (alt_flash_dev*)fd;

    if (NULL != number_of_regions)
 400134c:	30000226 	beq	r6,zero,4001358 <alt_onchip_flash_get_info+0xc>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
 4001350:	20800c17 	ldw	r2,48(r4)
 4001354:	30800015 	stw	r2,0(r6)
    }

    if (!flash->number_of_regions)
 4001358:	20800c17 	ldw	r2,48(r4)
 400135c:	10000926 	beq	r2,zero,4001384 <alt_onchip_flash_get_info+0x38>
    {
        ret_code = -ENOMEM;
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 4001360:	00c00204 	movi	r3,8
 4001364:	18800916 	blt	r3,r2,400138c <alt_onchip_flash_get_info+0x40>
    {
        ret_code = -EFAULT;
    }
    else
    {
        if (NULL != info)
 4001368:	28000426 	beq	r5,zero,400137c <alt_onchip_flash_get_info+0x30>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
 400136c:	21000d04 	addi	r4,r4,52
 4001370:	29000015 	stw	r4,0(r5)
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
    int ret_code = 0;
 4001374:	0005883a 	mov	r2,zero
 4001378:	f800283a 	ret
 400137c:	0005883a 	mov	r2,zero
            *info = &flash->region_info[0];
        }
    }

    return ret_code;
}
 4001380:	f800283a 	ret
        *number_of_regions = flash->number_of_regions;
    }

    if (!flash->number_of_regions)
    {
        ret_code = -ENOMEM;
 4001384:	00bffd04 	movi	r2,-12
 4001388:	f800283a 	ret
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    {
        ret_code = -EFAULT;
 400138c:	00bffc84 	movi	r2,-14
 4001390:	f800283a 	ret

04001394 <alt_onchip_flash_erase_block>:
    int ret_code = 0;
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
 4001394:	20800b17 	ldw	r2,44(r4)
 4001398:	2880580e 	bge	r5,r2,40014fc <alt_onchip_flash_erase_block+0x168>
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
 400139c:	20c02f17 	ldw	r3,188(r4)
 40013a0:	18005426 	beq	r3,zero,40014f4 <alt_onchip_flash_erase_block+0x160>
 40013a4:	20802e17 	ldw	r2,184(r4)
 40013a8:	1000521e 	bne	r2,zero,40014f4 <alt_onchip_flash_erase_block+0x160>
        return -ENODEV;
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
 40013ac:	20803f17 	ldw	r2,252(r4)
 40013b0:	10bfffc4 	addi	r2,r2,-1
 40013b4:	1144703a 	and	r2,r2,r5
 40013b8:	1000521e 	bne	r2,zero,4001504 <alt_onchip_flash_erase_block+0x170>
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
 40013bc:	defffc04 	addi	sp,sp,-16
 40013c0:	dc000015 	stw	r16,0(sp)
 40013c4:	040002f4 	movhi	r16,11
 40013c8:	dc800215 	stw	r18,8(sp)
 40013cc:	dc400115 	stw	r17,4(sp)
 40013d0:	dfc00315 	stw	ra,12(sp)
 40013d4:	2825883a 	mov	r18,r5
 40013d8:	2023883a 	mov	r17,r4
 40013dc:	842b9804 	addi	r16,r16,-20896
 40013e0:	00000306 	br	40013f0 <alt_onchip_flash_erase_block+0x5c>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 40013e4:	4001cf80 	call	4001cf8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 40013e8:	80003a26 	beq	r16,zero,40014d4 <alt_onchip_flash_erase_block+0x140>
 40013ec:	88c02f17 	ldw	r3,188(r17)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 40013f0:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 40013f4:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 40013f8:	108000cc 	andi	r2,r2,3
 40013fc:	843fffc4 	addi	r16,r16,-1
 4001400:	103ff81e 	bne	r2,zero,40013e4 <__alt_data_end+0xfabf93e4>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 4001404:	18c00104 	addi	r3,r3,4
 4001408:	18800037 	ldwio	r2,0(r3)
 400140c:	113c002c 	andhi	r4,r2,61440
 4001410:	00802034 	movhi	r2,128
 4001414:	10bfffc4 	addi	r2,r2,-1
 4001418:	2084b03a 	or	r2,r4,r2
 400141c:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 4001420:	88c02f17 	ldw	r3,188(r17)
 4001424:	18c00104 	addi	r3,r3,4
 4001428:	18800037 	ldwio	r2,0(r3)
 400142c:	900b883a 	mov	r5,r18
 4001430:	90002a16 	blt	r18,zero,40014dc <alt_onchip_flash_erase_block+0x148>
 4001434:	280bd0ba 	srai	r5,r5,2
 4001438:	10bc002c 	andhi	r2,r2,61440
 400143c:	29401c34 	orhi	r5,r5,112
 4001440:	288ab03a 	or	r5,r5,r2
 4001444:	19400035 	stwio	r5,0(r3)
 4001448:	040002f4 	movhi	r16,11
 400144c:	842b9804 	addi	r16,r16,-20896
 4001450:	00000206 	br	400145c <alt_onchip_flash_erase_block+0xc8>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001454:	4001cf80 	call	4001cf8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001458:	80002226 	beq	r16,zero,40014e4 <alt_onchip_flash_erase_block+0x150>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400145c:	88c02f17 	ldw	r3,188(r17)
 4001460:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001464:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001468:	108000cc 	andi	r2,r2,3
 400146c:	843fffc4 	addi	r16,r16,-1
 4001470:	103ff81e 	bne	r2,zero,4001454 <__alt_data_end+0xfabf9454>

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 4001474:	040002f4 	movhi	r16,11
 4001478:	842b9804 	addi	r16,r16,-20896
 400147c:	00000306 	br	400148c <alt_onchip_flash_erase_block+0xf8>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001480:	4001cf80 	call	4001cf8 <alt_busy_sleep>
 4001484:	88c02f17 	ldw	r3,188(r17)

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001488:	80001826 	beq	r16,zero,40014ec <alt_onchip_flash_erase_block+0x158>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400148c:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001490:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001494:	1080040c 	andi	r2,r2,16
 4001498:	843fffc4 	addi	r16,r16,-1
 400149c:	103ff826 	beq	r2,zero,4001480 <__alt_data_end+0xfabf9480>
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
 40014a0:	0005883a 	mov	r2,zero

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 40014a4:	18c00104 	addi	r3,r3,4
 40014a8:	19400037 	ldwio	r5,0(r3)
 40014ac:	01040034 	movhi	r4,4096
 40014b0:	213fffc4 	addi	r4,r4,-1
 40014b4:	2908b03a 	or	r4,r5,r4
 40014b8:	19000035 	stwio	r4,0(r3)

    return ret_code;
}
 40014bc:	dfc00317 	ldw	ra,12(sp)
 40014c0:	dc800217 	ldw	r18,8(sp)
 40014c4:	dc400117 	ldw	r17,4(sp)
 40014c8:	dc000017 	ldw	r16,0(sp)
 40014cc:	dec00404 	addi	sp,sp,16
 40014d0:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 40014d4:	00bfe304 	movi	r2,-116
 40014d8:	003ff806 	br	40014bc <__alt_data_end+0xfabf94bc>

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 40014dc:	914000c4 	addi	r5,r18,3
 40014e0:	003fd406 	br	4001434 <__alt_data_end+0xfabf9434>
 40014e4:	88c02f17 	ldw	r3,188(r17)
 40014e8:	003fe206 	br	4001474 <__alt_data_end+0xfabf9474>
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 40014ec:	00bfe304 	movi	r2,-116
 40014f0:	003fec06 	br	40014a4 <__alt_data_end+0xfabf94a4>
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
        return -ENODEV;
 40014f4:	00bffb44 	movi	r2,-19
 40014f8:	f800283a 	ret
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
        return -EFAULT;
 40014fc:	00bffc84 	movi	r2,-14
 4001500:	f800283a 	ret

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
    {
        /* The address is not aligned */
        return -EINVAL;
 4001504:	00bffa84 	movi	r2,-22

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    return ret_code;
}
 4001508:	f800283a 	ret

0400150c <alt_onchip_flash_write_block>:
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
 400150c:	20800b17 	ldw	r2,44(r4)
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
 4001510:	defff404 	addi	sp,sp,-48
 4001514:	dc800415 	stw	r18,16(sp)
 4001518:	dfc00b15 	stw	ra,44(sp)
 400151c:	df000a15 	stw	fp,40(sp)
 4001520:	ddc00915 	stw	r23,36(sp)
 4001524:	dd800815 	stw	r22,32(sp)
 4001528:	dd400715 	stw	r21,28(sp)
 400152c:	dd000615 	stw	r20,24(sp)
 4001530:	dcc00515 	stw	r19,20(sp)
 4001534:	dc400315 	stw	r17,12(sp)
 4001538:	dc000215 	stw	r16,8(sp)
 400153c:	dc800c17 	ldw	r18,48(sp)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
 4001540:	2880740e 	bge	r5,r2,4001714 <alt_onchip_flash_write_block+0x208>
 4001544:	3023883a 	mov	r17,r6
        (block_offset >= flash->dev.length) ||
 4001548:	3080720e 	bge	r6,r2,4001714 <alt_onchip_flash_write_block+0x208>
        (data_offset >= flash->dev.length) ||
 400154c:	1185c83a 	sub	r2,r2,r6
 4001550:	14807016 	blt	r2,r18,4001714 <alt_onchip_flash_write_block+0x208>
    ) {
        return -EFAULT;
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
 4001554:	20c02f17 	ldw	r3,188(r4)
 4001558:	2021883a 	mov	r16,r4
 400155c:	18006f26 	beq	r3,zero,400171c <alt_onchip_flash_write_block+0x210>
 4001560:	20802e17 	ldw	r2,184(r4)
 4001564:	10006d1e 	bne	r2,zero,400171c <alt_onchip_flash_write_block+0x210>
 4001568:	04c002f4 	movhi	r19,11
 400156c:	3829883a 	mov	r20,r7
 4001570:	9ceb9804 	addi	r19,r19,-20896
 4001574:	00000306 	br	4001584 <alt_onchip_flash_write_block+0x78>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001578:	4001cf80 	call	4001cf8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400157c:	98006326 	beq	r19,zero,400170c <alt_onchip_flash_write_block+0x200>
 4001580:	80c02f17 	ldw	r3,188(r16)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001584:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001588:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400158c:	108000cc 	andi	r2,r2,3
 4001590:	9cffffc4 	addi	r19,r19,-1
 4001594:	103ff81e 	bne	r2,zero,4001578 <__alt_data_end+0xfabf9578>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 4001598:	18c00104 	addi	r3,r3,4
 400159c:	18800037 	ldwio	r2,0(r3)
 40015a0:	113c002c 	andhi	r4,r2,61440
 40015a4:	00802034 	movhi	r2,128
 40015a8:	10bfffc4 	addi	r2,r2,-1
 40015ac:	2084b03a 	or	r2,r4,r2
 40015b0:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
 40015b4:	0027883a 	mov	r19,zero
 40015b8:	90005a26 	beq	r18,zero,4001724 <alt_onchip_flash_write_block+0x218>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
 40015bc:	05bfffc4 	movi	r22,-1

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 40015c0:	057fff04 	movi	r21,-4

    /* Check data length */
    while (length)
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
 40015c4:	dd800015 	stw	r22,0(sp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
 40015c8:	890000cc 	andi	r4,r17,3
 40015cc:	20002c1e 	bne	r4,zero,4001680 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 40015d0:	88c00104 	addi	r3,r17,4
 40015d4:	1d46703a 	and	r3,r3,r21
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
 40015d8:	1c79c83a 	sub	fp,r3,r17
 40015dc:	9700010e 	bge	r18,fp,40015e4 <alt_onchip_flash_write_block+0xd8>
 40015e0:	9039883a 	mov	fp,r18
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
 40015e4:	a4cb883a 	add	r5,r20,r19
 40015e8:	e00d883a 	mov	r6,fp
 40015ec:	d809883a 	mov	r4,sp
 40015f0:	d8c00115 	stw	r3,4(sp)
 40015f4:	40026cc0 	call	40026cc <memcpy>

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 40015f8:	d8c00117 	ldw	r3,4(sp)
 40015fc:	882f883a 	mov	r23,r17
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
            buffer_offset += length_of_current_write;
 4001600:	9f27883a 	add	r19,r19,fp
            length -= length_of_current_write;
 4001604:	9725c83a 	sub	r18,r18,fp

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 4001608:	1823883a 	mov	r17,r3
            buffer_offset += length_of_current_write - padding;
            length -= length_of_current_write - padding;
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
 400160c:	80800a17 	ldw	r2,40(r16)
 4001610:	15ef883a 	add	r23,r2,r23
 4001614:	d8800017 	ldw	r2,0(sp)
 4001618:	b8800035 	stwio	r2,0(r23)
 400161c:	05c002f4 	movhi	r23,11
 4001620:	bdeb9804 	addi	r23,r23,-20896
 4001624:	00000206 	br	4001630 <alt_onchip_flash_write_block+0x124>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001628:	4001cf80 	call	4001cf8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400162c:	b8002326 	beq	r23,zero,40016bc <alt_onchip_flash_write_block+0x1b0>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001630:	80c02f17 	ldw	r3,188(r16)
 4001634:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001638:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400163c:	108000cc 	andi	r2,r2,3
 4001640:	bdffffc4 	addi	r23,r23,-1
 4001644:	103ff81e 	bne	r2,zero,4001628 <__alt_data_end+0xfabf9628>
 4001648:	05c002f4 	movhi	r23,11
 400164c:	bdeb9804 	addi	r23,r23,-20896
 4001650:	00000306 	br	4001660 <alt_onchip_flash_write_block+0x154>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001654:	4001cf80 	call	4001cf8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001658:	b8001826 	beq	r23,zero,40016bc <alt_onchip_flash_write_block+0x1b0>
 400165c:	80c02f17 	ldw	r3,188(r16)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001660:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001664:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001668:	1080020c 	andi	r2,r2,8
 400166c:	bdffffc4 	addi	r23,r23,-1
 4001670:	103ff826 	beq	r2,zero,4001654 <__alt_data_end+0xfabf9654>

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
 4001674:	903fd31e 	bne	r18,zero,40015c4 <__alt_data_end+0xfabf95c4>
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 4001678:	0005883a 	mov	r2,zero
 400167c:	00001106 	br	40016c4 <alt_onchip_flash_write_block+0x1b8>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
 4001680:	892fc83a 	sub	r23,r17,r4
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 4001684:	bc400104 	addi	r17,r23,4
 4001688:	8d62703a 	and	r17,r17,r21
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
 400168c:	2485883a 	add	r2,r4,r18
 4001690:	8df9c83a 	sub	fp,r17,r23
 4001694:	1700010e 	bge	r2,fp,400169c <alt_onchip_flash_write_block+0x190>
 4001698:	1039883a 	mov	fp,r2
 400169c:	e139c83a 	sub	fp,fp,r4
 40016a0:	a4cb883a 	add	r5,r20,r19
 40016a4:	e00d883a 	mov	r6,fp
 40016a8:	d909883a 	add	r4,sp,r4
 40016ac:	40026cc0 	call	40026cc <memcpy>
            buffer_offset += length_of_current_write - padding;
 40016b0:	9f27883a 	add	r19,r19,fp
            length -= length_of_current_write - padding;
 40016b4:	9725c83a 	sub	r18,r18,fp
 40016b8:	003fd406 	br	400160c <__alt_data_end+0xfabf960c>
 40016bc:	80c02f17 	ldw	r3,188(r16)
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 40016c0:	00bfe304 	movi	r2,-116
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 40016c4:	18c00104 	addi	r3,r3,4
 40016c8:	19400037 	ldwio	r5,0(r3)
 40016cc:	01040034 	movhi	r4,4096
 40016d0:	213fffc4 	addi	r4,r4,-1
 40016d4:	2908b03a 	or	r4,r5,r4
 40016d8:	19000035 	stwio	r4,0(r3)

    return ret_code;
}
 40016dc:	dfc00b17 	ldw	ra,44(sp)
 40016e0:	df000a17 	ldw	fp,40(sp)
 40016e4:	ddc00917 	ldw	r23,36(sp)
 40016e8:	dd800817 	ldw	r22,32(sp)
 40016ec:	dd400717 	ldw	r21,28(sp)
 40016f0:	dd000617 	ldw	r20,24(sp)
 40016f4:	dcc00517 	ldw	r19,20(sp)
 40016f8:	dc800417 	ldw	r18,16(sp)
 40016fc:	dc400317 	ldw	r17,12(sp)
 4001700:	dc000217 	ldw	r16,8(sp)
 4001704:	dec00c04 	addi	sp,sp,48
 4001708:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400170c:	00bfe304 	movi	r2,-116
 4001710:	003ff206 	br	40016dc <__alt_data_end+0xfabf96dc>
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
 4001714:	00bffc84 	movi	r2,-14
 4001718:	003ff006 	br	40016dc <__alt_data_end+0xfabf96dc>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
        return -ENODEV;
 400171c:	00bffb44 	movi	r2,-19
 4001720:	003fee06 	br	40016dc <__alt_data_end+0xfabf96dc>
 4001724:	80c02f17 	ldw	r3,188(r16)
 4001728:	003fd306 	br	4001678 <__alt_data_end+0xfabf9678>

0400172c <alt_onchip_flash_write>:
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
 400172c:	20800b17 	ldw	r2,44(r4)
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
 4001730:	deffee04 	addi	sp,sp,-72
 4001734:	dfc01115 	stw	ra,68(sp)
 4001738:	df001015 	stw	fp,64(sp)
 400173c:	ddc00f15 	stw	r23,60(sp)
 4001740:	dd800e15 	stw	r22,56(sp)
 4001744:	dd400d15 	stw	r21,52(sp)
 4001748:	dd000c15 	stw	r20,48(sp)
 400174c:	dcc00b15 	stw	r19,44(sp)
 4001750:	dc800a15 	stw	r18,40(sp)
 4001754:	dc400915 	stw	r17,36(sp)
 4001758:	dc000815 	stw	r16,32(sp)
 400175c:	d9000215 	stw	r4,8(sp)
 4001760:	d9400415 	stw	r5,16(sp)
 4001764:	d9c00515 	stw	r7,20(sp)
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
 4001768:	28806b0e 	bge	r5,r2,4001918 <alt_onchip_flash_write+0x1ec>
 400176c:	1145c83a 	sub	r2,r2,r5
 4001770:	11c06916 	blt	r2,r7,4001918 <alt_onchip_flash_write+0x1ec>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 4001774:	20c00c17 	ldw	r3,48(r4)
 4001778:	00c0690e 	bge	zero,r3,4001920 <alt_onchip_flash_write+0x1f4>
 400177c:	302d883a 	mov	r22,r6
 4001780:	d9800217 	ldw	r6,8(sp)
 4001784:	d8800217 	ldw	r2,8(sp)
 4001788:	df000517 	ldw	fp,20(sp)
 400178c:	31800a17 	ldw	r6,40(r6)
 4001790:	dc800417 	ldw	r18,16(sp)
 4001794:	15c00f04 	addi	r23,r2,60
 4001798:	d9800315 	stw	r6,12(sp)
 400179c:	11801004 	addi	r6,r2,64
 40017a0:	d9800115 	stw	r6,4(sp)
 40017a4:	0027883a 	mov	r19,zero
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
 40017a8:	bc3ffe17 	ldw	r16,-8(r23)
 40017ac:	94000e16 	blt	r18,r16,40017e8 <alt_onchip_flash_write+0xbc>
 40017b0:	b8bfff17 	ldw	r2,-4(r23)
 40017b4:	8085883a 	add	r2,r16,r2
 40017b8:	90800b0e 	bge	r18,r2,40017e8 <alt_onchip_flash_write+0xbc>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 40017bc:	ba400017 	ldw	r9,0(r23)
 40017c0:	0240090e 	bge	zero,r9,40017e8 <alt_onchip_flash_write+0xbc>
 40017c4:	d8c00117 	ldw	r3,4(sp)
 40017c8:	0023883a 	mov	r17,zero
 40017cc:	1d000017 	ldw	r20,0(r3)
            {
                if ((offset >= current_offset ) &&
 40017d0:	94000d0e 	bge	r18,r16,4001808 <alt_onchip_flash_write+0xdc>
 40017d4:	8521883a 	add	r16,r16,r20
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 40017d8:	8c400044 	addi	r17,r17,1
 40017dc:	8a7ffc16 	blt	r17,r9,40017d0 <__alt_data_end+0xfabf97d0>
 40017e0:	d9800217 	ldw	r6,8(sp)
 40017e4:	30c00c17 	ldw	r3,48(r6)
 40017e8:	d8800117 	ldw	r2,4(sp)
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 40017ec:	9cc00044 	addi	r19,r19,1
 40017f0:	bdc00404 	addi	r23,r23,16
 40017f4:	10800404 	addi	r2,r2,16
 40017f8:	d8800115 	stw	r2,4(sp)
 40017fc:	98ffea16 	blt	r19,r3,40017a8 <__alt_data_end+0xfabf97a8>
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 4001800:	0005883a 	mov	r2,zero
 4001804:	00002006 	br	4001888 <alt_onchip_flash_write+0x15c>
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
 4001808:	8507883a 	add	r3,r16,r20
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
 400180c:	90c0130e 	bge	r18,r3,400185c <alt_onchip_flash_write+0x130>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
 4001810:	1cabc83a 	sub	r21,r3,r18
                    data_to_write = MIN(data_to_write, length);
 4001814:	e540010e 	bge	fp,r21,400181c <alt_onchip_flash_write+0xf0>
 4001818:	e02b883a 	mov	r21,fp
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
 400181c:	d8800317 	ldw	r2,12(sp)
 4001820:	a80d883a 	mov	r6,r21
 4001824:	b009883a 	mov	r4,r22
 4001828:	148b883a 	add	r5,r2,r18
 400182c:	d8c00615 	stw	r3,24(sp)
 4001830:	da400715 	stw	r9,28(sp)
 4001834:	40026500 	call	4002650 <memcmp>
 4001838:	d8c00617 	ldw	r3,24(sp)
 400183c:	da400717 	ldw	r9,28(sp)
 4001840:	1000081e 	bne	r2,zero,4001864 <alt_onchip_flash_write+0x138>
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 4001844:	af3fee26 	beq	r21,fp,4001800 <__alt_data_end+0xfabf9800>
 4001848:	1825883a 	mov	r18,r3
                    {
                        goto finished;
                    }

                    length -= data_to_write;
 400184c:	e579c83a 	sub	fp,fp,r21
                    offset = current_offset + flash->dev.region_info[i].block_size;
                    src_addr = (alt_u8*)src_addr + data_to_write;
 4001850:	b56d883a 	add	r22,r22,r21
 4001854:	9021883a 	mov	r16,r18
 4001858:	003fdf06 	br	40017d8 <__alt_data_end+0xfabf97d8>
 400185c:	1821883a 	mov	r16,r3
 4001860:	003fdd06 	br	40017d8 <__alt_data_end+0xfabf97d8>
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
                    data_to_write = MIN(data_to_write, length);
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
 4001864:	d8c00217 	ldw	r3,8(sp)
 4001868:	800b883a 	mov	r5,r16
 400186c:	18800817 	ldw	r2,32(r3)
 4001870:	1809883a 	mov	r4,r3
 4001874:	103ee83a 	callr	r2

                        if (!ret_code)
                        {
                            ret_code = (*flash->dev.write_block)(
 4001878:	d8c00217 	ldw	r3,8(sp)
                    data_to_write = MIN(data_to_write, length);
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);

                        if (!ret_code)
 400187c:	10001526 	beq	r2,zero,40018d4 <alt_onchip_flash_write+0x1a8>
 4001880:	18c00a17 	ldw	r3,40(r3)
 4001884:	d8c00315 	stw	r3,12(sp)
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
 4001888:	d8c00317 	ldw	r3,12(sp)
 400188c:	d9800417 	ldw	r6,16(sp)
 4001890:	d9400517 	ldw	r5,20(sp)
 4001894:	d8800615 	stw	r2,24(sp)
 4001898:	1989883a 	add	r4,r3,r6
 400189c:	4001e2c0 	call	4001e2c <alt_dcache_flush>
    return ret_code;
 40018a0:	d8800617 	ldw	r2,24(sp)
}
 40018a4:	dfc01117 	ldw	ra,68(sp)
 40018a8:	df001017 	ldw	fp,64(sp)
 40018ac:	ddc00f17 	ldw	r23,60(sp)
 40018b0:	dd800e17 	ldw	r22,56(sp)
 40018b4:	dd400d17 	ldw	r21,52(sp)
 40018b8:	dd000c17 	ldw	r20,48(sp)
 40018bc:	dcc00b17 	ldw	r19,44(sp)
 40018c0:	dc800a17 	ldw	r18,40(sp)
 40018c4:	dc400917 	ldw	r17,36(sp)
 40018c8:	dc000817 	ldw	r16,32(sp)
 40018cc:	dec01204 	addi	sp,sp,72
 40018d0:	f800283a 	ret
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);

                        if (!ret_code)
                        {
                            ret_code = (*flash->dev.write_block)(
 40018d4:	18800917 	ldw	r2,36(r3)
 40018d8:	b00f883a 	mov	r7,r22
 40018dc:	dd400015 	stw	r21,0(sp)
 40018e0:	900d883a 	mov	r6,r18
 40018e4:	800b883a 	mov	r5,r16
 40018e8:	1809883a 	mov	r4,r3
 40018ec:	103ee83a 	callr	r2
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 40018f0:	af000f26 	beq	r21,fp,4001930 <alt_onchip_flash_write+0x204>
 40018f4:	10000e1e 	bne	r2,zero,4001930 <alt_onchip_flash_write+0x204>
 40018f8:	d8c00117 	ldw	r3,4(sp)
 40018fc:	ba400017 	ldw	r9,0(r23)
 4001900:	1d000017 	ldw	r20,0(r3)
 4001904:	d8c00217 	ldw	r3,8(sp)
 4001908:	8525883a 	add	r18,r16,r20
 400190c:	18c00a17 	ldw	r3,40(r3)
 4001910:	d8c00315 	stw	r3,12(sp)
 4001914:	003fcd06 	br	400184c <__alt_data_end+0xfabf984c>
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
    {
        return -EFAULT;
 4001918:	00bffc84 	movi	r2,-14
 400191c:	003fe106 	br	40018a4 <__alt_data_end+0xfabf98a4>
 4001920:	20c00a17 	ldw	r3,40(r4)
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 4001924:	0005883a 	mov	r2,zero
 4001928:	d8c00315 	stw	r3,12(sp)
 400192c:	003fd606 	br	4001888 <__alt_data_end+0xfabf9888>
 4001930:	d8c00217 	ldw	r3,8(sp)
 4001934:	003fd206 	br	4001880 <__alt_data_end+0xfabf9880>

04001938 <altera_onchip_flash_init>:

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];

    if (flash->csr_base != NULL) {
 4001938:	20802f17 	ldw	r2,188(r4)
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
 400193c:	defff704 	addi	sp,sp,-36
 4001940:	dc800215 	stw	r18,8(sp)
 4001944:	dc000015 	stw	r16,0(sp)
 4001948:	dfc00815 	stw	ra,32(sp)
 400194c:	ddc00715 	stw	r23,28(sp)
 4001950:	dd800615 	stw	r22,24(sp)
 4001954:	dd400515 	stw	r21,20(sp)
 4001958:	dd000415 	stw	r20,16(sp)
 400195c:	dcc00315 	stw	r19,12(sp)
 4001960:	dc400115 	stw	r17,4(sp)
 4001964:	2021883a 	mov	r16,r4
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];
 4001968:	24800d04 	addi	r18,r4,52

    if (flash->csr_base != NULL) {
 400196c:	10003926 	beq	r2,zero,4001a54 <altera_onchip_flash_init+0x11c>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
 4001970:	11000037 	ldwio	r4,0(r2)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
 4001974:	10c00037 	ldwio	r3,0(r2)
 4001978:	1d40100c 	andi	r21,r3,64
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
 400197c:	10c00037 	ldwio	r3,0(r2)
 4001980:	1d80200c 	andi	r22,r3,128
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
 4001984:	15000037 	ldwio	r20,0(r2)
 4001988:	a500400c 	andi	r20,r20,256
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
 400198c:	14c00037 	ldwio	r19,0(r2)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 4001990:	00800044 	movi	r2,1
 4001994:	80c03017 	ldw	r3,192(r16)
    if (flash->csr_base != NULL) {
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
 4001998:	9cc0800c 	andi	r19,r19,512
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 400199c:	18807726 	beq	r3,r2,4001b7c <altera_onchip_flash_init+0x244>
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 40019a0:	0023883a 	mov	r17,zero
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 40019a4:	80c03317 	ldw	r3,204(r16)
 40019a8:	00800044 	movi	r2,1
 40019ac:	18805926 	beq	r3,r2,4001b14 <altera_onchip_flash_init+0x1dc>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 40019b0:	80c03617 	ldw	r3,216(r16)
 40019b4:	00800044 	movi	r2,1
 40019b8:	18804426 	beq	r3,r2,4001acc <altera_onchip_flash_init+0x194>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 40019bc:	80c03917 	ldw	r3,228(r16)
 40019c0:	00800044 	movi	r2,1
 40019c4:	18803f26 	beq	r3,r2,4001ac4 <altera_onchip_flash_init+0x18c>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
 40019c8:	80c03c17 	ldw	r3,240(r16)
 40019cc:	00800044 	movi	r2,1
 40019d0:	18800e26 	beq	r3,r2,4001a0c <altera_onchip_flash_init+0xd4>

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 40019d4:	d1600d04 	addi	r5,gp,-32716
 40019d8:	8009883a 	mov	r4,r16

        number_of_regions++;
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
 40019dc:	84400c15 	stw	r17,48(r16)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
}
 40019e0:	dfc00817 	ldw	ra,32(sp)
 40019e4:	ddc00717 	ldw	r23,28(sp)
 40019e8:	dd800617 	ldw	r22,24(sp)
 40019ec:	dd400517 	ldw	r21,20(sp)
 40019f0:	dd000417 	ldw	r20,16(sp)
 40019f4:	dcc00317 	ldw	r19,12(sp)
 40019f8:	dc800217 	ldw	r18,8(sp)
 40019fc:	dc400117 	ldw	r17,4(sp)
 4001a00:	dc000017 	ldw	r16,0(sp)
 4001a04:	dec00904 	addi	sp,sp,36
 4001a08:	4001e8c1 	jmpi	4001e8c <alt_dev_llist_insert>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
 4001a0c:	983ff11e 	bne	r19,zero,40019d4 <__alt_data_end+0xfabf99d4>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 4001a10:	81403d17 	ldw	r5,244(r16)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 4001a14:	80803e17 	ldw	r2,248(r16)
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 4001a18:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001a1c:	84c03f17 	ldw	r19,252(r16)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 4001a20:	1145c83a 	sub	r2,r2,r5
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 4001a24:	90e5883a 	add	r18,r18,r3
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 4001a28:	10800044 	addi	r2,r2,1
 4001a2c:	90800115 	stw	r2,4(r18)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001a30:	80c7883a 	add	r3,r16,r3
 4001a34:	19000e17 	ldw	r4,56(r3)
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 4001a38:	91400015 	stw	r5,0(r18)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001a3c:	980b883a 	mov	r5,r19
 4001a40:	40008580 	call	4000858 <__divsi3>
 4001a44:	90800215 	stw	r2,8(r18)
        region_info[number_of_regions].block_size = flash->page_size;
 4001a48:	94c00315 	stw	r19,12(r18)

        number_of_regions++;
 4001a4c:	8c400044 	addi	r17,r17,1
 4001a50:	003fe006 	br	40019d4 <__alt_data_end+0xfabf99d4>
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 4001a54:	20c03017 	ldw	r3,192(r4)
 4001a58:	00800044 	movi	r2,1
 4001a5c:	18805626 	beq	r3,r2,4001bb8 <altera_onchip_flash_init+0x280>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 4001a60:	24403317 	ldw	r17,204(r4)
 4001a64:	88803f26 	beq	r17,r2,4001b64 <altera_onchip_flash_init+0x22c>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 4001a68:	20c03617 	ldw	r3,216(r4)
 4001a6c:	18805726 	beq	r3,r2,4001bcc <altera_onchip_flash_init+0x294>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 4001a70:	20c03917 	ldw	r3,228(r4)
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 4001a74:	0027883a 	mov	r19,zero

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 4001a78:	0023883a 	mov	r17,zero
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 4001a7c:	18bfd21e 	bne	r3,r2,40019c8 <__alt_data_end+0xfabf99c8>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 4001a80:	81403a17 	ldw	r5,232(r16)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 4001a84:	80803b17 	ldw	r2,236(r16)
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 4001a88:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001a8c:	85403f17 	ldw	r21,252(r16)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 4001a90:	1145c83a 	sub	r2,r2,r5
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 4001a94:	90e9883a 	add	r20,r18,r3
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 4001a98:	10800044 	addi	r2,r2,1
 4001a9c:	a0800115 	stw	r2,4(r20)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001aa0:	80c7883a 	add	r3,r16,r3
 4001aa4:	19000e17 	ldw	r4,56(r3)
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 4001aa8:	a1400015 	stw	r5,0(r20)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001aac:	a80b883a 	mov	r5,r21
 4001ab0:	40008580 	call	4000858 <__divsi3>
 4001ab4:	a0800215 	stw	r2,8(r20)
        region_info[number_of_regions].block_size = flash->page_size;
 4001ab8:	a5400315 	stw	r21,12(r20)

        number_of_regions++;
 4001abc:	8c400044 	addi	r17,r17,1
 4001ac0:	003fc106 	br	40019c8 <__alt_data_end+0xfabf99c8>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 4001ac4:	a03fee26 	beq	r20,zero,4001a80 <__alt_data_end+0xfabf9a80>
 4001ac8:	003fbf06 	br	40019c8 <__alt_data_end+0xfabf99c8>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 4001acc:	b03fbb1e 	bne	r22,zero,40019bc <__alt_data_end+0xfabf99bc>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 4001ad0:	81403717 	ldw	r5,220(r16)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 4001ad4:	80803817 	ldw	r2,224(r16)
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 4001ad8:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001adc:	85803f17 	ldw	r22,252(r16)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 4001ae0:	1145c83a 	sub	r2,r2,r5
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 4001ae4:	90eb883a 	add	r21,r18,r3
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 4001ae8:	10800044 	addi	r2,r2,1
 4001aec:	a8800115 	stw	r2,4(r21)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001af0:	80c7883a 	add	r3,r16,r3
 4001af4:	19000e17 	ldw	r4,56(r3)
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 4001af8:	a9400015 	stw	r5,0(r21)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001afc:	b00b883a 	mov	r5,r22
 4001b00:	40008580 	call	4000858 <__divsi3>
 4001b04:	a8800215 	stw	r2,8(r21)
        region_info[number_of_regions].block_size = flash->page_size;
 4001b08:	ad800315 	stw	r22,12(r21)

        number_of_regions++;
 4001b0c:	8c400044 	addi	r17,r17,1
 4001b10:	003faa06 	br	40019bc <__alt_data_end+0xfabf99bc>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 4001b14:	a83fa61e 	bne	r21,zero,40019b0 <__alt_data_end+0xfabf99b0>
 4001b18:	882a913a 	slli	r21,r17,4
 4001b1c:	8807883a 	mov	r3,r17
 4001b20:	88a3883a 	add	r17,r17,r2

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 4001b24:	81403417 	ldw	r5,208(r16)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 4001b28:	80803517 	ldw	r2,212(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001b2c:	1806913a 	slli	r3,r3,4
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 4001b30:	956b883a 	add	r21,r18,r21
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 4001b34:	1145c83a 	sub	r2,r2,r5
 4001b38:	10800044 	addi	r2,r2,1
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001b3c:	85c03f17 	ldw	r23,252(r16)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 4001b40:	a8800115 	stw	r2,4(r21)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001b44:	80c5883a 	add	r2,r16,r3
 4001b48:	11000e17 	ldw	r4,56(r2)
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 4001b4c:	a9400015 	stw	r5,0(r21)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001b50:	b80b883a 	mov	r5,r23
 4001b54:	40008580 	call	4000858 <__divsi3>
 4001b58:	a8800215 	stw	r2,8(r21)
        region_info[number_of_regions].block_size = flash->page_size;
 4001b5c:	adc00315 	stw	r23,12(r21)
 4001b60:	003f9306 	br	40019b0 <__alt_data_end+0xfabf99b0>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 4001b64:	002b883a 	mov	r21,zero
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 4001b68:	0027883a 	mov	r19,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 4001b6c:	0029883a 	mov	r20,zero
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
 4001b70:	002d883a 	mov	r22,zero
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 4001b74:	0007883a 	mov	r3,zero
 4001b78:	003fea06 	br	4001b24 <__alt_data_end+0xfabf9b24>
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 4001b7c:	2100080c 	andi	r4,r4,32
 4001b80:	203f871e 	bne	r4,zero,40019a0 <__alt_data_end+0xfabf99a0>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
 4001b84:	81003117 	ldw	r4,196(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 4001b88:	80803217 	ldw	r2,200(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001b8c:	84403f17 	ldw	r17,252(r16)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector1_start_addr;
 4001b90:	81000d15 	stw	r4,52(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 4001b94:	1109c83a 	sub	r4,r2,r4
 4001b98:	21000044 	addi	r4,r4,1
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001b9c:	880b883a 	mov	r5,r17
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector1_start_addr;
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 4001ba0:	81000e15 	stw	r4,56(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001ba4:	40008580 	call	4000858 <__divsi3>
 4001ba8:	80800f15 	stw	r2,60(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 4001bac:	84401015 	stw	r17,64(r16)

        number_of_regions++;
 4001bb0:	04400044 	movi	r17,1
 4001bb4:	003f7b06 	br	40019a4 <__alt_data_end+0xfabf99a4>
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 4001bb8:	0027883a 	mov	r19,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 4001bbc:	0029883a 	mov	r20,zero
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
 4001bc0:	002d883a 	mov	r22,zero
{
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
 4001bc4:	002b883a 	mov	r21,zero
 4001bc8:	003fee06 	br	4001b84 <__alt_data_end+0xfabf9b84>
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 4001bcc:	0027883a 	mov	r19,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 4001bd0:	0029883a 	mov	r20,zero
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 4001bd4:	0023883a 	mov	r17,zero
 4001bd8:	003fbd06 	br	4001ad0 <__alt_data_end+0xfabf9ad0>

04001bdc <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
 4001bdc:	defffd04 	addi	sp,sp,-12
 4001be0:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001be4:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
 4001be8:	dc400115 	stw	r17,4(sp)
 4001bec:	dfc00215 	stw	ra,8(sp)
 4001bf0:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001bf4:	842b9804 	addi	r16,r16,-20896
 4001bf8:	00000206 	br	4001c04 <alt_onchip_flash_poll_for_status_to_go_idle+0x28>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001bfc:	4001cf80 	call	4001cf8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001c00:	80000b26 	beq	r16,zero,4001c30 <alt_onchip_flash_poll_for_status_to_go_idle+0x54>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001c04:	88802f17 	ldw	r2,188(r17)
 4001c08:	10800037 	ldwio	r2,0(r2)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001c0c:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001c10:	108000cc 	andi	r2,r2,3
 4001c14:	843fffc4 	addi	r16,r16,-1
 4001c18:	103ff81e 	bne	r2,zero,4001bfc <__alt_data_end+0xfabf9bfc>
            }
        }
    }

    return ret_code;
}
 4001c1c:	dfc00217 	ldw	ra,8(sp)
 4001c20:	dc400117 	ldw	r17,4(sp)
 4001c24:	dc000017 	ldw	r16,0(sp)
 4001c28:	dec00304 	addi	sp,sp,12
 4001c2c:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 4001c30:	00bfe304 	movi	r2,-116
 4001c34:	003ff906 	br	4001c1c <__alt_data_end+0xfabf9c1c>

04001c38 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
 4001c38:	defffd04 	addi	sp,sp,-12
 4001c3c:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001c40:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
 4001c44:	dc400115 	stw	r17,4(sp)
 4001c48:	dfc00215 	stw	ra,8(sp)
 4001c4c:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001c50:	842b9804 	addi	r16,r16,-20896
 4001c54:	00000206 	br	4001c60 <alt_onchip_flash_poll_for_status_erase_passed+0x28>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001c58:	4001cf80 	call	4001cf8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001c5c:	80000c26 	beq	r16,zero,4001c90 <alt_onchip_flash_poll_for_status_erase_passed+0x58>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001c60:	88802f17 	ldw	r2,188(r17)
 4001c64:	10800037 	ldwio	r2,0(r2)
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001c68:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001c6c:	1080040c 	andi	r2,r2,16
 4001c70:	843fffc4 	addi	r16,r16,-1
 4001c74:	103ff826 	beq	r2,zero,4001c58 <__alt_data_end+0xfabf9c58>
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
 4001c78:	0005883a 	mov	r2,zero
            }
        }
    }

    return ret_code;
}
 4001c7c:	dfc00217 	ldw	ra,8(sp)
 4001c80:	dc400117 	ldw	r17,4(sp)
 4001c84:	dc000017 	ldw	r16,0(sp)
 4001c88:	dec00304 	addi	sp,sp,12
 4001c8c:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 4001c90:	00bfe304 	movi	r2,-116
 4001c94:	003ff906 	br	4001c7c <__alt_data_end+0xfabf9c7c>

04001c98 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
 4001c98:	defffd04 	addi	sp,sp,-12
 4001c9c:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001ca0:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
 4001ca4:	dc400115 	stw	r17,4(sp)
 4001ca8:	dfc00215 	stw	ra,8(sp)
 4001cac:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001cb0:	842b9804 	addi	r16,r16,-20896
 4001cb4:	00000206 	br	4001cc0 <alt_onchip_flash_poll_for_status_write_passed+0x28>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001cb8:	4001cf80 	call	4001cf8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001cbc:	80000c26 	beq	r16,zero,4001cf0 <alt_onchip_flash_poll_for_status_write_passed+0x58>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001cc0:	88802f17 	ldw	r2,188(r17)
 4001cc4:	10800037 	ldwio	r2,0(r2)
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001cc8:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001ccc:	1080020c 	andi	r2,r2,8
 4001cd0:	843fffc4 	addi	r16,r16,-1
 4001cd4:	103ff826 	beq	r2,zero,4001cb8 <__alt_data_end+0xfabf9cb8>
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
 4001cd8:	0005883a 	mov	r2,zero
            }
        }
    }

    return ret_code;
}
 4001cdc:	dfc00217 	ldw	ra,8(sp)
 4001ce0:	dc400117 	ldw	r17,4(sp)
 4001ce4:	dc000017 	ldw	r16,0(sp)
 4001ce8:	dec00304 	addi	sp,sp,12
 4001cec:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 4001cf0:	00bfe304 	movi	r2,-116
 4001cf4:	003ff906 	br	4001cdc <__alt_data_end+0xfabf9cdc>

04001cf8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4001cf8:	01413b34 	movhi	r5,1260
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4001cfc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4001d00:	2953b104 	addi	r5,r5,20164
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4001d04:	dc000015 	stw	r16,0(sp)
 4001d08:	dfc00115 	stw	ra,4(sp)
 4001d0c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4001d10:	40009500 	call	4000950 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4001d14:	10001226 	beq	r2,zero,4001d60 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4001d18:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4001d1c:	013ec534 	movhi	r4,64276
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4001d20:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4001d24:	212c4f04 	addi	r4,r4,-20164
 4001d28:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4001d2c:	297fffc4 	addi	r5,r5,-1
 4001d30:	283ffe1e 	bne	r5,zero,4001d2c <__alt_data_end+0xfabf9d2c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4001d34:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4001d38:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4001d3c:	18bffb16 	blt	r3,r2,4001d2c <__alt_data_end+0xfabf9d2c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4001d40:	840006a4 	muli	r16,r16,26
 4001d44:	843fffc4 	addi	r16,r16,-1
 4001d48:	803ffe1e 	bne	r16,zero,4001d44 <__alt_data_end+0xfabf9d44>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 4001d4c:	0005883a 	mov	r2,zero
 4001d50:	dfc00117 	ldw	ra,4(sp)
 4001d54:	dc000017 	ldw	r16,0(sp)
 4001d58:	dec00204 	addi	sp,sp,8
 4001d5c:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4001d60:	840006a4 	muli	r16,r16,26
 4001d64:	843fffc4 	addi	r16,r16,-1
 4001d68:	043ffe16 	blt	zero,r16,4001d64 <__alt_data_end+0xfabf9d64>
 4001d6c:	003ff706 	br	4001d4c <__alt_data_end+0xfabf9d4c>

04001d70 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4001d70:	defffd04 	addi	sp,sp,-12
 4001d74:	dfc00215 	stw	ra,8(sp)
 4001d78:	dc400115 	stw	r17,4(sp)
 4001d7c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4001d80:	20001f16 	blt	r4,zero,4001e00 <close+0x90>
 4001d84:	20c00324 	muli	r3,r4,12
 4001d88:	00810034 	movhi	r2,1024
 4001d8c:	10951b04 	addi	r2,r2,21612
 4001d90:	1885883a 	add	r2,r3,r2
 4001d94:	2021883a 	mov	r16,r4

  if (fd)
 4001d98:	10001926 	beq	r2,zero,4001e00 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4001d9c:	10c00017 	ldw	r3,0(r2)
 4001da0:	18c00417 	ldw	r3,16(r3)
 4001da4:	18000c26 	beq	r3,zero,4001dd8 <close+0x68>
 4001da8:	1009883a 	mov	r4,r2
 4001dac:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4001db0:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4001db4:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4001db8:	40023340 	call	4002334 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 4001dbc:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
 4001dc0:	88000816 	blt	r17,zero,4001de4 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 4001dc4:	dfc00217 	ldw	ra,8(sp)
 4001dc8:	dc400117 	ldw	r17,4(sp)
 4001dcc:	dc000017 	ldw	r16,0(sp)
 4001dd0:	dec00304 	addi	sp,sp,12
 4001dd4:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4001dd8:	40023340 	call	4002334 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 4001ddc:	0005883a 	mov	r2,zero
 4001de0:	003ff806 	br	4001dc4 <__alt_data_end+0xfabf9dc4>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4001de4:	d0a00c17 	ldw	r2,-32720(gp)
 4001de8:	10000c26 	beq	r2,zero,4001e1c <close+0xac>
 4001dec:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
 4001df0:	0463c83a 	sub	r17,zero,r17
 4001df4:	14400015 	stw	r17,0(r2)
      return -1;
 4001df8:	00bfffc4 	movi	r2,-1
 4001dfc:	003ff106 	br	4001dc4 <__alt_data_end+0xfabf9dc4>
 4001e00:	d0a00c17 	ldw	r2,-32720(gp)
 4001e04:	10000726 	beq	r2,zero,4001e24 <close+0xb4>
 4001e08:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4001e0c:	00c01444 	movi	r3,81
 4001e10:	10c00015 	stw	r3,0(r2)
    return -1;
 4001e14:	00bfffc4 	movi	r2,-1
 4001e18:	003fea06 	br	4001dc4 <__alt_data_end+0xfabf9dc4>
 4001e1c:	d0a30c04 	addi	r2,gp,-29648
 4001e20:	003ff306 	br	4001df0 <__alt_data_end+0xfabf9df0>
 4001e24:	d0a30c04 	addi	r2,gp,-29648
 4001e28:	003ff806 	br	4001e0c <__alt_data_end+0xfabf9e0c>

04001e2c <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
 4001e2c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 4001e30:	2005883a 	mov	r2,r4
 4001e34:	2140092e 	bgeu	r4,r5,4001e5c <alt_dcache_flush+0x30>
  { 
    ALT_FLUSH_DATA(i); 
 4001e38:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 4001e3c:	10800804 	addi	r2,r2,32
 4001e40:	117ffd36 	bltu	r2,r5,4001e38 <__alt_data_end+0xfabf9e38>
 4001e44:	0104303a 	nor	r2,zero,r4
 4001e48:	1145883a 	add	r2,r2,r5
 4001e4c:	1004d17a 	srli	r2,r2,5
 4001e50:	10800044 	addi	r2,r2,1
 4001e54:	1004917a 	slli	r2,r2,5
 4001e58:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 4001e5c:	210007cc 	andi	r4,r4,31
 4001e60:	20000126 	beq	r4,zero,4001e68 <alt_dcache_flush+0x3c>
  {
    ALT_FLUSH_DATA(i);
 4001e64:	1000001b 	flushda	0(r2)
 4001e68:	f800283a 	ret

04001e6c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001e6c:	0005883a 	mov	r2,zero
 4001e70:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4001e74:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001e78:	10800804 	addi	r2,r2,32
 4001e7c:	10fffd1e 	bne	r2,r3,4001e74 <__alt_data_end+0xfabf9e74>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4001e80:	f800283a 	ret

04001e84 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 4001e84:	3005883a 	mov	r2,r6
 4001e88:	f800283a 	ret

04001e8c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4001e8c:	20000a26 	beq	r4,zero,4001eb8 <alt_dev_llist_insert+0x2c>
 4001e90:	20800217 	ldw	r2,8(r4)
 4001e94:	10000826 	beq	r2,zero,4001eb8 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 4001e98:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001e9c:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 4001ea0:	0005883a 	mov	r2,zero
  entry->next     = list->next;
 4001ea4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
 4001ea8:	28c00017 	ldw	r3,0(r5)
 4001eac:	19000115 	stw	r4,4(r3)
  list->next           = entry;
 4001eb0:	29000015 	stw	r4,0(r5)
 4001eb4:	f800283a 	ret
 4001eb8:	d0a00c17 	ldw	r2,-32720(gp)
 4001ebc:	10000926 	beq	r2,zero,4001ee4 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4001ec0:	deffff04 	addi	sp,sp,-4
 4001ec4:	dfc00015 	stw	ra,0(sp)
 4001ec8:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4001ecc:	00c00584 	movi	r3,22
 4001ed0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4001ed4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4001ed8:	dfc00017 	ldw	ra,0(sp)
 4001edc:	dec00104 	addi	sp,sp,4
 4001ee0:	f800283a 	ret
 4001ee4:	d0a30c04 	addi	r2,gp,-29648
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4001ee8:	00c00584 	movi	r3,22
 4001eec:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4001ef0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4001ef4:	f800283a 	ret

04001ef8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001ef8:	defffb04 	addi	sp,sp,-20
 4001efc:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
 4001f00:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001f04:	dc400115 	stw	r17,4(sp)
 4001f08:	2823883a 	mov	r17,r5
 4001f0c:	dcc00315 	stw	r19,12(sp)
 4001f10:	dfc00415 	stw	ra,16(sp)
 4001f14:	dc800215 	stw	r18,8(sp)
 4001f18:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
 4001f1c:	4002a040 	call	4002a04 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001f20:	8c000b26 	beq	r17,r16,4001f50 <alt_find_dev+0x58>
 4001f24:	14800044 	addi	r18,r2,1
 4001f28:	00000206 	br	4001f34 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 4001f2c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001f30:	8c000726 	beq	r17,r16,4001f50 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4001f34:	81000217 	ldw	r4,8(r16)
 4001f38:	900d883a 	mov	r6,r18
 4001f3c:	980b883a 	mov	r5,r19
 4001f40:	40026500 	call	4002650 <memcmp>
 4001f44:	103ff91e 	bne	r2,zero,4001f2c <__alt_data_end+0xfabf9f2c>
 4001f48:	8005883a 	mov	r2,r16
 4001f4c:	00000106 	br	4001f54 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4001f50:	0005883a 	mov	r2,zero
}
 4001f54:	dfc00417 	ldw	ra,16(sp)
 4001f58:	dcc00317 	ldw	r19,12(sp)
 4001f5c:	dc800217 	ldw	r18,8(sp)
 4001f60:	dc400117 	ldw	r17,4(sp)
 4001f64:	dc000017 	ldw	r16,0(sp)
 4001f68:	dec00504 	addi	sp,sp,20
 4001f6c:	f800283a 	ret

04001f70 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4001f70:	defffe04 	addi	sp,sp,-8
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4001f74:	d1600d04 	addi	r5,gp,-32716
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4001f78:	dc000015 	stw	r16,0(sp)
 4001f7c:	dfc00115 	stw	ra,4(sp)
 4001f80:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4001f84:	4001ef80 	call	4001ef8 <alt_find_dev>

  if ((dev) && dev->open)
 4001f88:	10000826 	beq	r2,zero,4001fac <alt_flash_open_dev+0x3c>
 4001f8c:	10c00317 	ldw	r3,12(r2)
 4001f90:	18000726 	beq	r3,zero,4001fb0 <alt_flash_open_dev+0x40>
  {
    return dev->open(dev, name);
 4001f94:	800b883a 	mov	r5,r16
 4001f98:	1009883a 	mov	r4,r2
  }

  return dev;
}
 4001f9c:	dfc00117 	ldw	ra,4(sp)
 4001fa0:	dc000017 	ldw	r16,0(sp)
 4001fa4:	dec00204 	addi	sp,sp,8
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
  {
    return dev->open(dev, name);
 4001fa8:	1800683a 	jmp	r3
 4001fac:	0005883a 	mov	r2,zero
  }

  return dev;
}
 4001fb0:	dfc00117 	ldw	ra,4(sp)
 4001fb4:	dc000017 	ldw	r16,0(sp)
 4001fb8:	dec00204 	addi	sp,sp,8
 4001fbc:	f800283a 	ret

04001fc0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  if (fd && fd->close)
 4001fc0:	20000326 	beq	r4,zero,4001fd0 <alt_flash_close_dev+0x10>
 4001fc4:	20800417 	ldw	r2,16(r4)
 4001fc8:	10000126 	beq	r2,zero,4001fd0 <alt_flash_close_dev+0x10>
  {
    fd->close(fd);
 4001fcc:	1000683a 	jmp	r2
 4001fd0:	f800283a 	ret

04001fd4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4001fd4:	01420004 	movi	r5,2048
 4001fd8:	0009883a 	mov	r4,zero
 4001fdc:	400245c1 	jmpi	400245c <alt_icache_flush>

04001fe0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4001fe0:	400206c1 	jmpi	400206c <alt_iic_isr_register>

04001fe4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001fe4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001fe8:	00bfff84 	movi	r2,-2
 4001fec:	2084703a 	and	r2,r4,r2
 4001ff0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 4001ff4:	00c00044 	movi	r3,1
 4001ff8:	d0a30a17 	ldw	r2,-29656(gp)
 4001ffc:	194a983a 	sll	r5,r3,r5
 4002000:	288ab03a 	or	r5,r5,r2
 4002004:	d1630a15 	stw	r5,-29656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4002008:	d0a30a17 	ldw	r2,-29656(gp)
 400200c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002010:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 4002014:	0005883a 	mov	r2,zero
 4002018:	f800283a 	ret

0400201c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400201c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002020:	00bfff84 	movi	r2,-2
 4002024:	2084703a 	and	r2,r4,r2
 4002028:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 400202c:	00ffff84 	movi	r3,-2
 4002030:	d0a30a17 	ldw	r2,-29656(gp)
 4002034:	194a183a 	rol	r5,r3,r5
 4002038:	288a703a 	and	r5,r5,r2
 400203c:	d1630a15 	stw	r5,-29656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4002040:	d0a30a17 	ldw	r2,-29656(gp)
 4002044:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002048:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 400204c:	0005883a 	mov	r2,zero
 4002050:	f800283a 	ret

04002054 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4002054:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4002058:	00800044 	movi	r2,1
 400205c:	1144983a 	sll	r2,r2,r5
 4002060:	10c4703a 	and	r2,r2,r3
}
 4002064:	1004c03a 	cmpne	r2,r2,zero
 4002068:	f800283a 	ret

0400206c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400206c:	00c007c4 	movi	r3,31
 4002070:	19401616 	blt	r3,r5,40020cc <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4002074:	defffe04 	addi	sp,sp,-8
 4002078:	dfc00115 	stw	ra,4(sp)
 400207c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002080:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002084:	00ffff84 	movi	r3,-2
 4002088:	80c6703a 	and	r3,r16,r3
 400208c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 4002090:	280490fa 	slli	r2,r5,3
 4002094:	00c10034 	movhi	r3,1024
 4002098:	18dac204 	addi	r3,r3,27400
 400209c:	1885883a 	add	r2,r3,r2
 40020a0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 40020a4:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40020a8:	30000626 	beq	r6,zero,40020c4 <alt_iic_isr_register+0x58>
 40020ac:	4001fe40 	call	4001fe4 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40020b0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 40020b4:	dfc00117 	ldw	ra,4(sp)
 40020b8:	dc000017 	ldw	r16,0(sp)
 40020bc:	dec00204 	addi	sp,sp,8
 40020c0:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40020c4:	400201c0 	call	400201c <alt_ic_irq_disable>
 40020c8:	003ff906 	br	40020b0 <__alt_data_end+0xfabfa0b0>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
 40020cc:	00bffa84 	movi	r2,-22
 40020d0:	f800283a 	ret

040020d4 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
 40020d4:	defffe04 	addi	sp,sp,-8
 40020d8:	2805883a 	mov	r2,r5
 40020dc:	dc000015 	stw	r16,0(sp)
 40020e0:	300b883a 	mov	r5,r6
 40020e4:	2021883a 	mov	r16,r4
{
  int old;

  old = open (name, flags, mode);
 40020e8:	01807fc4 	movi	r6,511
 40020ec:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
 40020f0:	dfc00115 	stw	ra,4(sp)
{
  int old;

  old = open (name, flags, mode);
 40020f4:	40021bc0 	call	40021bc <open>

  if (old >= 0)
 40020f8:	10000f16 	blt	r2,zero,4002138 <alt_open_fd.constprop.0+0x64>
  {
    fd->dev      = alt_fd_list[old].dev;
 40020fc:	10c00324 	muli	r3,r2,12
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 4002100:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 4002104:	00810034 	movhi	r2,1024
 4002108:	10951b04 	addi	r2,r2,21612
 400210c:	10c5883a 	add	r2,r2,r3
 4002110:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4002114:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 4002118:	81400015 	stw	r5,0(r16)
    fd->priv     = alt_fd_list[old].priv;
 400211c:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4002120:	80c00215 	stw	r3,8(r16)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
 4002124:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
 4002128:	dfc00117 	ldw	ra,4(sp)
 400212c:	dc000017 	ldw	r16,0(sp)
 4002130:	dec00204 	addi	sp,sp,8
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 4002134:	40023341 	jmpi	4002334 <alt_release_fd>
  }
} 
 4002138:	dfc00117 	ldw	ra,4(sp)
 400213c:	dc000017 	ldw	r16,0(sp)
 4002140:	dec00204 	addi	sp,sp,8
 4002144:	f800283a 	ret

04002148 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4002148:	defffb04 	addi	sp,sp,-20
 400214c:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4002150:	04010034 	movhi	r16,1024
 4002154:	84151e04 	addi	r16,r16,21624
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4002158:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400215c:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4002160:	dcc00315 	stw	r19,12(sp)
 4002164:	dc800215 	stw	r18,8(sp)
 4002168:	2827883a 	mov	r19,r5
 400216c:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4002170:	200b883a 	mov	r5,r4
 4002174:	880d883a 	mov	r6,r17
 4002178:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400217c:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4002180:	40020d40 	call	40020d4 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4002184:	813ffd04 	addi	r4,r16,-12
 4002188:	980b883a 	mov	r5,r19
 400218c:	000d883a 	mov	r6,zero
 4002190:	40020d40 	call	40020d4 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4002194:	880d883a 	mov	r6,r17
 4002198:	900b883a 	mov	r5,r18
 400219c:	81000304 	addi	r4,r16,12
}  
 40021a0:	dfc00417 	ldw	ra,16(sp)
 40021a4:	dcc00317 	ldw	r19,12(sp)
 40021a8:	dc800217 	ldw	r18,8(sp)
 40021ac:	dc400117 	ldw	r17,4(sp)
 40021b0:	dc000017 	ldw	r16,0(sp)
 40021b4:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40021b8:	40020d41 	jmpi	40020d4 <alt_open_fd.constprop.0>

040021bc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40021bc:	defffa04 	addi	sp,sp,-24
 40021c0:	dc000015 	stw	r16,0(sp)
 40021c4:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40021c8:	d1600804 	addi	r5,gp,-32736
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40021cc:	dc800215 	stw	r18,8(sp)
 40021d0:	dc400115 	stw	r17,4(sp)
 40021d4:	dfc00515 	stw	ra,20(sp)
 40021d8:	dd000415 	stw	r20,16(sp)
 40021dc:	dcc00315 	stw	r19,12(sp)
 40021e0:	2023883a 	mov	r17,r4
 40021e4:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40021e8:	4001ef80 	call	4001ef8 <alt_find_dev>
 40021ec:	10004626 	beq	r2,zero,4002308 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 40021f0:	1009883a 	mov	r4,r2
 40021f4:	1029883a 	mov	r20,r2
 40021f8:	400240c0 	call	400240c <alt_get_fd>
 40021fc:	1027883a 	mov	r19,r2
 4002200:	1000090e 	bge	r2,zero,4002228 <open+0x6c>
 4002204:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
 4002208:	9809883a 	mov	r4,r19
 400220c:	40023340 	call	4002334 <alt_release_fd>
 4002210:	d0a00c17 	ldw	r2,-32720(gp)
 4002214:	10004326 	beq	r2,zero,4002324 <open+0x168>
 4002218:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
 400221c:	14000015 	stw	r16,0(r2)
    return -1;
 4002220:	00bfffc4 	movi	r2,-1
 4002224:	00002e06 	br	40022e0 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4002228:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400222c:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4002230:	00810034 	movhi	r2,1024

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4002234:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4002238:	10951b04 	addi	r2,r2,21612

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400223c:	80c6703a 	and	r3,r16,r3
 4002240:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4002244:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4002248:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400224c:	d2200717 	ldw	r8,-32740(gp)
 4002250:	21c00017 	ldw	r7,0(r4)
 4002254:	11400204 	addi	r5,r2,8
 4002258:	0007883a 	mov	r3,zero
 400225c:	00000306 	br	400226c <open+0xb0>
 4002260:	10800304 	addi	r2,r2,12
 4002264:	29400304 	addi	r5,r5,12
 4002268:	40c01436 	bltu	r8,r3,40022bc <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400226c:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4002270:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4002274:	31fffa1e 	bne	r6,r7,4002260 <__alt_data_end+0xfabfa260>
 4002278:	29800017 	ldw	r6,0(r5)
 400227c:	303ff80e 	bge	r6,zero,4002260 <__alt_data_end+0xfabfa260>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4002280:	20bff726 	beq	r4,r2,4002260 <__alt_data_end+0xfabfa260>
 4002284:	04000344 	movi	r16,13
 4002288:	003fdf06 	br	4002208 <__alt_data_end+0xfabfa208>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 400228c:	1009883a 	mov	r4,r2
 4002290:	400240c0 	call	400240c <alt_get_fd>
 4002294:	1027883a 	mov	r19,r2
 4002298:	103fda16 	blt	r2,zero,4002204 <__alt_data_end+0xfabfa204>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 400229c:	99000324 	muli	r4,r19,12
 40022a0:	00810034 	movhi	r2,1024
 40022a4:	10951b04 	addi	r2,r2,21612
 40022a8:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40022ac:	00900034 	movhi	r2,16384
 40022b0:	10bfffc4 	addi	r2,r2,-1
 40022b4:	8084703a 	and	r2,r16,r2
 40022b8:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40022bc:	a0800317 	ldw	r2,12(r20)
 40022c0:	10000f26 	beq	r2,zero,4002300 <open+0x144>
 40022c4:	900f883a 	mov	r7,r18
 40022c8:	800d883a 	mov	r6,r16
 40022cc:	880b883a 	mov	r5,r17
 40022d0:	103ee83a 	callr	r2
 40022d4:	1007883a 	mov	r3,r2
 40022d8:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40022dc:	18001316 	blt	r3,zero,400232c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
 40022e0:	dfc00517 	ldw	ra,20(sp)
 40022e4:	dd000417 	ldw	r20,16(sp)
 40022e8:	dcc00317 	ldw	r19,12(sp)
 40022ec:	dc800217 	ldw	r18,8(sp)
 40022f0:	dc400117 	ldw	r17,4(sp)
 40022f4:	dc000017 	ldw	r16,0(sp)
 40022f8:	dec00604 	addi	sp,sp,24
 40022fc:	f800283a 	ret
 4002300:	9805883a 	mov	r2,r19
 4002304:	003ff606 	br	40022e0 <__alt_data_end+0xfabfa2e0>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4002308:	8809883a 	mov	r4,r17
 400230c:	40023600 	call	4002360 <alt_find_file>
 4002310:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4002314:	103fdd1e 	bne	r2,zero,400228c <__alt_data_end+0xfabfa28c>
 4002318:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400231c:	04ffffc4 	movi	r19,-1
 4002320:	003fb906 	br	4002208 <__alt_data_end+0xfabfa208>
 4002324:	d0a30c04 	addi	r2,gp,-29648
 4002328:	003fbc06 	br	400221c <__alt_data_end+0xfabfa21c>
 400232c:	00e1c83a 	sub	r16,zero,r3
 4002330:	003fb506 	br	4002208 <__alt_data_end+0xfabfa208>

04002334 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
 4002334:	00800084 	movi	r2,2
 4002338:	1100060e 	bge	r2,r4,4002354 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
 400233c:	21000324 	muli	r4,r4,12
 4002340:	00810034 	movhi	r2,1024
 4002344:	10951b04 	addi	r2,r2,21612
 4002348:	1109883a 	add	r4,r2,r4
 400234c:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
 4002350:	20000015 	stw	zero,0(r4)
 4002354:	f800283a 	ret

04002358 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4002358:	000170fa 	wrctl	ienable,zero
 400235c:	f800283a 	ret

04002360 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4002360:	defffa04 	addi	sp,sp,-24
 4002364:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4002368:	d4200a17 	ldw	r16,-32728(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400236c:	dd000415 	stw	r20,16(sp)
 4002370:	dfc00515 	stw	ra,20(sp)
 4002374:	dcc00315 	stw	r19,12(sp)
 4002378:	dc800215 	stw	r18,8(sp)
 400237c:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4002380:	d5200a04 	addi	r20,gp,-32728
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4002384:	85001626 	beq	r16,r20,40023e0 <alt_find_file+0x80>
 4002388:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 400238c:	04c00bc4 	movi	r19,47
 4002390:	00000806 	br	40023b4 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4002394:	9185883a 	add	r2,r18,r6
 4002398:	10800007 	ldb	r2,0(r2)
 400239c:	14c00126 	beq	r2,r19,40023a4 <alt_find_file+0x44>
 40023a0:	1000021e 	bne	r2,zero,40023ac <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
 40023a4:	40026500 	call	4002650 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40023a8:	10001626 	beq	r2,zero,4002404 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 40023ac:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40023b0:	85000b26 	beq	r16,r20,40023e0 <alt_find_file+0x80>
  {
    len = strlen(next->name);
 40023b4:	84400217 	ldw	r17,8(r16)
 40023b8:	8809883a 	mov	r4,r17
 40023bc:	4002a040 	call	4002a04 <strlen>
 40023c0:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
 40023c4:	8885883a 	add	r2,r17,r2
 40023c8:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
 40023cc:	900b883a 	mov	r5,r18
 40023d0:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 40023d4:	14ffef1e 	bne	r2,r19,4002394 <__alt_data_end+0xfabfa394>
    {
      len -= 1;
 40023d8:	31bfffc4 	addi	r6,r6,-1
 40023dc:	003fed06 	br	4002394 <__alt_data_end+0xfabfa394>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40023e0:	0005883a 	mov	r2,zero
}
 40023e4:	dfc00517 	ldw	ra,20(sp)
 40023e8:	dd000417 	ldw	r20,16(sp)
 40023ec:	dcc00317 	ldw	r19,12(sp)
 40023f0:	dc800217 	ldw	r18,8(sp)
 40023f4:	dc400117 	ldw	r17,4(sp)
 40023f8:	dc000017 	ldw	r16,0(sp)
 40023fc:	dec00604 	addi	sp,sp,24
 4002400:	f800283a 	ret
 4002404:	8005883a 	mov	r2,r16
 4002408:	003ff606 	br	40023e4 <__alt_data_end+0xfabfa3e4>

0400240c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400240c:	01c10034 	movhi	r7,1024
 4002410:	39d51b04 	addi	r7,r7,21612
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002414:	0005883a 	mov	r2,zero
 4002418:	3807883a 	mov	r3,r7
 400241c:	01800804 	movi	r6,32
 4002420:	00000206 	br	400242c <alt_get_fd+0x20>
 4002424:	10800044 	addi	r2,r2,1
 4002428:	11800a26 	beq	r2,r6,4002454 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
 400242c:	19400017 	ldw	r5,0(r3)
 4002430:	18c00304 	addi	r3,r3,12
 4002434:	283ffb1e 	bne	r5,zero,4002424 <__alt_data_end+0xfabfa424>
    {
      alt_fd_list[i].dev = dev;
 4002438:	10c00324 	muli	r3,r2,12
 400243c:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
 4002440:	d0e00717 	ldw	r3,-32740(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
 4002444:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
 4002448:	1880030e 	bge	r3,r2,4002458 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
 400244c:	d0a00715 	stw	r2,-32740(gp)
 4002450:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
 4002454:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
 4002458:	f800283a 	ret

0400245c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 400245c:	00820004 	movi	r2,2048
 4002460:	1140012e 	bgeu	r2,r5,4002468 <alt_icache_flush+0xc>
 4002464:	100b883a 	mov	r5,r2
 4002468:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400246c:	2005883a 	mov	r2,r4
 4002470:	2140092e 	bgeu	r4,r5,4002498 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4002474:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4002478:	10800804 	addi	r2,r2,32
 400247c:	117ffd36 	bltu	r2,r5,4002474 <__alt_data_end+0xfabfa474>
 4002480:	0104303a 	nor	r2,zero,r4
 4002484:	2885883a 	add	r2,r5,r2
 4002488:	1004d17a 	srli	r2,r2,5
 400248c:	10800044 	addi	r2,r2,1
 4002490:	1004917a 	slli	r2,r2,5
 4002494:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4002498:	210007cc 	andi	r4,r4,31
 400249c:	20000126 	beq	r4,zero,40024a4 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40024a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40024a4:	0000203a 	flushp
 40024a8:	f800283a 	ret

040024ac <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 40024ac:	213ffe84 	addi	r4,r4,-6
 40024b0:	008003c4 	movi	r2,15
 40024b4:	11001636 	bltu	r2,r4,4002510 <alt_exception_cause_generated_bad_addr+0x64>
 40024b8:	200890ba 	slli	r4,r4,2
 40024bc:	00810034 	movhi	r2,1024
 40024c0:	10893404 	addi	r2,r2,9424
 40024c4:	2089883a 	add	r4,r4,r2
 40024c8:	20800017 	ldw	r2,0(r4)
 40024cc:	1000683a 	jmp	r2
 40024d0:	04002518 	cmpnei	r16,zero,148
 40024d4:	04002518 	cmpnei	r16,zero,148
 40024d8:	04002510 	cmplti	r16,zero,148
 40024dc:	04002510 	cmplti	r16,zero,148
 40024e0:	04002510 	cmplti	r16,zero,148
 40024e4:	04002518 	cmpnei	r16,zero,148
 40024e8:	04002510 	cmplti	r16,zero,148
 40024ec:	04002510 	cmplti	r16,zero,148
 40024f0:	04002518 	cmpnei	r16,zero,148
 40024f4:	04002518 	cmpnei	r16,zero,148
 40024f8:	04002510 	cmplti	r16,zero,148
 40024fc:	04002518 	cmpnei	r16,zero,148
 4002500:	04002510 	cmplti	r16,zero,148
 4002504:	04002510 	cmplti	r16,zero,148
 4002508:	04002510 	cmplti	r16,zero,148
 400250c:	04002518 	cmpnei	r16,zero,148
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4002510:	0005883a 	mov	r2,zero
 4002514:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4002518:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 400251c:	f800283a 	ret

04002520 <exit>:
 4002520:	defffe04 	addi	sp,sp,-8
 4002524:	000b883a 	mov	r5,zero
 4002528:	dc000015 	stw	r16,0(sp)
 400252c:	dfc00115 	stw	ra,4(sp)
 4002530:	2021883a 	mov	r16,r4
 4002534:	4002d480 	call	4002d48 <__call_exitprocs>
 4002538:	00810034 	movhi	r2,1024
 400253c:	1097a004 	addi	r2,r2,24192
 4002540:	11000017 	ldw	r4,0(r2)
 4002544:	20800f17 	ldw	r2,60(r4)
 4002548:	10000126 	beq	r2,zero,4002550 <exit+0x30>
 400254c:	103ee83a 	callr	r2
 4002550:	8009883a 	mov	r4,r16
 4002554:	4004c640 	call	4004c64 <_exit>

04002558 <_getc_r>:
 4002558:	defffd04 	addi	sp,sp,-12
 400255c:	dc000115 	stw	r16,4(sp)
 4002560:	dfc00215 	stw	ra,8(sp)
 4002564:	2021883a 	mov	r16,r4
 4002568:	20000226 	beq	r4,zero,4002574 <_getc_r+0x1c>
 400256c:	20800e17 	ldw	r2,56(r4)
 4002570:	10000c26 	beq	r2,zero,40025a4 <_getc_r+0x4c>
 4002574:	28800117 	ldw	r2,4(r5)
 4002578:	10bfffc4 	addi	r2,r2,-1
 400257c:	28800115 	stw	r2,4(r5)
 4002580:	10000c16 	blt	r2,zero,40025b4 <_getc_r+0x5c>
 4002584:	28800017 	ldw	r2,0(r5)
 4002588:	10c00044 	addi	r3,r2,1
 400258c:	28c00015 	stw	r3,0(r5)
 4002590:	10800003 	ldbu	r2,0(r2)
 4002594:	dfc00217 	ldw	ra,8(sp)
 4002598:	dc000117 	ldw	r16,4(sp)
 400259c:	dec00304 	addi	sp,sp,12
 40025a0:	f800283a 	ret
 40025a4:	d9400015 	stw	r5,0(sp)
 40025a8:	40034c00 	call	40034c0 <__sinit>
 40025ac:	d9400017 	ldw	r5,0(sp)
 40025b0:	003ff006 	br	4002574 <__alt_data_end+0xfabfa574>
 40025b4:	8009883a 	mov	r4,r16
 40025b8:	dfc00217 	ldw	ra,8(sp)
 40025bc:	dc000117 	ldw	r16,4(sp)
 40025c0:	dec00304 	addi	sp,sp,12
 40025c4:	400297c1 	jmpi	400297c <__srget_r>

040025c8 <getc>:
 40025c8:	00810034 	movhi	r2,1024
 40025cc:	defffd04 	addi	sp,sp,-12
 40025d0:	1097a104 	addi	r2,r2,24196
 40025d4:	dc400115 	stw	r17,4(sp)
 40025d8:	14400017 	ldw	r17,0(r2)
 40025dc:	dc000015 	stw	r16,0(sp)
 40025e0:	dfc00215 	stw	ra,8(sp)
 40025e4:	2021883a 	mov	r16,r4
 40025e8:	88000226 	beq	r17,zero,40025f4 <getc+0x2c>
 40025ec:	88800e17 	ldw	r2,56(r17)
 40025f0:	10000d26 	beq	r2,zero,4002628 <getc+0x60>
 40025f4:	80800117 	ldw	r2,4(r16)
 40025f8:	10bfffc4 	addi	r2,r2,-1
 40025fc:	80800115 	stw	r2,4(r16)
 4002600:	10000c16 	blt	r2,zero,4002634 <getc+0x6c>
 4002604:	80800017 	ldw	r2,0(r16)
 4002608:	10c00044 	addi	r3,r2,1
 400260c:	80c00015 	stw	r3,0(r16)
 4002610:	10800003 	ldbu	r2,0(r2)
 4002614:	dfc00217 	ldw	ra,8(sp)
 4002618:	dc400117 	ldw	r17,4(sp)
 400261c:	dc000017 	ldw	r16,0(sp)
 4002620:	dec00304 	addi	sp,sp,12
 4002624:	f800283a 	ret
 4002628:	8809883a 	mov	r4,r17
 400262c:	40034c00 	call	40034c0 <__sinit>
 4002630:	003ff006 	br	40025f4 <__alt_data_end+0xfabfa5f4>
 4002634:	800b883a 	mov	r5,r16
 4002638:	8809883a 	mov	r4,r17
 400263c:	dfc00217 	ldw	ra,8(sp)
 4002640:	dc400117 	ldw	r17,4(sp)
 4002644:	dc000017 	ldw	r16,0(sp)
 4002648:	dec00304 	addi	sp,sp,12
 400264c:	400297c1 	jmpi	400297c <__srget_r>

04002650 <memcmp>:
 4002650:	01c000c4 	movi	r7,3
 4002654:	3980192e 	bgeu	r7,r6,40026bc <memcmp+0x6c>
 4002658:	2144b03a 	or	r2,r4,r5
 400265c:	11c4703a 	and	r2,r2,r7
 4002660:	10000f26 	beq	r2,zero,40026a0 <memcmp+0x50>
 4002664:	20800003 	ldbu	r2,0(r4)
 4002668:	28c00003 	ldbu	r3,0(r5)
 400266c:	10c0151e 	bne	r2,r3,40026c4 <memcmp+0x74>
 4002670:	31bfff84 	addi	r6,r6,-2
 4002674:	01ffffc4 	movi	r7,-1
 4002678:	00000406 	br	400268c <memcmp+0x3c>
 400267c:	20800003 	ldbu	r2,0(r4)
 4002680:	28c00003 	ldbu	r3,0(r5)
 4002684:	31bfffc4 	addi	r6,r6,-1
 4002688:	10c00e1e 	bne	r2,r3,40026c4 <memcmp+0x74>
 400268c:	21000044 	addi	r4,r4,1
 4002690:	29400044 	addi	r5,r5,1
 4002694:	31fff91e 	bne	r6,r7,400267c <__alt_data_end+0xfabfa67c>
 4002698:	0005883a 	mov	r2,zero
 400269c:	f800283a 	ret
 40026a0:	20c00017 	ldw	r3,0(r4)
 40026a4:	28800017 	ldw	r2,0(r5)
 40026a8:	18bfee1e 	bne	r3,r2,4002664 <__alt_data_end+0xfabfa664>
 40026ac:	31bfff04 	addi	r6,r6,-4
 40026b0:	21000104 	addi	r4,r4,4
 40026b4:	29400104 	addi	r5,r5,4
 40026b8:	39bff936 	bltu	r7,r6,40026a0 <__alt_data_end+0xfabfa6a0>
 40026bc:	303fe91e 	bne	r6,zero,4002664 <__alt_data_end+0xfabfa664>
 40026c0:	003ff506 	br	4002698 <__alt_data_end+0xfabfa698>
 40026c4:	10c5c83a 	sub	r2,r2,r3
 40026c8:	f800283a 	ret

040026cc <memcpy>:
 40026cc:	defffd04 	addi	sp,sp,-12
 40026d0:	dfc00215 	stw	ra,8(sp)
 40026d4:	dc400115 	stw	r17,4(sp)
 40026d8:	dc000015 	stw	r16,0(sp)
 40026dc:	00c003c4 	movi	r3,15
 40026e0:	2005883a 	mov	r2,r4
 40026e4:	1980452e 	bgeu	r3,r6,40027fc <memcpy+0x130>
 40026e8:	2906b03a 	or	r3,r5,r4
 40026ec:	18c000cc 	andi	r3,r3,3
 40026f0:	1800441e 	bne	r3,zero,4002804 <memcpy+0x138>
 40026f4:	347ffc04 	addi	r17,r6,-16
 40026f8:	8822d13a 	srli	r17,r17,4
 40026fc:	28c00104 	addi	r3,r5,4
 4002700:	23400104 	addi	r13,r4,4
 4002704:	8820913a 	slli	r16,r17,4
 4002708:	2b000204 	addi	r12,r5,8
 400270c:	22c00204 	addi	r11,r4,8
 4002710:	84000504 	addi	r16,r16,20
 4002714:	2a800304 	addi	r10,r5,12
 4002718:	22400304 	addi	r9,r4,12
 400271c:	2c21883a 	add	r16,r5,r16
 4002720:	2811883a 	mov	r8,r5
 4002724:	200f883a 	mov	r7,r4
 4002728:	41000017 	ldw	r4,0(r8)
 400272c:	1fc00017 	ldw	ra,0(r3)
 4002730:	63c00017 	ldw	r15,0(r12)
 4002734:	39000015 	stw	r4,0(r7)
 4002738:	53800017 	ldw	r14,0(r10)
 400273c:	6fc00015 	stw	ra,0(r13)
 4002740:	5bc00015 	stw	r15,0(r11)
 4002744:	4b800015 	stw	r14,0(r9)
 4002748:	18c00404 	addi	r3,r3,16
 400274c:	39c00404 	addi	r7,r7,16
 4002750:	42000404 	addi	r8,r8,16
 4002754:	6b400404 	addi	r13,r13,16
 4002758:	63000404 	addi	r12,r12,16
 400275c:	5ac00404 	addi	r11,r11,16
 4002760:	52800404 	addi	r10,r10,16
 4002764:	4a400404 	addi	r9,r9,16
 4002768:	1c3fef1e 	bne	r3,r16,4002728 <__alt_data_end+0xfabfa728>
 400276c:	89c00044 	addi	r7,r17,1
 4002770:	380e913a 	slli	r7,r7,4
 4002774:	310003cc 	andi	r4,r6,15
 4002778:	02c000c4 	movi	r11,3
 400277c:	11c7883a 	add	r3,r2,r7
 4002780:	29cb883a 	add	r5,r5,r7
 4002784:	5900212e 	bgeu	r11,r4,400280c <memcpy+0x140>
 4002788:	1813883a 	mov	r9,r3
 400278c:	2811883a 	mov	r8,r5
 4002790:	200f883a 	mov	r7,r4
 4002794:	42800017 	ldw	r10,0(r8)
 4002798:	4a400104 	addi	r9,r9,4
 400279c:	39ffff04 	addi	r7,r7,-4
 40027a0:	4abfff15 	stw	r10,-4(r9)
 40027a4:	42000104 	addi	r8,r8,4
 40027a8:	59fffa36 	bltu	r11,r7,4002794 <__alt_data_end+0xfabfa794>
 40027ac:	213fff04 	addi	r4,r4,-4
 40027b0:	2008d0ba 	srli	r4,r4,2
 40027b4:	318000cc 	andi	r6,r6,3
 40027b8:	21000044 	addi	r4,r4,1
 40027bc:	2109883a 	add	r4,r4,r4
 40027c0:	2109883a 	add	r4,r4,r4
 40027c4:	1907883a 	add	r3,r3,r4
 40027c8:	290b883a 	add	r5,r5,r4
 40027cc:	30000626 	beq	r6,zero,40027e8 <memcpy+0x11c>
 40027d0:	198d883a 	add	r6,r3,r6
 40027d4:	29c00003 	ldbu	r7,0(r5)
 40027d8:	18c00044 	addi	r3,r3,1
 40027dc:	29400044 	addi	r5,r5,1
 40027e0:	19ffffc5 	stb	r7,-1(r3)
 40027e4:	19bffb1e 	bne	r3,r6,40027d4 <__alt_data_end+0xfabfa7d4>
 40027e8:	dfc00217 	ldw	ra,8(sp)
 40027ec:	dc400117 	ldw	r17,4(sp)
 40027f0:	dc000017 	ldw	r16,0(sp)
 40027f4:	dec00304 	addi	sp,sp,12
 40027f8:	f800283a 	ret
 40027fc:	2007883a 	mov	r3,r4
 4002800:	003ff206 	br	40027cc <__alt_data_end+0xfabfa7cc>
 4002804:	2007883a 	mov	r3,r4
 4002808:	003ff106 	br	40027d0 <__alt_data_end+0xfabfa7d0>
 400280c:	200d883a 	mov	r6,r4
 4002810:	003fee06 	br	40027cc <__alt_data_end+0xfabfa7cc>

04002814 <_putc_r>:
 4002814:	defffc04 	addi	sp,sp,-16
 4002818:	dc000215 	stw	r16,8(sp)
 400281c:	dfc00315 	stw	ra,12(sp)
 4002820:	2021883a 	mov	r16,r4
 4002824:	20000226 	beq	r4,zero,4002830 <_putc_r+0x1c>
 4002828:	20800e17 	ldw	r2,56(r4)
 400282c:	10001b26 	beq	r2,zero,400289c <_putc_r+0x88>
 4002830:	30800217 	ldw	r2,8(r6)
 4002834:	10bfffc4 	addi	r2,r2,-1
 4002838:	30800215 	stw	r2,8(r6)
 400283c:	10000a16 	blt	r2,zero,4002868 <_putc_r+0x54>
 4002840:	30800017 	ldw	r2,0(r6)
 4002844:	11400005 	stb	r5,0(r2)
 4002848:	30800017 	ldw	r2,0(r6)
 400284c:	10c00044 	addi	r3,r2,1
 4002850:	30c00015 	stw	r3,0(r6)
 4002854:	10800003 	ldbu	r2,0(r2)
 4002858:	dfc00317 	ldw	ra,12(sp)
 400285c:	dc000217 	ldw	r16,8(sp)
 4002860:	dec00404 	addi	sp,sp,16
 4002864:	f800283a 	ret
 4002868:	30c00617 	ldw	r3,24(r6)
 400286c:	10c00616 	blt	r2,r3,4002888 <_putc_r+0x74>
 4002870:	30800017 	ldw	r2,0(r6)
 4002874:	00c00284 	movi	r3,10
 4002878:	11400005 	stb	r5,0(r2)
 400287c:	30800017 	ldw	r2,0(r6)
 4002880:	11400003 	ldbu	r5,0(r2)
 4002884:	28fff11e 	bne	r5,r3,400284c <__alt_data_end+0xfabfa84c>
 4002888:	8009883a 	mov	r4,r16
 400288c:	dfc00317 	ldw	ra,12(sp)
 4002890:	dc000217 	ldw	r16,8(sp)
 4002894:	dec00404 	addi	sp,sp,16
 4002898:	4002a9c1 	jmpi	4002a9c <__swbuf_r>
 400289c:	d9400015 	stw	r5,0(sp)
 40028a0:	d9800115 	stw	r6,4(sp)
 40028a4:	40034c00 	call	40034c0 <__sinit>
 40028a8:	d9800117 	ldw	r6,4(sp)
 40028ac:	d9400017 	ldw	r5,0(sp)
 40028b0:	003fdf06 	br	4002830 <__alt_data_end+0xfabfa830>

040028b4 <putc>:
 40028b4:	00810034 	movhi	r2,1024
 40028b8:	defffc04 	addi	sp,sp,-16
 40028bc:	1097a104 	addi	r2,r2,24196
 40028c0:	dc000115 	stw	r16,4(sp)
 40028c4:	14000017 	ldw	r16,0(r2)
 40028c8:	dc400215 	stw	r17,8(sp)
 40028cc:	dfc00315 	stw	ra,12(sp)
 40028d0:	2023883a 	mov	r17,r4
 40028d4:	80000226 	beq	r16,zero,40028e0 <putc+0x2c>
 40028d8:	80800e17 	ldw	r2,56(r16)
 40028dc:	10001a26 	beq	r2,zero,4002948 <putc+0x94>
 40028e0:	28800217 	ldw	r2,8(r5)
 40028e4:	10bfffc4 	addi	r2,r2,-1
 40028e8:	28800215 	stw	r2,8(r5)
 40028ec:	10000b16 	blt	r2,zero,400291c <putc+0x68>
 40028f0:	28800017 	ldw	r2,0(r5)
 40028f4:	14400005 	stb	r17,0(r2)
 40028f8:	28800017 	ldw	r2,0(r5)
 40028fc:	10c00044 	addi	r3,r2,1
 4002900:	28c00015 	stw	r3,0(r5)
 4002904:	10800003 	ldbu	r2,0(r2)
 4002908:	dfc00317 	ldw	ra,12(sp)
 400290c:	dc400217 	ldw	r17,8(sp)
 4002910:	dc000117 	ldw	r16,4(sp)
 4002914:	dec00404 	addi	sp,sp,16
 4002918:	f800283a 	ret
 400291c:	28c00617 	ldw	r3,24(r5)
 4002920:	10c00e16 	blt	r2,r3,400295c <putc+0xa8>
 4002924:	28800017 	ldw	r2,0(r5)
 4002928:	01000284 	movi	r4,10
 400292c:	14400005 	stb	r17,0(r2)
 4002930:	28800017 	ldw	r2,0(r5)
 4002934:	10c00003 	ldbu	r3,0(r2)
 4002938:	193ff01e 	bne	r3,r4,40028fc <__alt_data_end+0xfabfa8fc>
 400293c:	280d883a 	mov	r6,r5
 4002940:	180b883a 	mov	r5,r3
 4002944:	00000706 	br	4002964 <putc+0xb0>
 4002948:	8009883a 	mov	r4,r16
 400294c:	d9400015 	stw	r5,0(sp)
 4002950:	40034c00 	call	40034c0 <__sinit>
 4002954:	d9400017 	ldw	r5,0(sp)
 4002958:	003fe106 	br	40028e0 <__alt_data_end+0xfabfa8e0>
 400295c:	280d883a 	mov	r6,r5
 4002960:	880b883a 	mov	r5,r17
 4002964:	8009883a 	mov	r4,r16
 4002968:	dfc00317 	ldw	ra,12(sp)
 400296c:	dc400217 	ldw	r17,8(sp)
 4002970:	dc000117 	ldw	r16,4(sp)
 4002974:	dec00404 	addi	sp,sp,16
 4002978:	4002a9c1 	jmpi	4002a9c <__swbuf_r>

0400297c <__srget_r>:
 400297c:	defffd04 	addi	sp,sp,-12
 4002980:	dc400115 	stw	r17,4(sp)
 4002984:	dc000015 	stw	r16,0(sp)
 4002988:	dfc00215 	stw	ra,8(sp)
 400298c:	2023883a 	mov	r17,r4
 4002990:	2821883a 	mov	r16,r5
 4002994:	20000226 	beq	r4,zero,40029a0 <__srget_r+0x24>
 4002998:	20800e17 	ldw	r2,56(r4)
 400299c:	10001026 	beq	r2,zero,40029e0 <__srget_r+0x64>
 40029a0:	800b883a 	mov	r5,r16
 40029a4:	8809883a 	mov	r4,r17
 40029a8:	40045d80 	call	40045d8 <__srefill_r>
 40029ac:	10000e1e 	bne	r2,zero,40029e8 <__srget_r+0x6c>
 40029b0:	80c00017 	ldw	r3,0(r16)
 40029b4:	80800117 	ldw	r2,4(r16)
 40029b8:	19000044 	addi	r4,r3,1
 40029bc:	10bfffc4 	addi	r2,r2,-1
 40029c0:	80800115 	stw	r2,4(r16)
 40029c4:	81000015 	stw	r4,0(r16)
 40029c8:	18800003 	ldbu	r2,0(r3)
 40029cc:	dfc00217 	ldw	ra,8(sp)
 40029d0:	dc400117 	ldw	r17,4(sp)
 40029d4:	dc000017 	ldw	r16,0(sp)
 40029d8:	dec00304 	addi	sp,sp,12
 40029dc:	f800283a 	ret
 40029e0:	40034c00 	call	40034c0 <__sinit>
 40029e4:	003fee06 	br	40029a0 <__alt_data_end+0xfabfa9a0>
 40029e8:	00bfffc4 	movi	r2,-1
 40029ec:	003ff706 	br	40029cc <__alt_data_end+0xfabfa9cc>

040029f0 <__srget>:
 40029f0:	00810034 	movhi	r2,1024
 40029f4:	1097a104 	addi	r2,r2,24196
 40029f8:	200b883a 	mov	r5,r4
 40029fc:	11000017 	ldw	r4,0(r2)
 4002a00:	400297c1 	jmpi	400297c <__srget_r>

04002a04 <strlen>:
 4002a04:	208000cc 	andi	r2,r4,3
 4002a08:	10002026 	beq	r2,zero,4002a8c <strlen+0x88>
 4002a0c:	20800007 	ldb	r2,0(r4)
 4002a10:	10002026 	beq	r2,zero,4002a94 <strlen+0x90>
 4002a14:	2005883a 	mov	r2,r4
 4002a18:	00000206 	br	4002a24 <strlen+0x20>
 4002a1c:	10c00007 	ldb	r3,0(r2)
 4002a20:	18001826 	beq	r3,zero,4002a84 <strlen+0x80>
 4002a24:	10800044 	addi	r2,r2,1
 4002a28:	10c000cc 	andi	r3,r2,3
 4002a2c:	183ffb1e 	bne	r3,zero,4002a1c <__alt_data_end+0xfabfaa1c>
 4002a30:	10c00017 	ldw	r3,0(r2)
 4002a34:	01ffbff4 	movhi	r7,65279
 4002a38:	39ffbfc4 	addi	r7,r7,-257
 4002a3c:	00ca303a 	nor	r5,zero,r3
 4002a40:	01a02074 	movhi	r6,32897
 4002a44:	19c7883a 	add	r3,r3,r7
 4002a48:	31a02004 	addi	r6,r6,-32640
 4002a4c:	1946703a 	and	r3,r3,r5
 4002a50:	1986703a 	and	r3,r3,r6
 4002a54:	1800091e 	bne	r3,zero,4002a7c <strlen+0x78>
 4002a58:	10800104 	addi	r2,r2,4
 4002a5c:	10c00017 	ldw	r3,0(r2)
 4002a60:	19cb883a 	add	r5,r3,r7
 4002a64:	00c6303a 	nor	r3,zero,r3
 4002a68:	28c6703a 	and	r3,r5,r3
 4002a6c:	1986703a 	and	r3,r3,r6
 4002a70:	183ff926 	beq	r3,zero,4002a58 <__alt_data_end+0xfabfaa58>
 4002a74:	00000106 	br	4002a7c <strlen+0x78>
 4002a78:	10800044 	addi	r2,r2,1
 4002a7c:	10c00007 	ldb	r3,0(r2)
 4002a80:	183ffd1e 	bne	r3,zero,4002a78 <__alt_data_end+0xfabfaa78>
 4002a84:	1105c83a 	sub	r2,r2,r4
 4002a88:	f800283a 	ret
 4002a8c:	2005883a 	mov	r2,r4
 4002a90:	003fe706 	br	4002a30 <__alt_data_end+0xfabfaa30>
 4002a94:	0005883a 	mov	r2,zero
 4002a98:	f800283a 	ret

04002a9c <__swbuf_r>:
 4002a9c:	defffb04 	addi	sp,sp,-20
 4002aa0:	dcc00315 	stw	r19,12(sp)
 4002aa4:	dc800215 	stw	r18,8(sp)
 4002aa8:	dc000015 	stw	r16,0(sp)
 4002aac:	dfc00415 	stw	ra,16(sp)
 4002ab0:	dc400115 	stw	r17,4(sp)
 4002ab4:	2025883a 	mov	r18,r4
 4002ab8:	2827883a 	mov	r19,r5
 4002abc:	3021883a 	mov	r16,r6
 4002ac0:	20000226 	beq	r4,zero,4002acc <__swbuf_r+0x30>
 4002ac4:	20800e17 	ldw	r2,56(r4)
 4002ac8:	10004226 	beq	r2,zero,4002bd4 <__swbuf_r+0x138>
 4002acc:	80800617 	ldw	r2,24(r16)
 4002ad0:	8100030b 	ldhu	r4,12(r16)
 4002ad4:	80800215 	stw	r2,8(r16)
 4002ad8:	2080020c 	andi	r2,r4,8
 4002adc:	10003626 	beq	r2,zero,4002bb8 <__swbuf_r+0x11c>
 4002ae0:	80c00417 	ldw	r3,16(r16)
 4002ae4:	18003426 	beq	r3,zero,4002bb8 <__swbuf_r+0x11c>
 4002ae8:	2088000c 	andi	r2,r4,8192
 4002aec:	9c403fcc 	andi	r17,r19,255
 4002af0:	10001a26 	beq	r2,zero,4002b5c <__swbuf_r+0xc0>
 4002af4:	80800017 	ldw	r2,0(r16)
 4002af8:	81000517 	ldw	r4,20(r16)
 4002afc:	10c7c83a 	sub	r3,r2,r3
 4002b00:	1900200e 	bge	r3,r4,4002b84 <__swbuf_r+0xe8>
 4002b04:	18c00044 	addi	r3,r3,1
 4002b08:	81000217 	ldw	r4,8(r16)
 4002b0c:	11400044 	addi	r5,r2,1
 4002b10:	81400015 	stw	r5,0(r16)
 4002b14:	213fffc4 	addi	r4,r4,-1
 4002b18:	81000215 	stw	r4,8(r16)
 4002b1c:	14c00005 	stb	r19,0(r2)
 4002b20:	80800517 	ldw	r2,20(r16)
 4002b24:	10c01e26 	beq	r2,r3,4002ba0 <__swbuf_r+0x104>
 4002b28:	8080030b 	ldhu	r2,12(r16)
 4002b2c:	1080004c 	andi	r2,r2,1
 4002b30:	10000226 	beq	r2,zero,4002b3c <__swbuf_r+0xa0>
 4002b34:	00800284 	movi	r2,10
 4002b38:	88801926 	beq	r17,r2,4002ba0 <__swbuf_r+0x104>
 4002b3c:	8805883a 	mov	r2,r17
 4002b40:	dfc00417 	ldw	ra,16(sp)
 4002b44:	dcc00317 	ldw	r19,12(sp)
 4002b48:	dc800217 	ldw	r18,8(sp)
 4002b4c:	dc400117 	ldw	r17,4(sp)
 4002b50:	dc000017 	ldw	r16,0(sp)
 4002b54:	dec00504 	addi	sp,sp,20
 4002b58:	f800283a 	ret
 4002b5c:	81401917 	ldw	r5,100(r16)
 4002b60:	00b7ffc4 	movi	r2,-8193
 4002b64:	21080014 	ori	r4,r4,8192
 4002b68:	2884703a 	and	r2,r5,r2
 4002b6c:	80801915 	stw	r2,100(r16)
 4002b70:	80800017 	ldw	r2,0(r16)
 4002b74:	8100030d 	sth	r4,12(r16)
 4002b78:	81000517 	ldw	r4,20(r16)
 4002b7c:	10c7c83a 	sub	r3,r2,r3
 4002b80:	193fe016 	blt	r3,r4,4002b04 <__alt_data_end+0xfabfab04>
 4002b84:	800b883a 	mov	r5,r16
 4002b88:	9009883a 	mov	r4,r18
 4002b8c:	40030e40 	call	40030e4 <_fflush_r>
 4002b90:	1000071e 	bne	r2,zero,4002bb0 <__swbuf_r+0x114>
 4002b94:	80800017 	ldw	r2,0(r16)
 4002b98:	00c00044 	movi	r3,1
 4002b9c:	003fda06 	br	4002b08 <__alt_data_end+0xfabfab08>
 4002ba0:	800b883a 	mov	r5,r16
 4002ba4:	9009883a 	mov	r4,r18
 4002ba8:	40030e40 	call	40030e4 <_fflush_r>
 4002bac:	103fe326 	beq	r2,zero,4002b3c <__alt_data_end+0xfabfab3c>
 4002bb0:	00bfffc4 	movi	r2,-1
 4002bb4:	003fe206 	br	4002b40 <__alt_data_end+0xfabfab40>
 4002bb8:	800b883a 	mov	r5,r16
 4002bbc:	9009883a 	mov	r4,r18
 4002bc0:	4002bf40 	call	4002bf4 <__swsetup_r>
 4002bc4:	103ffa1e 	bne	r2,zero,4002bb0 <__alt_data_end+0xfabfabb0>
 4002bc8:	8100030b 	ldhu	r4,12(r16)
 4002bcc:	80c00417 	ldw	r3,16(r16)
 4002bd0:	003fc506 	br	4002ae8 <__alt_data_end+0xfabfaae8>
 4002bd4:	40034c00 	call	40034c0 <__sinit>
 4002bd8:	003fbc06 	br	4002acc <__alt_data_end+0xfabfaacc>

04002bdc <__swbuf>:
 4002bdc:	00810034 	movhi	r2,1024
 4002be0:	1097a104 	addi	r2,r2,24196
 4002be4:	280d883a 	mov	r6,r5
 4002be8:	200b883a 	mov	r5,r4
 4002bec:	11000017 	ldw	r4,0(r2)
 4002bf0:	4002a9c1 	jmpi	4002a9c <__swbuf_r>

04002bf4 <__swsetup_r>:
 4002bf4:	00810034 	movhi	r2,1024
 4002bf8:	defffd04 	addi	sp,sp,-12
 4002bfc:	1097a104 	addi	r2,r2,24196
 4002c00:	dc400115 	stw	r17,4(sp)
 4002c04:	2023883a 	mov	r17,r4
 4002c08:	11000017 	ldw	r4,0(r2)
 4002c0c:	dc000015 	stw	r16,0(sp)
 4002c10:	dfc00215 	stw	ra,8(sp)
 4002c14:	2821883a 	mov	r16,r5
 4002c18:	20000226 	beq	r4,zero,4002c24 <__swsetup_r+0x30>
 4002c1c:	20800e17 	ldw	r2,56(r4)
 4002c20:	10003126 	beq	r2,zero,4002ce8 <__swsetup_r+0xf4>
 4002c24:	8080030b 	ldhu	r2,12(r16)
 4002c28:	10c0020c 	andi	r3,r2,8
 4002c2c:	1009883a 	mov	r4,r2
 4002c30:	18000f26 	beq	r3,zero,4002c70 <__swsetup_r+0x7c>
 4002c34:	80c00417 	ldw	r3,16(r16)
 4002c38:	18001526 	beq	r3,zero,4002c90 <__swsetup_r+0x9c>
 4002c3c:	1100004c 	andi	r4,r2,1
 4002c40:	20001c1e 	bne	r4,zero,4002cb4 <__swsetup_r+0xc0>
 4002c44:	1080008c 	andi	r2,r2,2
 4002c48:	1000291e 	bne	r2,zero,4002cf0 <__swsetup_r+0xfc>
 4002c4c:	80800517 	ldw	r2,20(r16)
 4002c50:	80800215 	stw	r2,8(r16)
 4002c54:	18001c26 	beq	r3,zero,4002cc8 <__swsetup_r+0xd4>
 4002c58:	0005883a 	mov	r2,zero
 4002c5c:	dfc00217 	ldw	ra,8(sp)
 4002c60:	dc400117 	ldw	r17,4(sp)
 4002c64:	dc000017 	ldw	r16,0(sp)
 4002c68:	dec00304 	addi	sp,sp,12
 4002c6c:	f800283a 	ret
 4002c70:	2080040c 	andi	r2,r4,16
 4002c74:	10002e26 	beq	r2,zero,4002d30 <__swsetup_r+0x13c>
 4002c78:	2080010c 	andi	r2,r4,4
 4002c7c:	10001e1e 	bne	r2,zero,4002cf8 <__swsetup_r+0x104>
 4002c80:	80c00417 	ldw	r3,16(r16)
 4002c84:	20800214 	ori	r2,r4,8
 4002c88:	8080030d 	sth	r2,12(r16)
 4002c8c:	183feb1e 	bne	r3,zero,4002c3c <__alt_data_end+0xfabfac3c>
 4002c90:	1100a00c 	andi	r4,r2,640
 4002c94:	01408004 	movi	r5,512
 4002c98:	217fe826 	beq	r4,r5,4002c3c <__alt_data_end+0xfabfac3c>
 4002c9c:	800b883a 	mov	r5,r16
 4002ca0:	8809883a 	mov	r4,r17
 4002ca4:	4003acc0 	call	4003acc <__smakebuf_r>
 4002ca8:	8080030b 	ldhu	r2,12(r16)
 4002cac:	80c00417 	ldw	r3,16(r16)
 4002cb0:	003fe206 	br	4002c3c <__alt_data_end+0xfabfac3c>
 4002cb4:	80800517 	ldw	r2,20(r16)
 4002cb8:	80000215 	stw	zero,8(r16)
 4002cbc:	0085c83a 	sub	r2,zero,r2
 4002cc0:	80800615 	stw	r2,24(r16)
 4002cc4:	183fe41e 	bne	r3,zero,4002c58 <__alt_data_end+0xfabfac58>
 4002cc8:	80c0030b 	ldhu	r3,12(r16)
 4002ccc:	0005883a 	mov	r2,zero
 4002cd0:	1900200c 	andi	r4,r3,128
 4002cd4:	203fe126 	beq	r4,zero,4002c5c <__alt_data_end+0xfabfac5c>
 4002cd8:	18c01014 	ori	r3,r3,64
 4002cdc:	80c0030d 	sth	r3,12(r16)
 4002ce0:	00bfffc4 	movi	r2,-1
 4002ce4:	003fdd06 	br	4002c5c <__alt_data_end+0xfabfac5c>
 4002ce8:	40034c00 	call	40034c0 <__sinit>
 4002cec:	003fcd06 	br	4002c24 <__alt_data_end+0xfabfac24>
 4002cf0:	0005883a 	mov	r2,zero
 4002cf4:	003fd606 	br	4002c50 <__alt_data_end+0xfabfac50>
 4002cf8:	81400c17 	ldw	r5,48(r16)
 4002cfc:	28000626 	beq	r5,zero,4002d18 <__swsetup_r+0x124>
 4002d00:	80801004 	addi	r2,r16,64
 4002d04:	28800326 	beq	r5,r2,4002d14 <__swsetup_r+0x120>
 4002d08:	8809883a 	mov	r4,r17
 4002d0c:	40036340 	call	4003634 <_free_r>
 4002d10:	8100030b 	ldhu	r4,12(r16)
 4002d14:	80000c15 	stw	zero,48(r16)
 4002d18:	80c00417 	ldw	r3,16(r16)
 4002d1c:	00bff6c4 	movi	r2,-37
 4002d20:	1108703a 	and	r4,r2,r4
 4002d24:	80000115 	stw	zero,4(r16)
 4002d28:	80c00015 	stw	r3,0(r16)
 4002d2c:	003fd506 	br	4002c84 <__alt_data_end+0xfabfac84>
 4002d30:	00800244 	movi	r2,9
 4002d34:	88800015 	stw	r2,0(r17)
 4002d38:	20801014 	ori	r2,r4,64
 4002d3c:	8080030d 	sth	r2,12(r16)
 4002d40:	00bfffc4 	movi	r2,-1
 4002d44:	003fc506 	br	4002c5c <__alt_data_end+0xfabfac5c>

04002d48 <__call_exitprocs>:
 4002d48:	defff504 	addi	sp,sp,-44
 4002d4c:	df000915 	stw	fp,36(sp)
 4002d50:	dd400615 	stw	r21,24(sp)
 4002d54:	dc800315 	stw	r18,12(sp)
 4002d58:	dfc00a15 	stw	ra,40(sp)
 4002d5c:	ddc00815 	stw	r23,32(sp)
 4002d60:	dd800715 	stw	r22,28(sp)
 4002d64:	dd000515 	stw	r20,20(sp)
 4002d68:	dcc00415 	stw	r19,16(sp)
 4002d6c:	dc400215 	stw	r17,8(sp)
 4002d70:	dc000115 	stw	r16,4(sp)
 4002d74:	d9000015 	stw	r4,0(sp)
 4002d78:	2839883a 	mov	fp,r5
 4002d7c:	04800044 	movi	r18,1
 4002d80:	057fffc4 	movi	r21,-1
 4002d84:	00810034 	movhi	r2,1024
 4002d88:	1097a004 	addi	r2,r2,24192
 4002d8c:	12000017 	ldw	r8,0(r2)
 4002d90:	45005217 	ldw	r20,328(r8)
 4002d94:	44c05204 	addi	r19,r8,328
 4002d98:	a0001c26 	beq	r20,zero,4002e0c <__call_exitprocs+0xc4>
 4002d9c:	a0800117 	ldw	r2,4(r20)
 4002da0:	15ffffc4 	addi	r23,r2,-1
 4002da4:	b8000d16 	blt	r23,zero,4002ddc <__call_exitprocs+0x94>
 4002da8:	14000044 	addi	r16,r2,1
 4002dac:	8421883a 	add	r16,r16,r16
 4002db0:	8421883a 	add	r16,r16,r16
 4002db4:	84402004 	addi	r17,r16,128
 4002db8:	a463883a 	add	r17,r20,r17
 4002dbc:	a421883a 	add	r16,r20,r16
 4002dc0:	e0001e26 	beq	fp,zero,4002e3c <__call_exitprocs+0xf4>
 4002dc4:	80804017 	ldw	r2,256(r16)
 4002dc8:	e0801c26 	beq	fp,r2,4002e3c <__call_exitprocs+0xf4>
 4002dcc:	bdffffc4 	addi	r23,r23,-1
 4002dd0:	843fff04 	addi	r16,r16,-4
 4002dd4:	8c7fff04 	addi	r17,r17,-4
 4002dd8:	bd7ff91e 	bne	r23,r21,4002dc0 <__alt_data_end+0xfabfadc0>
 4002ddc:	00800034 	movhi	r2,0
 4002de0:	10800004 	addi	r2,r2,0
 4002de4:	10000926 	beq	r2,zero,4002e0c <__call_exitprocs+0xc4>
 4002de8:	a0800117 	ldw	r2,4(r20)
 4002dec:	1000301e 	bne	r2,zero,4002eb0 <__call_exitprocs+0x168>
 4002df0:	a0800017 	ldw	r2,0(r20)
 4002df4:	10003226 	beq	r2,zero,4002ec0 <__call_exitprocs+0x178>
 4002df8:	a009883a 	mov	r4,r20
 4002dfc:	98800015 	stw	r2,0(r19)
 4002e00:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4002e04:	9d000017 	ldw	r20,0(r19)
 4002e08:	a03fe41e 	bne	r20,zero,4002d9c <__alt_data_end+0xfabfad9c>
 4002e0c:	dfc00a17 	ldw	ra,40(sp)
 4002e10:	df000917 	ldw	fp,36(sp)
 4002e14:	ddc00817 	ldw	r23,32(sp)
 4002e18:	dd800717 	ldw	r22,28(sp)
 4002e1c:	dd400617 	ldw	r21,24(sp)
 4002e20:	dd000517 	ldw	r20,20(sp)
 4002e24:	dcc00417 	ldw	r19,16(sp)
 4002e28:	dc800317 	ldw	r18,12(sp)
 4002e2c:	dc400217 	ldw	r17,8(sp)
 4002e30:	dc000117 	ldw	r16,4(sp)
 4002e34:	dec00b04 	addi	sp,sp,44
 4002e38:	f800283a 	ret
 4002e3c:	a0800117 	ldw	r2,4(r20)
 4002e40:	80c00017 	ldw	r3,0(r16)
 4002e44:	10bfffc4 	addi	r2,r2,-1
 4002e48:	15c01426 	beq	r2,r23,4002e9c <__call_exitprocs+0x154>
 4002e4c:	80000015 	stw	zero,0(r16)
 4002e50:	183fde26 	beq	r3,zero,4002dcc <__alt_data_end+0xfabfadcc>
 4002e54:	95c8983a 	sll	r4,r18,r23
 4002e58:	a0806217 	ldw	r2,392(r20)
 4002e5c:	a5800117 	ldw	r22,4(r20)
 4002e60:	2084703a 	and	r2,r4,r2
 4002e64:	10000b26 	beq	r2,zero,4002e94 <__call_exitprocs+0x14c>
 4002e68:	a0806317 	ldw	r2,396(r20)
 4002e6c:	2088703a 	and	r4,r4,r2
 4002e70:	20000c1e 	bne	r4,zero,4002ea4 <__call_exitprocs+0x15c>
 4002e74:	89400017 	ldw	r5,0(r17)
 4002e78:	d9000017 	ldw	r4,0(sp)
 4002e7c:	183ee83a 	callr	r3
 4002e80:	a0800117 	ldw	r2,4(r20)
 4002e84:	15bfbf1e 	bne	r2,r22,4002d84 <__alt_data_end+0xfabfad84>
 4002e88:	98800017 	ldw	r2,0(r19)
 4002e8c:	153fcf26 	beq	r2,r20,4002dcc <__alt_data_end+0xfabfadcc>
 4002e90:	003fbc06 	br	4002d84 <__alt_data_end+0xfabfad84>
 4002e94:	183ee83a 	callr	r3
 4002e98:	003ff906 	br	4002e80 <__alt_data_end+0xfabfae80>
 4002e9c:	a5c00115 	stw	r23,4(r20)
 4002ea0:	003feb06 	br	4002e50 <__alt_data_end+0xfabfae50>
 4002ea4:	89000017 	ldw	r4,0(r17)
 4002ea8:	183ee83a 	callr	r3
 4002eac:	003ff406 	br	4002e80 <__alt_data_end+0xfabfae80>
 4002eb0:	a0800017 	ldw	r2,0(r20)
 4002eb4:	a027883a 	mov	r19,r20
 4002eb8:	1029883a 	mov	r20,r2
 4002ebc:	003fb606 	br	4002d98 <__alt_data_end+0xfabfad98>
 4002ec0:	0005883a 	mov	r2,zero
 4002ec4:	003ffb06 	br	4002eb4 <__alt_data_end+0xfabfaeb4>

04002ec8 <__sflush_r>:
 4002ec8:	2880030b 	ldhu	r2,12(r5)
 4002ecc:	defffb04 	addi	sp,sp,-20
 4002ed0:	dcc00315 	stw	r19,12(sp)
 4002ed4:	dc400115 	stw	r17,4(sp)
 4002ed8:	dfc00415 	stw	ra,16(sp)
 4002edc:	dc800215 	stw	r18,8(sp)
 4002ee0:	dc000015 	stw	r16,0(sp)
 4002ee4:	10c0020c 	andi	r3,r2,8
 4002ee8:	2823883a 	mov	r17,r5
 4002eec:	2027883a 	mov	r19,r4
 4002ef0:	1800311e 	bne	r3,zero,4002fb8 <__sflush_r+0xf0>
 4002ef4:	28c00117 	ldw	r3,4(r5)
 4002ef8:	10820014 	ori	r2,r2,2048
 4002efc:	2880030d 	sth	r2,12(r5)
 4002f00:	00c04b0e 	bge	zero,r3,4003030 <__sflush_r+0x168>
 4002f04:	8a000a17 	ldw	r8,40(r17)
 4002f08:	40002326 	beq	r8,zero,4002f98 <__sflush_r+0xd0>
 4002f0c:	9c000017 	ldw	r16,0(r19)
 4002f10:	10c4000c 	andi	r3,r2,4096
 4002f14:	98000015 	stw	zero,0(r19)
 4002f18:	18004826 	beq	r3,zero,400303c <__sflush_r+0x174>
 4002f1c:	89801417 	ldw	r6,80(r17)
 4002f20:	10c0010c 	andi	r3,r2,4
 4002f24:	18000626 	beq	r3,zero,4002f40 <__sflush_r+0x78>
 4002f28:	88c00117 	ldw	r3,4(r17)
 4002f2c:	88800c17 	ldw	r2,48(r17)
 4002f30:	30cdc83a 	sub	r6,r6,r3
 4002f34:	10000226 	beq	r2,zero,4002f40 <__sflush_r+0x78>
 4002f38:	88800f17 	ldw	r2,60(r17)
 4002f3c:	308dc83a 	sub	r6,r6,r2
 4002f40:	89400717 	ldw	r5,28(r17)
 4002f44:	000f883a 	mov	r7,zero
 4002f48:	9809883a 	mov	r4,r19
 4002f4c:	403ee83a 	callr	r8
 4002f50:	00ffffc4 	movi	r3,-1
 4002f54:	10c04426 	beq	r2,r3,4003068 <__sflush_r+0x1a0>
 4002f58:	88c0030b 	ldhu	r3,12(r17)
 4002f5c:	89000417 	ldw	r4,16(r17)
 4002f60:	88000115 	stw	zero,4(r17)
 4002f64:	197dffcc 	andi	r5,r3,63487
 4002f68:	8940030d 	sth	r5,12(r17)
 4002f6c:	89000015 	stw	r4,0(r17)
 4002f70:	18c4000c 	andi	r3,r3,4096
 4002f74:	18002c1e 	bne	r3,zero,4003028 <__sflush_r+0x160>
 4002f78:	89400c17 	ldw	r5,48(r17)
 4002f7c:	9c000015 	stw	r16,0(r19)
 4002f80:	28000526 	beq	r5,zero,4002f98 <__sflush_r+0xd0>
 4002f84:	88801004 	addi	r2,r17,64
 4002f88:	28800226 	beq	r5,r2,4002f94 <__sflush_r+0xcc>
 4002f8c:	9809883a 	mov	r4,r19
 4002f90:	40036340 	call	4003634 <_free_r>
 4002f94:	88000c15 	stw	zero,48(r17)
 4002f98:	0005883a 	mov	r2,zero
 4002f9c:	dfc00417 	ldw	ra,16(sp)
 4002fa0:	dcc00317 	ldw	r19,12(sp)
 4002fa4:	dc800217 	ldw	r18,8(sp)
 4002fa8:	dc400117 	ldw	r17,4(sp)
 4002fac:	dc000017 	ldw	r16,0(sp)
 4002fb0:	dec00504 	addi	sp,sp,20
 4002fb4:	f800283a 	ret
 4002fb8:	2c800417 	ldw	r18,16(r5)
 4002fbc:	903ff626 	beq	r18,zero,4002f98 <__alt_data_end+0xfabfaf98>
 4002fc0:	2c000017 	ldw	r16,0(r5)
 4002fc4:	108000cc 	andi	r2,r2,3
 4002fc8:	2c800015 	stw	r18,0(r5)
 4002fcc:	84a1c83a 	sub	r16,r16,r18
 4002fd0:	1000131e 	bne	r2,zero,4003020 <__sflush_r+0x158>
 4002fd4:	28800517 	ldw	r2,20(r5)
 4002fd8:	88800215 	stw	r2,8(r17)
 4002fdc:	04000316 	blt	zero,r16,4002fec <__sflush_r+0x124>
 4002fe0:	003fed06 	br	4002f98 <__alt_data_end+0xfabfaf98>
 4002fe4:	90a5883a 	add	r18,r18,r2
 4002fe8:	043feb0e 	bge	zero,r16,4002f98 <__alt_data_end+0xfabfaf98>
 4002fec:	88800917 	ldw	r2,36(r17)
 4002ff0:	89400717 	ldw	r5,28(r17)
 4002ff4:	800f883a 	mov	r7,r16
 4002ff8:	900d883a 	mov	r6,r18
 4002ffc:	9809883a 	mov	r4,r19
 4003000:	103ee83a 	callr	r2
 4003004:	80a1c83a 	sub	r16,r16,r2
 4003008:	00bff616 	blt	zero,r2,4002fe4 <__alt_data_end+0xfabfafe4>
 400300c:	88c0030b 	ldhu	r3,12(r17)
 4003010:	00bfffc4 	movi	r2,-1
 4003014:	18c01014 	ori	r3,r3,64
 4003018:	88c0030d 	sth	r3,12(r17)
 400301c:	003fdf06 	br	4002f9c <__alt_data_end+0xfabfaf9c>
 4003020:	0005883a 	mov	r2,zero
 4003024:	003fec06 	br	4002fd8 <__alt_data_end+0xfabfafd8>
 4003028:	88801415 	stw	r2,80(r17)
 400302c:	003fd206 	br	4002f78 <__alt_data_end+0xfabfaf78>
 4003030:	28c00f17 	ldw	r3,60(r5)
 4003034:	00ffb316 	blt	zero,r3,4002f04 <__alt_data_end+0xfabfaf04>
 4003038:	003fd706 	br	4002f98 <__alt_data_end+0xfabfaf98>
 400303c:	89400717 	ldw	r5,28(r17)
 4003040:	000d883a 	mov	r6,zero
 4003044:	01c00044 	movi	r7,1
 4003048:	9809883a 	mov	r4,r19
 400304c:	403ee83a 	callr	r8
 4003050:	100d883a 	mov	r6,r2
 4003054:	00bfffc4 	movi	r2,-1
 4003058:	30801426 	beq	r6,r2,40030ac <__sflush_r+0x1e4>
 400305c:	8880030b 	ldhu	r2,12(r17)
 4003060:	8a000a17 	ldw	r8,40(r17)
 4003064:	003fae06 	br	4002f20 <__alt_data_end+0xfabfaf20>
 4003068:	98c00017 	ldw	r3,0(r19)
 400306c:	183fba26 	beq	r3,zero,4002f58 <__alt_data_end+0xfabfaf58>
 4003070:	01000744 	movi	r4,29
 4003074:	19000626 	beq	r3,r4,4003090 <__sflush_r+0x1c8>
 4003078:	01000584 	movi	r4,22
 400307c:	19000426 	beq	r3,r4,4003090 <__sflush_r+0x1c8>
 4003080:	88c0030b 	ldhu	r3,12(r17)
 4003084:	18c01014 	ori	r3,r3,64
 4003088:	88c0030d 	sth	r3,12(r17)
 400308c:	003fc306 	br	4002f9c <__alt_data_end+0xfabfaf9c>
 4003090:	8880030b 	ldhu	r2,12(r17)
 4003094:	88c00417 	ldw	r3,16(r17)
 4003098:	88000115 	stw	zero,4(r17)
 400309c:	10bdffcc 	andi	r2,r2,63487
 40030a0:	8880030d 	sth	r2,12(r17)
 40030a4:	88c00015 	stw	r3,0(r17)
 40030a8:	003fb306 	br	4002f78 <__alt_data_end+0xfabfaf78>
 40030ac:	98800017 	ldw	r2,0(r19)
 40030b0:	103fea26 	beq	r2,zero,400305c <__alt_data_end+0xfabfb05c>
 40030b4:	00c00744 	movi	r3,29
 40030b8:	10c00226 	beq	r2,r3,40030c4 <__sflush_r+0x1fc>
 40030bc:	00c00584 	movi	r3,22
 40030c0:	10c0031e 	bne	r2,r3,40030d0 <__sflush_r+0x208>
 40030c4:	9c000015 	stw	r16,0(r19)
 40030c8:	0005883a 	mov	r2,zero
 40030cc:	003fb306 	br	4002f9c <__alt_data_end+0xfabfaf9c>
 40030d0:	88c0030b 	ldhu	r3,12(r17)
 40030d4:	3005883a 	mov	r2,r6
 40030d8:	18c01014 	ori	r3,r3,64
 40030dc:	88c0030d 	sth	r3,12(r17)
 40030e0:	003fae06 	br	4002f9c <__alt_data_end+0xfabfaf9c>

040030e4 <_fflush_r>:
 40030e4:	defffd04 	addi	sp,sp,-12
 40030e8:	dc000115 	stw	r16,4(sp)
 40030ec:	dfc00215 	stw	ra,8(sp)
 40030f0:	2021883a 	mov	r16,r4
 40030f4:	20000226 	beq	r4,zero,4003100 <_fflush_r+0x1c>
 40030f8:	20800e17 	ldw	r2,56(r4)
 40030fc:	10000c26 	beq	r2,zero,4003130 <_fflush_r+0x4c>
 4003100:	2880030f 	ldh	r2,12(r5)
 4003104:	1000051e 	bne	r2,zero,400311c <_fflush_r+0x38>
 4003108:	0005883a 	mov	r2,zero
 400310c:	dfc00217 	ldw	ra,8(sp)
 4003110:	dc000117 	ldw	r16,4(sp)
 4003114:	dec00304 	addi	sp,sp,12
 4003118:	f800283a 	ret
 400311c:	8009883a 	mov	r4,r16
 4003120:	dfc00217 	ldw	ra,8(sp)
 4003124:	dc000117 	ldw	r16,4(sp)
 4003128:	dec00304 	addi	sp,sp,12
 400312c:	4002ec81 	jmpi	4002ec8 <__sflush_r>
 4003130:	d9400015 	stw	r5,0(sp)
 4003134:	40034c00 	call	40034c0 <__sinit>
 4003138:	d9400017 	ldw	r5,0(sp)
 400313c:	003ff006 	br	4003100 <__alt_data_end+0xfabfb100>

04003140 <fflush>:
 4003140:	20000526 	beq	r4,zero,4003158 <fflush+0x18>
 4003144:	00810034 	movhi	r2,1024
 4003148:	1097a104 	addi	r2,r2,24196
 400314c:	200b883a 	mov	r5,r4
 4003150:	11000017 	ldw	r4,0(r2)
 4003154:	40030e41 	jmpi	40030e4 <_fflush_r>
 4003158:	00810034 	movhi	r2,1024
 400315c:	1097a004 	addi	r2,r2,24192
 4003160:	11000017 	ldw	r4,0(r2)
 4003164:	01410034 	movhi	r5,1024
 4003168:	294c3904 	addi	r5,r5,12516
 400316c:	4003a081 	jmpi	4003a08 <_fwalk_reent>

04003170 <__fp_unlock>:
 4003170:	0005883a 	mov	r2,zero
 4003174:	f800283a 	ret

04003178 <_cleanup_r>:
 4003178:	01410034 	movhi	r5,1024
 400317c:	29527c04 	addi	r5,r5,18928
 4003180:	4003a081 	jmpi	4003a08 <_fwalk_reent>

04003184 <__sinit.part.1>:
 4003184:	defff704 	addi	sp,sp,-36
 4003188:	00c10034 	movhi	r3,1024
 400318c:	dfc00815 	stw	ra,32(sp)
 4003190:	ddc00715 	stw	r23,28(sp)
 4003194:	dd800615 	stw	r22,24(sp)
 4003198:	dd400515 	stw	r21,20(sp)
 400319c:	dd000415 	stw	r20,16(sp)
 40031a0:	dcc00315 	stw	r19,12(sp)
 40031a4:	dc800215 	stw	r18,8(sp)
 40031a8:	dc400115 	stw	r17,4(sp)
 40031ac:	dc000015 	stw	r16,0(sp)
 40031b0:	18cc5e04 	addi	r3,r3,12664
 40031b4:	24000117 	ldw	r16,4(r4)
 40031b8:	20c00f15 	stw	r3,60(r4)
 40031bc:	2080bb04 	addi	r2,r4,748
 40031c0:	00c000c4 	movi	r3,3
 40031c4:	20c0b915 	stw	r3,740(r4)
 40031c8:	2080ba15 	stw	r2,744(r4)
 40031cc:	2000b815 	stw	zero,736(r4)
 40031d0:	05c00204 	movi	r23,8
 40031d4:	00800104 	movi	r2,4
 40031d8:	2025883a 	mov	r18,r4
 40031dc:	b80d883a 	mov	r6,r23
 40031e0:	81001704 	addi	r4,r16,92
 40031e4:	000b883a 	mov	r5,zero
 40031e8:	80000015 	stw	zero,0(r16)
 40031ec:	80000115 	stw	zero,4(r16)
 40031f0:	80000215 	stw	zero,8(r16)
 40031f4:	8080030d 	sth	r2,12(r16)
 40031f8:	80001915 	stw	zero,100(r16)
 40031fc:	8000038d 	sth	zero,14(r16)
 4003200:	80000415 	stw	zero,16(r16)
 4003204:	80000515 	stw	zero,20(r16)
 4003208:	80000615 	stw	zero,24(r16)
 400320c:	40044940 	call	4004494 <memset>
 4003210:	05810034 	movhi	r22,1024
 4003214:	94400217 	ldw	r17,8(r18)
 4003218:	05410034 	movhi	r21,1024
 400321c:	05010034 	movhi	r20,1024
 4003220:	04c10034 	movhi	r19,1024
 4003224:	b5920004 	addi	r22,r22,18432
 4003228:	ad521704 	addi	r21,r21,18524
 400322c:	a5123604 	addi	r20,r20,18648
 4003230:	9cd24d04 	addi	r19,r19,18740
 4003234:	85800815 	stw	r22,32(r16)
 4003238:	85400915 	stw	r21,36(r16)
 400323c:	85000a15 	stw	r20,40(r16)
 4003240:	84c00b15 	stw	r19,44(r16)
 4003244:	84000715 	stw	r16,28(r16)
 4003248:	00800284 	movi	r2,10
 400324c:	8880030d 	sth	r2,12(r17)
 4003250:	00800044 	movi	r2,1
 4003254:	b80d883a 	mov	r6,r23
 4003258:	89001704 	addi	r4,r17,92
 400325c:	000b883a 	mov	r5,zero
 4003260:	88000015 	stw	zero,0(r17)
 4003264:	88000115 	stw	zero,4(r17)
 4003268:	88000215 	stw	zero,8(r17)
 400326c:	88001915 	stw	zero,100(r17)
 4003270:	8880038d 	sth	r2,14(r17)
 4003274:	88000415 	stw	zero,16(r17)
 4003278:	88000515 	stw	zero,20(r17)
 400327c:	88000615 	stw	zero,24(r17)
 4003280:	40044940 	call	4004494 <memset>
 4003284:	94000317 	ldw	r16,12(r18)
 4003288:	00800484 	movi	r2,18
 400328c:	8c400715 	stw	r17,28(r17)
 4003290:	8d800815 	stw	r22,32(r17)
 4003294:	8d400915 	stw	r21,36(r17)
 4003298:	8d000a15 	stw	r20,40(r17)
 400329c:	8cc00b15 	stw	r19,44(r17)
 40032a0:	8080030d 	sth	r2,12(r16)
 40032a4:	00800084 	movi	r2,2
 40032a8:	80000015 	stw	zero,0(r16)
 40032ac:	80000115 	stw	zero,4(r16)
 40032b0:	80000215 	stw	zero,8(r16)
 40032b4:	80001915 	stw	zero,100(r16)
 40032b8:	8080038d 	sth	r2,14(r16)
 40032bc:	80000415 	stw	zero,16(r16)
 40032c0:	80000515 	stw	zero,20(r16)
 40032c4:	80000615 	stw	zero,24(r16)
 40032c8:	b80d883a 	mov	r6,r23
 40032cc:	000b883a 	mov	r5,zero
 40032d0:	81001704 	addi	r4,r16,92
 40032d4:	40044940 	call	4004494 <memset>
 40032d8:	00800044 	movi	r2,1
 40032dc:	84000715 	stw	r16,28(r16)
 40032e0:	85800815 	stw	r22,32(r16)
 40032e4:	85400915 	stw	r21,36(r16)
 40032e8:	85000a15 	stw	r20,40(r16)
 40032ec:	84c00b15 	stw	r19,44(r16)
 40032f0:	90800e15 	stw	r2,56(r18)
 40032f4:	dfc00817 	ldw	ra,32(sp)
 40032f8:	ddc00717 	ldw	r23,28(sp)
 40032fc:	dd800617 	ldw	r22,24(sp)
 4003300:	dd400517 	ldw	r21,20(sp)
 4003304:	dd000417 	ldw	r20,16(sp)
 4003308:	dcc00317 	ldw	r19,12(sp)
 400330c:	dc800217 	ldw	r18,8(sp)
 4003310:	dc400117 	ldw	r17,4(sp)
 4003314:	dc000017 	ldw	r16,0(sp)
 4003318:	dec00904 	addi	sp,sp,36
 400331c:	f800283a 	ret

04003320 <__fp_lock>:
 4003320:	0005883a 	mov	r2,zero
 4003324:	f800283a 	ret

04003328 <__sfmoreglue>:
 4003328:	defffc04 	addi	sp,sp,-16
 400332c:	dc400115 	stw	r17,4(sp)
 4003330:	2c7fffc4 	addi	r17,r5,-1
 4003334:	8c401a24 	muli	r17,r17,104
 4003338:	dc800215 	stw	r18,8(sp)
 400333c:	2825883a 	mov	r18,r5
 4003340:	89401d04 	addi	r5,r17,116
 4003344:	dc000015 	stw	r16,0(sp)
 4003348:	dfc00315 	stw	ra,12(sp)
 400334c:	4003c880 	call	4003c88 <_malloc_r>
 4003350:	1021883a 	mov	r16,r2
 4003354:	10000726 	beq	r2,zero,4003374 <__sfmoreglue+0x4c>
 4003358:	11000304 	addi	r4,r2,12
 400335c:	10000015 	stw	zero,0(r2)
 4003360:	14800115 	stw	r18,4(r2)
 4003364:	11000215 	stw	r4,8(r2)
 4003368:	89801a04 	addi	r6,r17,104
 400336c:	000b883a 	mov	r5,zero
 4003370:	40044940 	call	4004494 <memset>
 4003374:	8005883a 	mov	r2,r16
 4003378:	dfc00317 	ldw	ra,12(sp)
 400337c:	dc800217 	ldw	r18,8(sp)
 4003380:	dc400117 	ldw	r17,4(sp)
 4003384:	dc000017 	ldw	r16,0(sp)
 4003388:	dec00404 	addi	sp,sp,16
 400338c:	f800283a 	ret

04003390 <__sfp>:
 4003390:	defffb04 	addi	sp,sp,-20
 4003394:	dc000015 	stw	r16,0(sp)
 4003398:	04010034 	movhi	r16,1024
 400339c:	8417a004 	addi	r16,r16,24192
 40033a0:	dcc00315 	stw	r19,12(sp)
 40033a4:	2027883a 	mov	r19,r4
 40033a8:	81000017 	ldw	r4,0(r16)
 40033ac:	dfc00415 	stw	ra,16(sp)
 40033b0:	dc800215 	stw	r18,8(sp)
 40033b4:	20800e17 	ldw	r2,56(r4)
 40033b8:	dc400115 	stw	r17,4(sp)
 40033bc:	1000021e 	bne	r2,zero,40033c8 <__sfp+0x38>
 40033c0:	40031840 	call	4003184 <__sinit.part.1>
 40033c4:	81000017 	ldw	r4,0(r16)
 40033c8:	2480b804 	addi	r18,r4,736
 40033cc:	047fffc4 	movi	r17,-1
 40033d0:	91000117 	ldw	r4,4(r18)
 40033d4:	94000217 	ldw	r16,8(r18)
 40033d8:	213fffc4 	addi	r4,r4,-1
 40033dc:	20000a16 	blt	r4,zero,4003408 <__sfp+0x78>
 40033e0:	8080030f 	ldh	r2,12(r16)
 40033e4:	10000c26 	beq	r2,zero,4003418 <__sfp+0x88>
 40033e8:	80c01d04 	addi	r3,r16,116
 40033ec:	00000206 	br	40033f8 <__sfp+0x68>
 40033f0:	18bfe60f 	ldh	r2,-104(r3)
 40033f4:	10000826 	beq	r2,zero,4003418 <__sfp+0x88>
 40033f8:	213fffc4 	addi	r4,r4,-1
 40033fc:	1c3ffd04 	addi	r16,r3,-12
 4003400:	18c01a04 	addi	r3,r3,104
 4003404:	247ffa1e 	bne	r4,r17,40033f0 <__alt_data_end+0xfabfb3f0>
 4003408:	90800017 	ldw	r2,0(r18)
 400340c:	10001d26 	beq	r2,zero,4003484 <__sfp+0xf4>
 4003410:	1025883a 	mov	r18,r2
 4003414:	003fee06 	br	40033d0 <__alt_data_end+0xfabfb3d0>
 4003418:	00bfffc4 	movi	r2,-1
 400341c:	8080038d 	sth	r2,14(r16)
 4003420:	00800044 	movi	r2,1
 4003424:	8080030d 	sth	r2,12(r16)
 4003428:	80001915 	stw	zero,100(r16)
 400342c:	80000015 	stw	zero,0(r16)
 4003430:	80000215 	stw	zero,8(r16)
 4003434:	80000115 	stw	zero,4(r16)
 4003438:	80000415 	stw	zero,16(r16)
 400343c:	80000515 	stw	zero,20(r16)
 4003440:	80000615 	stw	zero,24(r16)
 4003444:	01800204 	movi	r6,8
 4003448:	000b883a 	mov	r5,zero
 400344c:	81001704 	addi	r4,r16,92
 4003450:	40044940 	call	4004494 <memset>
 4003454:	8005883a 	mov	r2,r16
 4003458:	80000c15 	stw	zero,48(r16)
 400345c:	80000d15 	stw	zero,52(r16)
 4003460:	80001115 	stw	zero,68(r16)
 4003464:	80001215 	stw	zero,72(r16)
 4003468:	dfc00417 	ldw	ra,16(sp)
 400346c:	dcc00317 	ldw	r19,12(sp)
 4003470:	dc800217 	ldw	r18,8(sp)
 4003474:	dc400117 	ldw	r17,4(sp)
 4003478:	dc000017 	ldw	r16,0(sp)
 400347c:	dec00504 	addi	sp,sp,20
 4003480:	f800283a 	ret
 4003484:	01400104 	movi	r5,4
 4003488:	9809883a 	mov	r4,r19
 400348c:	40033280 	call	4003328 <__sfmoreglue>
 4003490:	90800015 	stw	r2,0(r18)
 4003494:	103fde1e 	bne	r2,zero,4003410 <__alt_data_end+0xfabfb410>
 4003498:	00800304 	movi	r2,12
 400349c:	98800015 	stw	r2,0(r19)
 40034a0:	0005883a 	mov	r2,zero
 40034a4:	003ff006 	br	4003468 <__alt_data_end+0xfabfb468>

040034a8 <_cleanup>:
 40034a8:	00810034 	movhi	r2,1024
 40034ac:	1097a004 	addi	r2,r2,24192
 40034b0:	11000017 	ldw	r4,0(r2)
 40034b4:	01410034 	movhi	r5,1024
 40034b8:	29527c04 	addi	r5,r5,18928
 40034bc:	4003a081 	jmpi	4003a08 <_fwalk_reent>

040034c0 <__sinit>:
 40034c0:	20800e17 	ldw	r2,56(r4)
 40034c4:	10000126 	beq	r2,zero,40034cc <__sinit+0xc>
 40034c8:	f800283a 	ret
 40034cc:	40031841 	jmpi	4003184 <__sinit.part.1>

040034d0 <__sfp_lock_acquire>:
 40034d0:	f800283a 	ret

040034d4 <__sfp_lock_release>:
 40034d4:	f800283a 	ret

040034d8 <__sinit_lock_acquire>:
 40034d8:	f800283a 	ret

040034dc <__sinit_lock_release>:
 40034dc:	f800283a 	ret

040034e0 <__fp_lock_all>:
 40034e0:	00810034 	movhi	r2,1024
 40034e4:	1097a104 	addi	r2,r2,24196
 40034e8:	11000017 	ldw	r4,0(r2)
 40034ec:	01410034 	movhi	r5,1024
 40034f0:	294cc804 	addi	r5,r5,13088
 40034f4:	40039441 	jmpi	4003944 <_fwalk>

040034f8 <__fp_unlock_all>:
 40034f8:	00810034 	movhi	r2,1024
 40034fc:	1097a104 	addi	r2,r2,24196
 4003500:	11000017 	ldw	r4,0(r2)
 4003504:	01410034 	movhi	r5,1024
 4003508:	294c5c04 	addi	r5,r5,12656
 400350c:	40039441 	jmpi	4003944 <_fwalk>

04003510 <_malloc_trim_r>:
 4003510:	defffb04 	addi	sp,sp,-20
 4003514:	dcc00315 	stw	r19,12(sp)
 4003518:	04c10034 	movhi	r19,1024
 400351c:	dc800215 	stw	r18,8(sp)
 4003520:	dc400115 	stw	r17,4(sp)
 4003524:	dc000015 	stw	r16,0(sp)
 4003528:	dfc00415 	stw	ra,16(sp)
 400352c:	2821883a 	mov	r16,r5
 4003530:	9cd68e04 	addi	r19,r19,23096
 4003534:	2025883a 	mov	r18,r4
 4003538:	4004df00 	call	4004df0 <__malloc_lock>
 400353c:	98800217 	ldw	r2,8(r19)
 4003540:	14400117 	ldw	r17,4(r2)
 4003544:	00bfff04 	movi	r2,-4
 4003548:	88a2703a 	and	r17,r17,r2
 400354c:	8c21c83a 	sub	r16,r17,r16
 4003550:	8403fbc4 	addi	r16,r16,4079
 4003554:	8020d33a 	srli	r16,r16,12
 4003558:	0083ffc4 	movi	r2,4095
 400355c:	843fffc4 	addi	r16,r16,-1
 4003560:	8020933a 	slli	r16,r16,12
 4003564:	1400060e 	bge	r2,r16,4003580 <_malloc_trim_r+0x70>
 4003568:	000b883a 	mov	r5,zero
 400356c:	9009883a 	mov	r4,r18
 4003570:	40047ac0 	call	40047ac <_sbrk_r>
 4003574:	98c00217 	ldw	r3,8(r19)
 4003578:	1c47883a 	add	r3,r3,r17
 400357c:	10c00a26 	beq	r2,r3,40035a8 <_malloc_trim_r+0x98>
 4003580:	9009883a 	mov	r4,r18
 4003584:	4004df40 	call	4004df4 <__malloc_unlock>
 4003588:	0005883a 	mov	r2,zero
 400358c:	dfc00417 	ldw	ra,16(sp)
 4003590:	dcc00317 	ldw	r19,12(sp)
 4003594:	dc800217 	ldw	r18,8(sp)
 4003598:	dc400117 	ldw	r17,4(sp)
 400359c:	dc000017 	ldw	r16,0(sp)
 40035a0:	dec00504 	addi	sp,sp,20
 40035a4:	f800283a 	ret
 40035a8:	040bc83a 	sub	r5,zero,r16
 40035ac:	9009883a 	mov	r4,r18
 40035b0:	40047ac0 	call	40047ac <_sbrk_r>
 40035b4:	00ffffc4 	movi	r3,-1
 40035b8:	10c00d26 	beq	r2,r3,40035f0 <_malloc_trim_r+0xe0>
 40035bc:	00c10034 	movhi	r3,1024
 40035c0:	18daa004 	addi	r3,r3,27264
 40035c4:	18800017 	ldw	r2,0(r3)
 40035c8:	99000217 	ldw	r4,8(r19)
 40035cc:	8c23c83a 	sub	r17,r17,r16
 40035d0:	8c400054 	ori	r17,r17,1
 40035d4:	1421c83a 	sub	r16,r2,r16
 40035d8:	24400115 	stw	r17,4(r4)
 40035dc:	9009883a 	mov	r4,r18
 40035e0:	1c000015 	stw	r16,0(r3)
 40035e4:	4004df40 	call	4004df4 <__malloc_unlock>
 40035e8:	00800044 	movi	r2,1
 40035ec:	003fe706 	br	400358c <__alt_data_end+0xfabfb58c>
 40035f0:	000b883a 	mov	r5,zero
 40035f4:	9009883a 	mov	r4,r18
 40035f8:	40047ac0 	call	40047ac <_sbrk_r>
 40035fc:	99000217 	ldw	r4,8(r19)
 4003600:	014003c4 	movi	r5,15
 4003604:	1107c83a 	sub	r3,r2,r4
 4003608:	28ffdd0e 	bge	r5,r3,4003580 <__alt_data_end+0xfabfb580>
 400360c:	01410034 	movhi	r5,1024
 4003610:	2957a204 	addi	r5,r5,24200
 4003614:	29400017 	ldw	r5,0(r5)
 4003618:	18c00054 	ori	r3,r3,1
 400361c:	20c00115 	stw	r3,4(r4)
 4003620:	00c10034 	movhi	r3,1024
 4003624:	1145c83a 	sub	r2,r2,r5
 4003628:	18daa004 	addi	r3,r3,27264
 400362c:	18800015 	stw	r2,0(r3)
 4003630:	003fd306 	br	4003580 <__alt_data_end+0xfabfb580>

04003634 <_free_r>:
 4003634:	28004126 	beq	r5,zero,400373c <_free_r+0x108>
 4003638:	defffd04 	addi	sp,sp,-12
 400363c:	dc400115 	stw	r17,4(sp)
 4003640:	dc000015 	stw	r16,0(sp)
 4003644:	2023883a 	mov	r17,r4
 4003648:	2821883a 	mov	r16,r5
 400364c:	dfc00215 	stw	ra,8(sp)
 4003650:	4004df00 	call	4004df0 <__malloc_lock>
 4003654:	81ffff17 	ldw	r7,-4(r16)
 4003658:	00bfff84 	movi	r2,-2
 400365c:	01010034 	movhi	r4,1024
 4003660:	81bffe04 	addi	r6,r16,-8
 4003664:	3884703a 	and	r2,r7,r2
 4003668:	21168e04 	addi	r4,r4,23096
 400366c:	308b883a 	add	r5,r6,r2
 4003670:	2a400117 	ldw	r9,4(r5)
 4003674:	22000217 	ldw	r8,8(r4)
 4003678:	00ffff04 	movi	r3,-4
 400367c:	48c6703a 	and	r3,r9,r3
 4003680:	2a005726 	beq	r5,r8,40037e0 <_free_r+0x1ac>
 4003684:	28c00115 	stw	r3,4(r5)
 4003688:	39c0004c 	andi	r7,r7,1
 400368c:	3800091e 	bne	r7,zero,40036b4 <_free_r+0x80>
 4003690:	823ffe17 	ldw	r8,-8(r16)
 4003694:	22400204 	addi	r9,r4,8
 4003698:	320dc83a 	sub	r6,r6,r8
 400369c:	31c00217 	ldw	r7,8(r6)
 40036a0:	1205883a 	add	r2,r2,r8
 40036a4:	3a406526 	beq	r7,r9,400383c <_free_r+0x208>
 40036a8:	32000317 	ldw	r8,12(r6)
 40036ac:	3a000315 	stw	r8,12(r7)
 40036b0:	41c00215 	stw	r7,8(r8)
 40036b4:	28cf883a 	add	r7,r5,r3
 40036b8:	39c00117 	ldw	r7,4(r7)
 40036bc:	39c0004c 	andi	r7,r7,1
 40036c0:	38003a26 	beq	r7,zero,40037ac <_free_r+0x178>
 40036c4:	10c00054 	ori	r3,r2,1
 40036c8:	30c00115 	stw	r3,4(r6)
 40036cc:	3087883a 	add	r3,r6,r2
 40036d0:	18800015 	stw	r2,0(r3)
 40036d4:	00c07fc4 	movi	r3,511
 40036d8:	18801936 	bltu	r3,r2,4003740 <_free_r+0x10c>
 40036dc:	1004d0fa 	srli	r2,r2,3
 40036e0:	01c00044 	movi	r7,1
 40036e4:	21400117 	ldw	r5,4(r4)
 40036e8:	10c00044 	addi	r3,r2,1
 40036ec:	18c7883a 	add	r3,r3,r3
 40036f0:	1005d0ba 	srai	r2,r2,2
 40036f4:	18c7883a 	add	r3,r3,r3
 40036f8:	18c7883a 	add	r3,r3,r3
 40036fc:	1907883a 	add	r3,r3,r4
 4003700:	3884983a 	sll	r2,r7,r2
 4003704:	19c00017 	ldw	r7,0(r3)
 4003708:	1a3ffe04 	addi	r8,r3,-8
 400370c:	1144b03a 	or	r2,r2,r5
 4003710:	32000315 	stw	r8,12(r6)
 4003714:	31c00215 	stw	r7,8(r6)
 4003718:	20800115 	stw	r2,4(r4)
 400371c:	19800015 	stw	r6,0(r3)
 4003720:	39800315 	stw	r6,12(r7)
 4003724:	8809883a 	mov	r4,r17
 4003728:	dfc00217 	ldw	ra,8(sp)
 400372c:	dc400117 	ldw	r17,4(sp)
 4003730:	dc000017 	ldw	r16,0(sp)
 4003734:	dec00304 	addi	sp,sp,12
 4003738:	4004df41 	jmpi	4004df4 <__malloc_unlock>
 400373c:	f800283a 	ret
 4003740:	100ad27a 	srli	r5,r2,9
 4003744:	00c00104 	movi	r3,4
 4003748:	19404a36 	bltu	r3,r5,4003874 <_free_r+0x240>
 400374c:	100ad1ba 	srli	r5,r2,6
 4003750:	28c00e44 	addi	r3,r5,57
 4003754:	18c7883a 	add	r3,r3,r3
 4003758:	29400e04 	addi	r5,r5,56
 400375c:	18c7883a 	add	r3,r3,r3
 4003760:	18c7883a 	add	r3,r3,r3
 4003764:	1909883a 	add	r4,r3,r4
 4003768:	20c00017 	ldw	r3,0(r4)
 400376c:	01c10034 	movhi	r7,1024
 4003770:	213ffe04 	addi	r4,r4,-8
 4003774:	39d68e04 	addi	r7,r7,23096
 4003778:	20c04426 	beq	r4,r3,400388c <_free_r+0x258>
 400377c:	01ffff04 	movi	r7,-4
 4003780:	19400117 	ldw	r5,4(r3)
 4003784:	29ca703a 	and	r5,r5,r7
 4003788:	1140022e 	bgeu	r2,r5,4003794 <_free_r+0x160>
 400378c:	18c00217 	ldw	r3,8(r3)
 4003790:	20fffb1e 	bne	r4,r3,4003780 <__alt_data_end+0xfabfb780>
 4003794:	19000317 	ldw	r4,12(r3)
 4003798:	31000315 	stw	r4,12(r6)
 400379c:	30c00215 	stw	r3,8(r6)
 40037a0:	21800215 	stw	r6,8(r4)
 40037a4:	19800315 	stw	r6,12(r3)
 40037a8:	003fde06 	br	4003724 <__alt_data_end+0xfabfb724>
 40037ac:	29c00217 	ldw	r7,8(r5)
 40037b0:	10c5883a 	add	r2,r2,r3
 40037b4:	00c10034 	movhi	r3,1024
 40037b8:	18d69004 	addi	r3,r3,23104
 40037bc:	38c03b26 	beq	r7,r3,40038ac <_free_r+0x278>
 40037c0:	2a000317 	ldw	r8,12(r5)
 40037c4:	11400054 	ori	r5,r2,1
 40037c8:	3087883a 	add	r3,r6,r2
 40037cc:	3a000315 	stw	r8,12(r7)
 40037d0:	41c00215 	stw	r7,8(r8)
 40037d4:	31400115 	stw	r5,4(r6)
 40037d8:	18800015 	stw	r2,0(r3)
 40037dc:	003fbd06 	br	40036d4 <__alt_data_end+0xfabfb6d4>
 40037e0:	39c0004c 	andi	r7,r7,1
 40037e4:	10c5883a 	add	r2,r2,r3
 40037e8:	3800071e 	bne	r7,zero,4003808 <_free_r+0x1d4>
 40037ec:	81fffe17 	ldw	r7,-8(r16)
 40037f0:	31cdc83a 	sub	r6,r6,r7
 40037f4:	30c00317 	ldw	r3,12(r6)
 40037f8:	31400217 	ldw	r5,8(r6)
 40037fc:	11c5883a 	add	r2,r2,r7
 4003800:	28c00315 	stw	r3,12(r5)
 4003804:	19400215 	stw	r5,8(r3)
 4003808:	10c00054 	ori	r3,r2,1
 400380c:	30c00115 	stw	r3,4(r6)
 4003810:	00c10034 	movhi	r3,1024
 4003814:	18d7a304 	addi	r3,r3,24204
 4003818:	18c00017 	ldw	r3,0(r3)
 400381c:	21800215 	stw	r6,8(r4)
 4003820:	10ffc036 	bltu	r2,r3,4003724 <__alt_data_end+0xfabfb724>
 4003824:	00810034 	movhi	r2,1024
 4003828:	109a9f04 	addi	r2,r2,27260
 400382c:	11400017 	ldw	r5,0(r2)
 4003830:	8809883a 	mov	r4,r17
 4003834:	40035100 	call	4003510 <_malloc_trim_r>
 4003838:	003fba06 	br	4003724 <__alt_data_end+0xfabfb724>
 400383c:	28c9883a 	add	r4,r5,r3
 4003840:	21000117 	ldw	r4,4(r4)
 4003844:	2100004c 	andi	r4,r4,1
 4003848:	2000391e 	bne	r4,zero,4003930 <_free_r+0x2fc>
 400384c:	29c00217 	ldw	r7,8(r5)
 4003850:	29000317 	ldw	r4,12(r5)
 4003854:	1885883a 	add	r2,r3,r2
 4003858:	10c00054 	ori	r3,r2,1
 400385c:	39000315 	stw	r4,12(r7)
 4003860:	21c00215 	stw	r7,8(r4)
 4003864:	30c00115 	stw	r3,4(r6)
 4003868:	308d883a 	add	r6,r6,r2
 400386c:	30800015 	stw	r2,0(r6)
 4003870:	003fac06 	br	4003724 <__alt_data_end+0xfabfb724>
 4003874:	00c00504 	movi	r3,20
 4003878:	19401536 	bltu	r3,r5,40038d0 <_free_r+0x29c>
 400387c:	28c01704 	addi	r3,r5,92
 4003880:	18c7883a 	add	r3,r3,r3
 4003884:	294016c4 	addi	r5,r5,91
 4003888:	003fb406 	br	400375c <__alt_data_end+0xfabfb75c>
 400388c:	280bd0ba 	srai	r5,r5,2
 4003890:	00c00044 	movi	r3,1
 4003894:	38800117 	ldw	r2,4(r7)
 4003898:	194a983a 	sll	r5,r3,r5
 400389c:	2007883a 	mov	r3,r4
 40038a0:	2884b03a 	or	r2,r5,r2
 40038a4:	38800115 	stw	r2,4(r7)
 40038a8:	003fbb06 	br	4003798 <__alt_data_end+0xfabfb798>
 40038ac:	21800515 	stw	r6,20(r4)
 40038b0:	21800415 	stw	r6,16(r4)
 40038b4:	10c00054 	ori	r3,r2,1
 40038b8:	31c00315 	stw	r7,12(r6)
 40038bc:	31c00215 	stw	r7,8(r6)
 40038c0:	30c00115 	stw	r3,4(r6)
 40038c4:	308d883a 	add	r6,r6,r2
 40038c8:	30800015 	stw	r2,0(r6)
 40038cc:	003f9506 	br	4003724 <__alt_data_end+0xfabfb724>
 40038d0:	00c01504 	movi	r3,84
 40038d4:	19400536 	bltu	r3,r5,40038ec <_free_r+0x2b8>
 40038d8:	100ad33a 	srli	r5,r2,12
 40038dc:	28c01bc4 	addi	r3,r5,111
 40038e0:	18c7883a 	add	r3,r3,r3
 40038e4:	29401b84 	addi	r5,r5,110
 40038e8:	003f9c06 	br	400375c <__alt_data_end+0xfabfb75c>
 40038ec:	00c05504 	movi	r3,340
 40038f0:	19400536 	bltu	r3,r5,4003908 <_free_r+0x2d4>
 40038f4:	100ad3fa 	srli	r5,r2,15
 40038f8:	28c01e04 	addi	r3,r5,120
 40038fc:	18c7883a 	add	r3,r3,r3
 4003900:	29401dc4 	addi	r5,r5,119
 4003904:	003f9506 	br	400375c <__alt_data_end+0xfabfb75c>
 4003908:	00c15504 	movi	r3,1364
 400390c:	19400536 	bltu	r3,r5,4003924 <_free_r+0x2f0>
 4003910:	100ad4ba 	srli	r5,r2,18
 4003914:	28c01f44 	addi	r3,r5,125
 4003918:	18c7883a 	add	r3,r3,r3
 400391c:	29401f04 	addi	r5,r5,124
 4003920:	003f8e06 	br	400375c <__alt_data_end+0xfabfb75c>
 4003924:	00c03f84 	movi	r3,254
 4003928:	01401f84 	movi	r5,126
 400392c:	003f8b06 	br	400375c <__alt_data_end+0xfabfb75c>
 4003930:	10c00054 	ori	r3,r2,1
 4003934:	30c00115 	stw	r3,4(r6)
 4003938:	308d883a 	add	r6,r6,r2
 400393c:	30800015 	stw	r2,0(r6)
 4003940:	003f7806 	br	4003724 <__alt_data_end+0xfabfb724>

04003944 <_fwalk>:
 4003944:	defff704 	addi	sp,sp,-36
 4003948:	dd000415 	stw	r20,16(sp)
 400394c:	dfc00815 	stw	ra,32(sp)
 4003950:	ddc00715 	stw	r23,28(sp)
 4003954:	dd800615 	stw	r22,24(sp)
 4003958:	dd400515 	stw	r21,20(sp)
 400395c:	dcc00315 	stw	r19,12(sp)
 4003960:	dc800215 	stw	r18,8(sp)
 4003964:	dc400115 	stw	r17,4(sp)
 4003968:	dc000015 	stw	r16,0(sp)
 400396c:	2500b804 	addi	r20,r4,736
 4003970:	a0002326 	beq	r20,zero,4003a00 <_fwalk+0xbc>
 4003974:	282b883a 	mov	r21,r5
 4003978:	002f883a 	mov	r23,zero
 400397c:	05800044 	movi	r22,1
 4003980:	04ffffc4 	movi	r19,-1
 4003984:	a4400117 	ldw	r17,4(r20)
 4003988:	a4800217 	ldw	r18,8(r20)
 400398c:	8c7fffc4 	addi	r17,r17,-1
 4003990:	88000d16 	blt	r17,zero,40039c8 <_fwalk+0x84>
 4003994:	94000304 	addi	r16,r18,12
 4003998:	94800384 	addi	r18,r18,14
 400399c:	8080000b 	ldhu	r2,0(r16)
 40039a0:	8c7fffc4 	addi	r17,r17,-1
 40039a4:	813ffd04 	addi	r4,r16,-12
 40039a8:	b080042e 	bgeu	r22,r2,40039bc <_fwalk+0x78>
 40039ac:	9080000f 	ldh	r2,0(r18)
 40039b0:	14c00226 	beq	r2,r19,40039bc <_fwalk+0x78>
 40039b4:	a83ee83a 	callr	r21
 40039b8:	b8aeb03a 	or	r23,r23,r2
 40039bc:	84001a04 	addi	r16,r16,104
 40039c0:	94801a04 	addi	r18,r18,104
 40039c4:	8cfff51e 	bne	r17,r19,400399c <__alt_data_end+0xfabfb99c>
 40039c8:	a5000017 	ldw	r20,0(r20)
 40039cc:	a03fed1e 	bne	r20,zero,4003984 <__alt_data_end+0xfabfb984>
 40039d0:	b805883a 	mov	r2,r23
 40039d4:	dfc00817 	ldw	ra,32(sp)
 40039d8:	ddc00717 	ldw	r23,28(sp)
 40039dc:	dd800617 	ldw	r22,24(sp)
 40039e0:	dd400517 	ldw	r21,20(sp)
 40039e4:	dd000417 	ldw	r20,16(sp)
 40039e8:	dcc00317 	ldw	r19,12(sp)
 40039ec:	dc800217 	ldw	r18,8(sp)
 40039f0:	dc400117 	ldw	r17,4(sp)
 40039f4:	dc000017 	ldw	r16,0(sp)
 40039f8:	dec00904 	addi	sp,sp,36
 40039fc:	f800283a 	ret
 4003a00:	002f883a 	mov	r23,zero
 4003a04:	003ff206 	br	40039d0 <__alt_data_end+0xfabfb9d0>

04003a08 <_fwalk_reent>:
 4003a08:	defff704 	addi	sp,sp,-36
 4003a0c:	dd000415 	stw	r20,16(sp)
 4003a10:	dfc00815 	stw	ra,32(sp)
 4003a14:	ddc00715 	stw	r23,28(sp)
 4003a18:	dd800615 	stw	r22,24(sp)
 4003a1c:	dd400515 	stw	r21,20(sp)
 4003a20:	dcc00315 	stw	r19,12(sp)
 4003a24:	dc800215 	stw	r18,8(sp)
 4003a28:	dc400115 	stw	r17,4(sp)
 4003a2c:	dc000015 	stw	r16,0(sp)
 4003a30:	2500b804 	addi	r20,r4,736
 4003a34:	a0002326 	beq	r20,zero,4003ac4 <_fwalk_reent+0xbc>
 4003a38:	282b883a 	mov	r21,r5
 4003a3c:	2027883a 	mov	r19,r4
 4003a40:	002f883a 	mov	r23,zero
 4003a44:	05800044 	movi	r22,1
 4003a48:	04bfffc4 	movi	r18,-1
 4003a4c:	a4400117 	ldw	r17,4(r20)
 4003a50:	a4000217 	ldw	r16,8(r20)
 4003a54:	8c7fffc4 	addi	r17,r17,-1
 4003a58:	88000c16 	blt	r17,zero,4003a8c <_fwalk_reent+0x84>
 4003a5c:	84000304 	addi	r16,r16,12
 4003a60:	8080000b 	ldhu	r2,0(r16)
 4003a64:	8c7fffc4 	addi	r17,r17,-1
 4003a68:	817ffd04 	addi	r5,r16,-12
 4003a6c:	b080052e 	bgeu	r22,r2,4003a84 <_fwalk_reent+0x7c>
 4003a70:	8080008f 	ldh	r2,2(r16)
 4003a74:	9809883a 	mov	r4,r19
 4003a78:	14800226 	beq	r2,r18,4003a84 <_fwalk_reent+0x7c>
 4003a7c:	a83ee83a 	callr	r21
 4003a80:	b8aeb03a 	or	r23,r23,r2
 4003a84:	84001a04 	addi	r16,r16,104
 4003a88:	8cbff51e 	bne	r17,r18,4003a60 <__alt_data_end+0xfabfba60>
 4003a8c:	a5000017 	ldw	r20,0(r20)
 4003a90:	a03fee1e 	bne	r20,zero,4003a4c <__alt_data_end+0xfabfba4c>
 4003a94:	b805883a 	mov	r2,r23
 4003a98:	dfc00817 	ldw	ra,32(sp)
 4003a9c:	ddc00717 	ldw	r23,28(sp)
 4003aa0:	dd800617 	ldw	r22,24(sp)
 4003aa4:	dd400517 	ldw	r21,20(sp)
 4003aa8:	dd000417 	ldw	r20,16(sp)
 4003aac:	dcc00317 	ldw	r19,12(sp)
 4003ab0:	dc800217 	ldw	r18,8(sp)
 4003ab4:	dc400117 	ldw	r17,4(sp)
 4003ab8:	dc000017 	ldw	r16,0(sp)
 4003abc:	dec00904 	addi	sp,sp,36
 4003ac0:	f800283a 	ret
 4003ac4:	002f883a 	mov	r23,zero
 4003ac8:	003ff206 	br	4003a94 <__alt_data_end+0xfabfba94>

04003acc <__smakebuf_r>:
 4003acc:	2880030b 	ldhu	r2,12(r5)
 4003ad0:	10c0008c 	andi	r3,r2,2
 4003ad4:	1800411e 	bne	r3,zero,4003bdc <__smakebuf_r+0x110>
 4003ad8:	deffec04 	addi	sp,sp,-80
 4003adc:	dc000f15 	stw	r16,60(sp)
 4003ae0:	2821883a 	mov	r16,r5
 4003ae4:	2940038f 	ldh	r5,14(r5)
 4003ae8:	dc401015 	stw	r17,64(sp)
 4003aec:	dfc01315 	stw	ra,76(sp)
 4003af0:	dcc01215 	stw	r19,72(sp)
 4003af4:	dc801115 	stw	r18,68(sp)
 4003af8:	2023883a 	mov	r17,r4
 4003afc:	28001c16 	blt	r5,zero,4003b70 <__smakebuf_r+0xa4>
 4003b00:	d80d883a 	mov	r6,sp
 4003b04:	4004af40 	call	4004af4 <_fstat_r>
 4003b08:	10001816 	blt	r2,zero,4003b6c <__smakebuf_r+0xa0>
 4003b0c:	d8800117 	ldw	r2,4(sp)
 4003b10:	00e00014 	movui	r3,32768
 4003b14:	10bc000c 	andi	r2,r2,61440
 4003b18:	14c80020 	cmpeqi	r19,r2,8192
 4003b1c:	10c03726 	beq	r2,r3,4003bfc <__smakebuf_r+0x130>
 4003b20:	80c0030b 	ldhu	r3,12(r16)
 4003b24:	18c20014 	ori	r3,r3,2048
 4003b28:	80c0030d 	sth	r3,12(r16)
 4003b2c:	00c80004 	movi	r3,8192
 4003b30:	10c0521e 	bne	r2,r3,4003c7c <__smakebuf_r+0x1b0>
 4003b34:	8140038f 	ldh	r5,14(r16)
 4003b38:	8809883a 	mov	r4,r17
 4003b3c:	4004b500 	call	4004b50 <_isatty_r>
 4003b40:	10004c26 	beq	r2,zero,4003c74 <__smakebuf_r+0x1a8>
 4003b44:	8080030b 	ldhu	r2,12(r16)
 4003b48:	80c010c4 	addi	r3,r16,67
 4003b4c:	80c00015 	stw	r3,0(r16)
 4003b50:	10800054 	ori	r2,r2,1
 4003b54:	8080030d 	sth	r2,12(r16)
 4003b58:	00800044 	movi	r2,1
 4003b5c:	80c00415 	stw	r3,16(r16)
 4003b60:	80800515 	stw	r2,20(r16)
 4003b64:	04810004 	movi	r18,1024
 4003b68:	00000706 	br	4003b88 <__smakebuf_r+0xbc>
 4003b6c:	8080030b 	ldhu	r2,12(r16)
 4003b70:	10c0200c 	andi	r3,r2,128
 4003b74:	18001f1e 	bne	r3,zero,4003bf4 <__smakebuf_r+0x128>
 4003b78:	04810004 	movi	r18,1024
 4003b7c:	10820014 	ori	r2,r2,2048
 4003b80:	8080030d 	sth	r2,12(r16)
 4003b84:	0027883a 	mov	r19,zero
 4003b88:	900b883a 	mov	r5,r18
 4003b8c:	8809883a 	mov	r4,r17
 4003b90:	4003c880 	call	4003c88 <_malloc_r>
 4003b94:	10002c26 	beq	r2,zero,4003c48 <__smakebuf_r+0x17c>
 4003b98:	80c0030b 	ldhu	r3,12(r16)
 4003b9c:	01010034 	movhi	r4,1024
 4003ba0:	210c5e04 	addi	r4,r4,12664
 4003ba4:	89000f15 	stw	r4,60(r17)
 4003ba8:	18c02014 	ori	r3,r3,128
 4003bac:	80c0030d 	sth	r3,12(r16)
 4003bb0:	80800015 	stw	r2,0(r16)
 4003bb4:	80800415 	stw	r2,16(r16)
 4003bb8:	84800515 	stw	r18,20(r16)
 4003bbc:	98001a1e 	bne	r19,zero,4003c28 <__smakebuf_r+0x15c>
 4003bc0:	dfc01317 	ldw	ra,76(sp)
 4003bc4:	dcc01217 	ldw	r19,72(sp)
 4003bc8:	dc801117 	ldw	r18,68(sp)
 4003bcc:	dc401017 	ldw	r17,64(sp)
 4003bd0:	dc000f17 	ldw	r16,60(sp)
 4003bd4:	dec01404 	addi	sp,sp,80
 4003bd8:	f800283a 	ret
 4003bdc:	288010c4 	addi	r2,r5,67
 4003be0:	28800015 	stw	r2,0(r5)
 4003be4:	28800415 	stw	r2,16(r5)
 4003be8:	00800044 	movi	r2,1
 4003bec:	28800515 	stw	r2,20(r5)
 4003bf0:	f800283a 	ret
 4003bf4:	04801004 	movi	r18,64
 4003bf8:	003fe006 	br	4003b7c <__alt_data_end+0xfabfbb7c>
 4003bfc:	81000a17 	ldw	r4,40(r16)
 4003c00:	00c10034 	movhi	r3,1024
 4003c04:	18d23604 	addi	r3,r3,18648
 4003c08:	20ffc51e 	bne	r4,r3,4003b20 <__alt_data_end+0xfabfbb20>
 4003c0c:	8080030b 	ldhu	r2,12(r16)
 4003c10:	04810004 	movi	r18,1024
 4003c14:	84801315 	stw	r18,76(r16)
 4003c18:	1484b03a 	or	r2,r2,r18
 4003c1c:	8080030d 	sth	r2,12(r16)
 4003c20:	0027883a 	mov	r19,zero
 4003c24:	003fd806 	br	4003b88 <__alt_data_end+0xfabfbb88>
 4003c28:	8140038f 	ldh	r5,14(r16)
 4003c2c:	8809883a 	mov	r4,r17
 4003c30:	4004b500 	call	4004b50 <_isatty_r>
 4003c34:	103fe226 	beq	r2,zero,4003bc0 <__alt_data_end+0xfabfbbc0>
 4003c38:	8080030b 	ldhu	r2,12(r16)
 4003c3c:	10800054 	ori	r2,r2,1
 4003c40:	8080030d 	sth	r2,12(r16)
 4003c44:	003fde06 	br	4003bc0 <__alt_data_end+0xfabfbbc0>
 4003c48:	8080030b 	ldhu	r2,12(r16)
 4003c4c:	10c0800c 	andi	r3,r2,512
 4003c50:	183fdb1e 	bne	r3,zero,4003bc0 <__alt_data_end+0xfabfbbc0>
 4003c54:	10800094 	ori	r2,r2,2
 4003c58:	80c010c4 	addi	r3,r16,67
 4003c5c:	8080030d 	sth	r2,12(r16)
 4003c60:	00800044 	movi	r2,1
 4003c64:	80c00015 	stw	r3,0(r16)
 4003c68:	80c00415 	stw	r3,16(r16)
 4003c6c:	80800515 	stw	r2,20(r16)
 4003c70:	003fd306 	br	4003bc0 <__alt_data_end+0xfabfbbc0>
 4003c74:	04810004 	movi	r18,1024
 4003c78:	003fc306 	br	4003b88 <__alt_data_end+0xfabfbb88>
 4003c7c:	0027883a 	mov	r19,zero
 4003c80:	04810004 	movi	r18,1024
 4003c84:	003fc006 	br	4003b88 <__alt_data_end+0xfabfbb88>

04003c88 <_malloc_r>:
 4003c88:	defff504 	addi	sp,sp,-44
 4003c8c:	dc800315 	stw	r18,12(sp)
 4003c90:	dfc00a15 	stw	ra,40(sp)
 4003c94:	df000915 	stw	fp,36(sp)
 4003c98:	ddc00815 	stw	r23,32(sp)
 4003c9c:	dd800715 	stw	r22,28(sp)
 4003ca0:	dd400615 	stw	r21,24(sp)
 4003ca4:	dd000515 	stw	r20,20(sp)
 4003ca8:	dcc00415 	stw	r19,16(sp)
 4003cac:	dc400215 	stw	r17,8(sp)
 4003cb0:	dc000115 	stw	r16,4(sp)
 4003cb4:	288002c4 	addi	r2,r5,11
 4003cb8:	00c00584 	movi	r3,22
 4003cbc:	2025883a 	mov	r18,r4
 4003cc0:	18807f2e 	bgeu	r3,r2,4003ec0 <_malloc_r+0x238>
 4003cc4:	047ffe04 	movi	r17,-8
 4003cc8:	1462703a 	and	r17,r2,r17
 4003ccc:	8800a316 	blt	r17,zero,4003f5c <_malloc_r+0x2d4>
 4003cd0:	8940a236 	bltu	r17,r5,4003f5c <_malloc_r+0x2d4>
 4003cd4:	4004df00 	call	4004df0 <__malloc_lock>
 4003cd8:	00807dc4 	movi	r2,503
 4003cdc:	1441e92e 	bgeu	r2,r17,4004484 <_malloc_r+0x7fc>
 4003ce0:	8804d27a 	srli	r2,r17,9
 4003ce4:	1000a126 	beq	r2,zero,4003f6c <_malloc_r+0x2e4>
 4003ce8:	00c00104 	movi	r3,4
 4003cec:	18811e36 	bltu	r3,r2,4004168 <_malloc_r+0x4e0>
 4003cf0:	8804d1ba 	srli	r2,r17,6
 4003cf4:	12000e44 	addi	r8,r2,57
 4003cf8:	11c00e04 	addi	r7,r2,56
 4003cfc:	4209883a 	add	r4,r8,r8
 4003d00:	04c10034 	movhi	r19,1024
 4003d04:	2109883a 	add	r4,r4,r4
 4003d08:	9cd68e04 	addi	r19,r19,23096
 4003d0c:	2109883a 	add	r4,r4,r4
 4003d10:	9909883a 	add	r4,r19,r4
 4003d14:	24000117 	ldw	r16,4(r4)
 4003d18:	213ffe04 	addi	r4,r4,-8
 4003d1c:	24009726 	beq	r4,r16,4003f7c <_malloc_r+0x2f4>
 4003d20:	80800117 	ldw	r2,4(r16)
 4003d24:	01bfff04 	movi	r6,-4
 4003d28:	014003c4 	movi	r5,15
 4003d2c:	1184703a 	and	r2,r2,r6
 4003d30:	1447c83a 	sub	r3,r2,r17
 4003d34:	28c00716 	blt	r5,r3,4003d54 <_malloc_r+0xcc>
 4003d38:	1800920e 	bge	r3,zero,4003f84 <_malloc_r+0x2fc>
 4003d3c:	84000317 	ldw	r16,12(r16)
 4003d40:	24008e26 	beq	r4,r16,4003f7c <_malloc_r+0x2f4>
 4003d44:	80800117 	ldw	r2,4(r16)
 4003d48:	1184703a 	and	r2,r2,r6
 4003d4c:	1447c83a 	sub	r3,r2,r17
 4003d50:	28fff90e 	bge	r5,r3,4003d38 <__alt_data_end+0xfabfbd38>
 4003d54:	3809883a 	mov	r4,r7
 4003d58:	01810034 	movhi	r6,1024
 4003d5c:	9c000417 	ldw	r16,16(r19)
 4003d60:	31968e04 	addi	r6,r6,23096
 4003d64:	32000204 	addi	r8,r6,8
 4003d68:	82013426 	beq	r16,r8,400423c <_malloc_r+0x5b4>
 4003d6c:	80c00117 	ldw	r3,4(r16)
 4003d70:	00bfff04 	movi	r2,-4
 4003d74:	188e703a 	and	r7,r3,r2
 4003d78:	3c45c83a 	sub	r2,r7,r17
 4003d7c:	00c003c4 	movi	r3,15
 4003d80:	18811f16 	blt	r3,r2,4004200 <_malloc_r+0x578>
 4003d84:	32000515 	stw	r8,20(r6)
 4003d88:	32000415 	stw	r8,16(r6)
 4003d8c:	10007f0e 	bge	r2,zero,4003f8c <_malloc_r+0x304>
 4003d90:	00807fc4 	movi	r2,511
 4003d94:	11c0fd36 	bltu	r2,r7,400418c <_malloc_r+0x504>
 4003d98:	3806d0fa 	srli	r3,r7,3
 4003d9c:	01c00044 	movi	r7,1
 4003da0:	30800117 	ldw	r2,4(r6)
 4003da4:	19400044 	addi	r5,r3,1
 4003da8:	294b883a 	add	r5,r5,r5
 4003dac:	1807d0ba 	srai	r3,r3,2
 4003db0:	294b883a 	add	r5,r5,r5
 4003db4:	294b883a 	add	r5,r5,r5
 4003db8:	298b883a 	add	r5,r5,r6
 4003dbc:	38c6983a 	sll	r3,r7,r3
 4003dc0:	29c00017 	ldw	r7,0(r5)
 4003dc4:	2a7ffe04 	addi	r9,r5,-8
 4003dc8:	1886b03a 	or	r3,r3,r2
 4003dcc:	82400315 	stw	r9,12(r16)
 4003dd0:	81c00215 	stw	r7,8(r16)
 4003dd4:	30c00115 	stw	r3,4(r6)
 4003dd8:	2c000015 	stw	r16,0(r5)
 4003ddc:	3c000315 	stw	r16,12(r7)
 4003de0:	2005d0ba 	srai	r2,r4,2
 4003de4:	01400044 	movi	r5,1
 4003de8:	288a983a 	sll	r5,r5,r2
 4003dec:	19406f36 	bltu	r3,r5,4003fac <_malloc_r+0x324>
 4003df0:	28c4703a 	and	r2,r5,r3
 4003df4:	10000a1e 	bne	r2,zero,4003e20 <_malloc_r+0x198>
 4003df8:	00bfff04 	movi	r2,-4
 4003dfc:	294b883a 	add	r5,r5,r5
 4003e00:	2088703a 	and	r4,r4,r2
 4003e04:	28c4703a 	and	r2,r5,r3
 4003e08:	21000104 	addi	r4,r4,4
 4003e0c:	1000041e 	bne	r2,zero,4003e20 <_malloc_r+0x198>
 4003e10:	294b883a 	add	r5,r5,r5
 4003e14:	28c4703a 	and	r2,r5,r3
 4003e18:	21000104 	addi	r4,r4,4
 4003e1c:	103ffc26 	beq	r2,zero,4003e10 <__alt_data_end+0xfabfbe10>
 4003e20:	02bfff04 	movi	r10,-4
 4003e24:	024003c4 	movi	r9,15
 4003e28:	21800044 	addi	r6,r4,1
 4003e2c:	318d883a 	add	r6,r6,r6
 4003e30:	318d883a 	add	r6,r6,r6
 4003e34:	318d883a 	add	r6,r6,r6
 4003e38:	998d883a 	add	r6,r19,r6
 4003e3c:	333ffe04 	addi	r12,r6,-8
 4003e40:	2017883a 	mov	r11,r4
 4003e44:	31800104 	addi	r6,r6,4
 4003e48:	34000017 	ldw	r16,0(r6)
 4003e4c:	31fffd04 	addi	r7,r6,-12
 4003e50:	81c0041e 	bne	r16,r7,4003e64 <_malloc_r+0x1dc>
 4003e54:	0000fb06 	br	4004244 <_malloc_r+0x5bc>
 4003e58:	1801030e 	bge	r3,zero,4004268 <_malloc_r+0x5e0>
 4003e5c:	84000317 	ldw	r16,12(r16)
 4003e60:	81c0f826 	beq	r16,r7,4004244 <_malloc_r+0x5bc>
 4003e64:	80800117 	ldw	r2,4(r16)
 4003e68:	1284703a 	and	r2,r2,r10
 4003e6c:	1447c83a 	sub	r3,r2,r17
 4003e70:	48fff90e 	bge	r9,r3,4003e58 <__alt_data_end+0xfabfbe58>
 4003e74:	80800317 	ldw	r2,12(r16)
 4003e78:	81000217 	ldw	r4,8(r16)
 4003e7c:	89400054 	ori	r5,r17,1
 4003e80:	81400115 	stw	r5,4(r16)
 4003e84:	20800315 	stw	r2,12(r4)
 4003e88:	11000215 	stw	r4,8(r2)
 4003e8c:	8463883a 	add	r17,r16,r17
 4003e90:	9c400515 	stw	r17,20(r19)
 4003e94:	9c400415 	stw	r17,16(r19)
 4003e98:	18800054 	ori	r2,r3,1
 4003e9c:	88800115 	stw	r2,4(r17)
 4003ea0:	8a000315 	stw	r8,12(r17)
 4003ea4:	8a000215 	stw	r8,8(r17)
 4003ea8:	88e3883a 	add	r17,r17,r3
 4003eac:	88c00015 	stw	r3,0(r17)
 4003eb0:	9009883a 	mov	r4,r18
 4003eb4:	4004df40 	call	4004df4 <__malloc_unlock>
 4003eb8:	80800204 	addi	r2,r16,8
 4003ebc:	00001b06 	br	4003f2c <_malloc_r+0x2a4>
 4003ec0:	04400404 	movi	r17,16
 4003ec4:	89402536 	bltu	r17,r5,4003f5c <_malloc_r+0x2d4>
 4003ec8:	4004df00 	call	4004df0 <__malloc_lock>
 4003ecc:	00800184 	movi	r2,6
 4003ed0:	01000084 	movi	r4,2
 4003ed4:	04c10034 	movhi	r19,1024
 4003ed8:	1085883a 	add	r2,r2,r2
 4003edc:	9cd68e04 	addi	r19,r19,23096
 4003ee0:	1085883a 	add	r2,r2,r2
 4003ee4:	9885883a 	add	r2,r19,r2
 4003ee8:	14000117 	ldw	r16,4(r2)
 4003eec:	10fffe04 	addi	r3,r2,-8
 4003ef0:	80c0d926 	beq	r16,r3,4004258 <_malloc_r+0x5d0>
 4003ef4:	80c00117 	ldw	r3,4(r16)
 4003ef8:	81000317 	ldw	r4,12(r16)
 4003efc:	00bfff04 	movi	r2,-4
 4003f00:	1884703a 	and	r2,r3,r2
 4003f04:	81400217 	ldw	r5,8(r16)
 4003f08:	8085883a 	add	r2,r16,r2
 4003f0c:	10c00117 	ldw	r3,4(r2)
 4003f10:	29000315 	stw	r4,12(r5)
 4003f14:	21400215 	stw	r5,8(r4)
 4003f18:	18c00054 	ori	r3,r3,1
 4003f1c:	10c00115 	stw	r3,4(r2)
 4003f20:	9009883a 	mov	r4,r18
 4003f24:	4004df40 	call	4004df4 <__malloc_unlock>
 4003f28:	80800204 	addi	r2,r16,8
 4003f2c:	dfc00a17 	ldw	ra,40(sp)
 4003f30:	df000917 	ldw	fp,36(sp)
 4003f34:	ddc00817 	ldw	r23,32(sp)
 4003f38:	dd800717 	ldw	r22,28(sp)
 4003f3c:	dd400617 	ldw	r21,24(sp)
 4003f40:	dd000517 	ldw	r20,20(sp)
 4003f44:	dcc00417 	ldw	r19,16(sp)
 4003f48:	dc800317 	ldw	r18,12(sp)
 4003f4c:	dc400217 	ldw	r17,8(sp)
 4003f50:	dc000117 	ldw	r16,4(sp)
 4003f54:	dec00b04 	addi	sp,sp,44
 4003f58:	f800283a 	ret
 4003f5c:	00800304 	movi	r2,12
 4003f60:	90800015 	stw	r2,0(r18)
 4003f64:	0005883a 	mov	r2,zero
 4003f68:	003ff006 	br	4003f2c <__alt_data_end+0xfabfbf2c>
 4003f6c:	01002004 	movi	r4,128
 4003f70:	02001004 	movi	r8,64
 4003f74:	01c00fc4 	movi	r7,63
 4003f78:	003f6106 	br	4003d00 <__alt_data_end+0xfabfbd00>
 4003f7c:	4009883a 	mov	r4,r8
 4003f80:	003f7506 	br	4003d58 <__alt_data_end+0xfabfbd58>
 4003f84:	81000317 	ldw	r4,12(r16)
 4003f88:	003fde06 	br	4003f04 <__alt_data_end+0xfabfbf04>
 4003f8c:	81c5883a 	add	r2,r16,r7
 4003f90:	11400117 	ldw	r5,4(r2)
 4003f94:	9009883a 	mov	r4,r18
 4003f98:	29400054 	ori	r5,r5,1
 4003f9c:	11400115 	stw	r5,4(r2)
 4003fa0:	4004df40 	call	4004df4 <__malloc_unlock>
 4003fa4:	80800204 	addi	r2,r16,8
 4003fa8:	003fe006 	br	4003f2c <__alt_data_end+0xfabfbf2c>
 4003fac:	9c000217 	ldw	r16,8(r19)
 4003fb0:	00bfff04 	movi	r2,-4
 4003fb4:	85800117 	ldw	r22,4(r16)
 4003fb8:	b0ac703a 	and	r22,r22,r2
 4003fbc:	b4400336 	bltu	r22,r17,4003fcc <_malloc_r+0x344>
 4003fc0:	b445c83a 	sub	r2,r22,r17
 4003fc4:	00c003c4 	movi	r3,15
 4003fc8:	18805d16 	blt	r3,r2,4004140 <_malloc_r+0x4b8>
 4003fcc:	05c10034 	movhi	r23,1024
 4003fd0:	00810034 	movhi	r2,1024
 4003fd4:	109a9f04 	addi	r2,r2,27260
 4003fd8:	bdd7a204 	addi	r23,r23,24200
 4003fdc:	15400017 	ldw	r21,0(r2)
 4003fe0:	b8c00017 	ldw	r3,0(r23)
 4003fe4:	00bfffc4 	movi	r2,-1
 4003fe8:	858d883a 	add	r6,r16,r22
 4003fec:	8d6b883a 	add	r21,r17,r21
 4003ff0:	1880ea26 	beq	r3,r2,400439c <_malloc_r+0x714>
 4003ff4:	ad4403c4 	addi	r21,r21,4111
 4003ff8:	00bc0004 	movi	r2,-4096
 4003ffc:	a8aa703a 	and	r21,r21,r2
 4004000:	a80b883a 	mov	r5,r21
 4004004:	9009883a 	mov	r4,r18
 4004008:	d9800015 	stw	r6,0(sp)
 400400c:	40047ac0 	call	40047ac <_sbrk_r>
 4004010:	1029883a 	mov	r20,r2
 4004014:	00bfffc4 	movi	r2,-1
 4004018:	d9800017 	ldw	r6,0(sp)
 400401c:	a080e826 	beq	r20,r2,40043c0 <_malloc_r+0x738>
 4004020:	a180a636 	bltu	r20,r6,40042bc <_malloc_r+0x634>
 4004024:	07010034 	movhi	fp,1024
 4004028:	e71aa004 	addi	fp,fp,27264
 400402c:	e0800017 	ldw	r2,0(fp)
 4004030:	a887883a 	add	r3,r21,r2
 4004034:	e0c00015 	stw	r3,0(fp)
 4004038:	3500e626 	beq	r6,r20,40043d4 <_malloc_r+0x74c>
 400403c:	b9000017 	ldw	r4,0(r23)
 4004040:	00bfffc4 	movi	r2,-1
 4004044:	2080ee26 	beq	r4,r2,4004400 <_malloc_r+0x778>
 4004048:	a185c83a 	sub	r2,r20,r6
 400404c:	10c5883a 	add	r2,r2,r3
 4004050:	e0800015 	stw	r2,0(fp)
 4004054:	a0c001cc 	andi	r3,r20,7
 4004058:	1800bc26 	beq	r3,zero,400434c <_malloc_r+0x6c4>
 400405c:	a0e9c83a 	sub	r20,r20,r3
 4004060:	00840204 	movi	r2,4104
 4004064:	a5000204 	addi	r20,r20,8
 4004068:	10c7c83a 	sub	r3,r2,r3
 400406c:	a545883a 	add	r2,r20,r21
 4004070:	1083ffcc 	andi	r2,r2,4095
 4004074:	18abc83a 	sub	r21,r3,r2
 4004078:	a80b883a 	mov	r5,r21
 400407c:	9009883a 	mov	r4,r18
 4004080:	40047ac0 	call	40047ac <_sbrk_r>
 4004084:	00ffffc4 	movi	r3,-1
 4004088:	10c0e126 	beq	r2,r3,4004410 <_malloc_r+0x788>
 400408c:	1505c83a 	sub	r2,r2,r20
 4004090:	1545883a 	add	r2,r2,r21
 4004094:	10800054 	ori	r2,r2,1
 4004098:	e0c00017 	ldw	r3,0(fp)
 400409c:	9d000215 	stw	r20,8(r19)
 40040a0:	a0800115 	stw	r2,4(r20)
 40040a4:	a8c7883a 	add	r3,r21,r3
 40040a8:	e0c00015 	stw	r3,0(fp)
 40040ac:	84c00e26 	beq	r16,r19,40040e8 <_malloc_r+0x460>
 40040b0:	018003c4 	movi	r6,15
 40040b4:	3580a72e 	bgeu	r6,r22,4004354 <_malloc_r+0x6cc>
 40040b8:	81400117 	ldw	r5,4(r16)
 40040bc:	013ffe04 	movi	r4,-8
 40040c0:	b0bffd04 	addi	r2,r22,-12
 40040c4:	1104703a 	and	r2,r2,r4
 40040c8:	2900004c 	andi	r4,r5,1
 40040cc:	2088b03a 	or	r4,r4,r2
 40040d0:	81000115 	stw	r4,4(r16)
 40040d4:	01400144 	movi	r5,5
 40040d8:	8089883a 	add	r4,r16,r2
 40040dc:	21400115 	stw	r5,4(r4)
 40040e0:	21400215 	stw	r5,8(r4)
 40040e4:	3080cd36 	bltu	r6,r2,400441c <_malloc_r+0x794>
 40040e8:	00810034 	movhi	r2,1024
 40040ec:	109a9e04 	addi	r2,r2,27256
 40040f0:	11000017 	ldw	r4,0(r2)
 40040f4:	20c0012e 	bgeu	r4,r3,40040fc <_malloc_r+0x474>
 40040f8:	10c00015 	stw	r3,0(r2)
 40040fc:	00810034 	movhi	r2,1024
 4004100:	109a9d04 	addi	r2,r2,27252
 4004104:	11000017 	ldw	r4,0(r2)
 4004108:	9c000217 	ldw	r16,8(r19)
 400410c:	20c0012e 	bgeu	r4,r3,4004114 <_malloc_r+0x48c>
 4004110:	10c00015 	stw	r3,0(r2)
 4004114:	80c00117 	ldw	r3,4(r16)
 4004118:	00bfff04 	movi	r2,-4
 400411c:	1886703a 	and	r3,r3,r2
 4004120:	1c45c83a 	sub	r2,r3,r17
 4004124:	1c400236 	bltu	r3,r17,4004130 <_malloc_r+0x4a8>
 4004128:	00c003c4 	movi	r3,15
 400412c:	18800416 	blt	r3,r2,4004140 <_malloc_r+0x4b8>
 4004130:	9009883a 	mov	r4,r18
 4004134:	4004df40 	call	4004df4 <__malloc_unlock>
 4004138:	0005883a 	mov	r2,zero
 400413c:	003f7b06 	br	4003f2c <__alt_data_end+0xfabfbf2c>
 4004140:	88c00054 	ori	r3,r17,1
 4004144:	80c00115 	stw	r3,4(r16)
 4004148:	8463883a 	add	r17,r16,r17
 400414c:	10800054 	ori	r2,r2,1
 4004150:	9c400215 	stw	r17,8(r19)
 4004154:	88800115 	stw	r2,4(r17)
 4004158:	9009883a 	mov	r4,r18
 400415c:	4004df40 	call	4004df4 <__malloc_unlock>
 4004160:	80800204 	addi	r2,r16,8
 4004164:	003f7106 	br	4003f2c <__alt_data_end+0xfabfbf2c>
 4004168:	00c00504 	movi	r3,20
 400416c:	18804a2e 	bgeu	r3,r2,4004298 <_malloc_r+0x610>
 4004170:	00c01504 	movi	r3,84
 4004174:	18806e36 	bltu	r3,r2,4004330 <_malloc_r+0x6a8>
 4004178:	8804d33a 	srli	r2,r17,12
 400417c:	12001bc4 	addi	r8,r2,111
 4004180:	11c01b84 	addi	r7,r2,110
 4004184:	4209883a 	add	r4,r8,r8
 4004188:	003edd06 	br	4003d00 <__alt_data_end+0xfabfbd00>
 400418c:	3804d27a 	srli	r2,r7,9
 4004190:	00c00104 	movi	r3,4
 4004194:	1880442e 	bgeu	r3,r2,40042a8 <_malloc_r+0x620>
 4004198:	00c00504 	movi	r3,20
 400419c:	18808136 	bltu	r3,r2,40043a4 <_malloc_r+0x71c>
 40041a0:	11401704 	addi	r5,r2,92
 40041a4:	10c016c4 	addi	r3,r2,91
 40041a8:	294b883a 	add	r5,r5,r5
 40041ac:	294b883a 	add	r5,r5,r5
 40041b0:	294b883a 	add	r5,r5,r5
 40041b4:	994b883a 	add	r5,r19,r5
 40041b8:	28800017 	ldw	r2,0(r5)
 40041bc:	01810034 	movhi	r6,1024
 40041c0:	297ffe04 	addi	r5,r5,-8
 40041c4:	31968e04 	addi	r6,r6,23096
 40041c8:	28806526 	beq	r5,r2,4004360 <_malloc_r+0x6d8>
 40041cc:	01bfff04 	movi	r6,-4
 40041d0:	10c00117 	ldw	r3,4(r2)
 40041d4:	1986703a 	and	r3,r3,r6
 40041d8:	38c0022e 	bgeu	r7,r3,40041e4 <_malloc_r+0x55c>
 40041dc:	10800217 	ldw	r2,8(r2)
 40041e0:	28bffb1e 	bne	r5,r2,40041d0 <__alt_data_end+0xfabfc1d0>
 40041e4:	11400317 	ldw	r5,12(r2)
 40041e8:	98c00117 	ldw	r3,4(r19)
 40041ec:	81400315 	stw	r5,12(r16)
 40041f0:	80800215 	stw	r2,8(r16)
 40041f4:	2c000215 	stw	r16,8(r5)
 40041f8:	14000315 	stw	r16,12(r2)
 40041fc:	003ef806 	br	4003de0 <__alt_data_end+0xfabfbde0>
 4004200:	88c00054 	ori	r3,r17,1
 4004204:	80c00115 	stw	r3,4(r16)
 4004208:	8463883a 	add	r17,r16,r17
 400420c:	34400515 	stw	r17,20(r6)
 4004210:	34400415 	stw	r17,16(r6)
 4004214:	10c00054 	ori	r3,r2,1
 4004218:	8a000315 	stw	r8,12(r17)
 400421c:	8a000215 	stw	r8,8(r17)
 4004220:	88c00115 	stw	r3,4(r17)
 4004224:	88a3883a 	add	r17,r17,r2
 4004228:	88800015 	stw	r2,0(r17)
 400422c:	9009883a 	mov	r4,r18
 4004230:	4004df40 	call	4004df4 <__malloc_unlock>
 4004234:	80800204 	addi	r2,r16,8
 4004238:	003f3c06 	br	4003f2c <__alt_data_end+0xfabfbf2c>
 400423c:	30c00117 	ldw	r3,4(r6)
 4004240:	003ee706 	br	4003de0 <__alt_data_end+0xfabfbde0>
 4004244:	5ac00044 	addi	r11,r11,1
 4004248:	588000cc 	andi	r2,r11,3
 400424c:	31800204 	addi	r6,r6,8
 4004250:	103efd1e 	bne	r2,zero,4003e48 <__alt_data_end+0xfabfbe48>
 4004254:	00002406 	br	40042e8 <_malloc_r+0x660>
 4004258:	14000317 	ldw	r16,12(r2)
 400425c:	143f251e 	bne	r2,r16,4003ef4 <__alt_data_end+0xfabfbef4>
 4004260:	21000084 	addi	r4,r4,2
 4004264:	003ebc06 	br	4003d58 <__alt_data_end+0xfabfbd58>
 4004268:	8085883a 	add	r2,r16,r2
 400426c:	10c00117 	ldw	r3,4(r2)
 4004270:	81000317 	ldw	r4,12(r16)
 4004274:	81400217 	ldw	r5,8(r16)
 4004278:	18c00054 	ori	r3,r3,1
 400427c:	10c00115 	stw	r3,4(r2)
 4004280:	29000315 	stw	r4,12(r5)
 4004284:	21400215 	stw	r5,8(r4)
 4004288:	9009883a 	mov	r4,r18
 400428c:	4004df40 	call	4004df4 <__malloc_unlock>
 4004290:	80800204 	addi	r2,r16,8
 4004294:	003f2506 	br	4003f2c <__alt_data_end+0xfabfbf2c>
 4004298:	12001704 	addi	r8,r2,92
 400429c:	11c016c4 	addi	r7,r2,91
 40042a0:	4209883a 	add	r4,r8,r8
 40042a4:	003e9606 	br	4003d00 <__alt_data_end+0xfabfbd00>
 40042a8:	3804d1ba 	srli	r2,r7,6
 40042ac:	11400e44 	addi	r5,r2,57
 40042b0:	10c00e04 	addi	r3,r2,56
 40042b4:	294b883a 	add	r5,r5,r5
 40042b8:	003fbc06 	br	40041ac <__alt_data_end+0xfabfc1ac>
 40042bc:	84ff5926 	beq	r16,r19,4004024 <__alt_data_end+0xfabfc024>
 40042c0:	00810034 	movhi	r2,1024
 40042c4:	10968e04 	addi	r2,r2,23096
 40042c8:	14000217 	ldw	r16,8(r2)
 40042cc:	00bfff04 	movi	r2,-4
 40042d0:	80c00117 	ldw	r3,4(r16)
 40042d4:	1886703a 	and	r3,r3,r2
 40042d8:	003f9106 	br	4004120 <__alt_data_end+0xfabfc120>
 40042dc:	60800217 	ldw	r2,8(r12)
 40042e0:	213fffc4 	addi	r4,r4,-1
 40042e4:	1300651e 	bne	r2,r12,400447c <_malloc_r+0x7f4>
 40042e8:	208000cc 	andi	r2,r4,3
 40042ec:	633ffe04 	addi	r12,r12,-8
 40042f0:	103ffa1e 	bne	r2,zero,40042dc <__alt_data_end+0xfabfc2dc>
 40042f4:	98800117 	ldw	r2,4(r19)
 40042f8:	0146303a 	nor	r3,zero,r5
 40042fc:	1884703a 	and	r2,r3,r2
 4004300:	98800115 	stw	r2,4(r19)
 4004304:	294b883a 	add	r5,r5,r5
 4004308:	117f2836 	bltu	r2,r5,4003fac <__alt_data_end+0xfabfbfac>
 400430c:	283f2726 	beq	r5,zero,4003fac <__alt_data_end+0xfabfbfac>
 4004310:	2886703a 	and	r3,r5,r2
 4004314:	5809883a 	mov	r4,r11
 4004318:	183ec31e 	bne	r3,zero,4003e28 <__alt_data_end+0xfabfbe28>
 400431c:	294b883a 	add	r5,r5,r5
 4004320:	2886703a 	and	r3,r5,r2
 4004324:	21000104 	addi	r4,r4,4
 4004328:	183ffc26 	beq	r3,zero,400431c <__alt_data_end+0xfabfc31c>
 400432c:	003ebe06 	br	4003e28 <__alt_data_end+0xfabfbe28>
 4004330:	00c05504 	movi	r3,340
 4004334:	18801236 	bltu	r3,r2,4004380 <_malloc_r+0x6f8>
 4004338:	8804d3fa 	srli	r2,r17,15
 400433c:	12001e04 	addi	r8,r2,120
 4004340:	11c01dc4 	addi	r7,r2,119
 4004344:	4209883a 	add	r4,r8,r8
 4004348:	003e6d06 	br	4003d00 <__alt_data_end+0xfabfbd00>
 400434c:	00c40004 	movi	r3,4096
 4004350:	003f4606 	br	400406c <__alt_data_end+0xfabfc06c>
 4004354:	00800044 	movi	r2,1
 4004358:	a0800115 	stw	r2,4(r20)
 400435c:	003f7406 	br	4004130 <__alt_data_end+0xfabfc130>
 4004360:	1805d0ba 	srai	r2,r3,2
 4004364:	01c00044 	movi	r7,1
 4004368:	30c00117 	ldw	r3,4(r6)
 400436c:	388e983a 	sll	r7,r7,r2
 4004370:	2805883a 	mov	r2,r5
 4004374:	38c6b03a 	or	r3,r7,r3
 4004378:	30c00115 	stw	r3,4(r6)
 400437c:	003f9b06 	br	40041ec <__alt_data_end+0xfabfc1ec>
 4004380:	00c15504 	movi	r3,1364
 4004384:	18801a36 	bltu	r3,r2,40043f0 <_malloc_r+0x768>
 4004388:	8804d4ba 	srli	r2,r17,18
 400438c:	12001f44 	addi	r8,r2,125
 4004390:	11c01f04 	addi	r7,r2,124
 4004394:	4209883a 	add	r4,r8,r8
 4004398:	003e5906 	br	4003d00 <__alt_data_end+0xfabfbd00>
 400439c:	ad400404 	addi	r21,r21,16
 40043a0:	003f1706 	br	4004000 <__alt_data_end+0xfabfc000>
 40043a4:	00c01504 	movi	r3,84
 40043a8:	18802336 	bltu	r3,r2,4004438 <_malloc_r+0x7b0>
 40043ac:	3804d33a 	srli	r2,r7,12
 40043b0:	11401bc4 	addi	r5,r2,111
 40043b4:	10c01b84 	addi	r3,r2,110
 40043b8:	294b883a 	add	r5,r5,r5
 40043bc:	003f7b06 	br	40041ac <__alt_data_end+0xfabfc1ac>
 40043c0:	9c000217 	ldw	r16,8(r19)
 40043c4:	00bfff04 	movi	r2,-4
 40043c8:	80c00117 	ldw	r3,4(r16)
 40043cc:	1886703a 	and	r3,r3,r2
 40043d0:	003f5306 	br	4004120 <__alt_data_end+0xfabfc120>
 40043d4:	3083ffcc 	andi	r2,r6,4095
 40043d8:	103f181e 	bne	r2,zero,400403c <__alt_data_end+0xfabfc03c>
 40043dc:	99000217 	ldw	r4,8(r19)
 40043e0:	b545883a 	add	r2,r22,r21
 40043e4:	10800054 	ori	r2,r2,1
 40043e8:	20800115 	stw	r2,4(r4)
 40043ec:	003f3e06 	br	40040e8 <__alt_data_end+0xfabfc0e8>
 40043f0:	01003f84 	movi	r4,254
 40043f4:	02001fc4 	movi	r8,127
 40043f8:	01c01f84 	movi	r7,126
 40043fc:	003e4006 	br	4003d00 <__alt_data_end+0xfabfbd00>
 4004400:	00810034 	movhi	r2,1024
 4004404:	1097a204 	addi	r2,r2,24200
 4004408:	15000015 	stw	r20,0(r2)
 400440c:	003f1106 	br	4004054 <__alt_data_end+0xfabfc054>
 4004410:	00800044 	movi	r2,1
 4004414:	002b883a 	mov	r21,zero
 4004418:	003f1f06 	br	4004098 <__alt_data_end+0xfabfc098>
 400441c:	81400204 	addi	r5,r16,8
 4004420:	9009883a 	mov	r4,r18
 4004424:	40036340 	call	4003634 <_free_r>
 4004428:	00810034 	movhi	r2,1024
 400442c:	109aa004 	addi	r2,r2,27264
 4004430:	10c00017 	ldw	r3,0(r2)
 4004434:	003f2c06 	br	40040e8 <__alt_data_end+0xfabfc0e8>
 4004438:	00c05504 	movi	r3,340
 400443c:	18800536 	bltu	r3,r2,4004454 <_malloc_r+0x7cc>
 4004440:	3804d3fa 	srli	r2,r7,15
 4004444:	11401e04 	addi	r5,r2,120
 4004448:	10c01dc4 	addi	r3,r2,119
 400444c:	294b883a 	add	r5,r5,r5
 4004450:	003f5606 	br	40041ac <__alt_data_end+0xfabfc1ac>
 4004454:	00c15504 	movi	r3,1364
 4004458:	18800536 	bltu	r3,r2,4004470 <_malloc_r+0x7e8>
 400445c:	3804d4ba 	srli	r2,r7,18
 4004460:	11401f44 	addi	r5,r2,125
 4004464:	10c01f04 	addi	r3,r2,124
 4004468:	294b883a 	add	r5,r5,r5
 400446c:	003f4f06 	br	40041ac <__alt_data_end+0xfabfc1ac>
 4004470:	01403f84 	movi	r5,254
 4004474:	00c01f84 	movi	r3,126
 4004478:	003f4c06 	br	40041ac <__alt_data_end+0xfabfc1ac>
 400447c:	98800117 	ldw	r2,4(r19)
 4004480:	003fa006 	br	4004304 <__alt_data_end+0xfabfc304>
 4004484:	8808d0fa 	srli	r4,r17,3
 4004488:	20800044 	addi	r2,r4,1
 400448c:	1085883a 	add	r2,r2,r2
 4004490:	003e9006 	br	4003ed4 <__alt_data_end+0xfabfbed4>

04004494 <memset>:
 4004494:	20c000cc 	andi	r3,r4,3
 4004498:	2005883a 	mov	r2,r4
 400449c:	18004426 	beq	r3,zero,40045b0 <memset+0x11c>
 40044a0:	31ffffc4 	addi	r7,r6,-1
 40044a4:	30004026 	beq	r6,zero,40045a8 <memset+0x114>
 40044a8:	2813883a 	mov	r9,r5
 40044ac:	200d883a 	mov	r6,r4
 40044b0:	2007883a 	mov	r3,r4
 40044b4:	00000406 	br	40044c8 <memset+0x34>
 40044b8:	3a3fffc4 	addi	r8,r7,-1
 40044bc:	31800044 	addi	r6,r6,1
 40044c0:	38003926 	beq	r7,zero,40045a8 <memset+0x114>
 40044c4:	400f883a 	mov	r7,r8
 40044c8:	18c00044 	addi	r3,r3,1
 40044cc:	32400005 	stb	r9,0(r6)
 40044d0:	1a0000cc 	andi	r8,r3,3
 40044d4:	403ff81e 	bne	r8,zero,40044b8 <__alt_data_end+0xfabfc4b8>
 40044d8:	010000c4 	movi	r4,3
 40044dc:	21c02d2e 	bgeu	r4,r7,4004594 <memset+0x100>
 40044e0:	29003fcc 	andi	r4,r5,255
 40044e4:	200c923a 	slli	r6,r4,8
 40044e8:	3108b03a 	or	r4,r6,r4
 40044ec:	200c943a 	slli	r6,r4,16
 40044f0:	218cb03a 	or	r6,r4,r6
 40044f4:	010003c4 	movi	r4,15
 40044f8:	21c0182e 	bgeu	r4,r7,400455c <memset+0xc8>
 40044fc:	3b3ffc04 	addi	r12,r7,-16
 4004500:	6018d13a 	srli	r12,r12,4
 4004504:	1a000104 	addi	r8,r3,4
 4004508:	1ac00204 	addi	r11,r3,8
 400450c:	6008913a 	slli	r4,r12,4
 4004510:	1a800304 	addi	r10,r3,12
 4004514:	1813883a 	mov	r9,r3
 4004518:	21000504 	addi	r4,r4,20
 400451c:	1909883a 	add	r4,r3,r4
 4004520:	49800015 	stw	r6,0(r9)
 4004524:	41800015 	stw	r6,0(r8)
 4004528:	59800015 	stw	r6,0(r11)
 400452c:	51800015 	stw	r6,0(r10)
 4004530:	42000404 	addi	r8,r8,16
 4004534:	4a400404 	addi	r9,r9,16
 4004538:	5ac00404 	addi	r11,r11,16
 400453c:	52800404 	addi	r10,r10,16
 4004540:	413ff71e 	bne	r8,r4,4004520 <__alt_data_end+0xfabfc520>
 4004544:	63000044 	addi	r12,r12,1
 4004548:	6018913a 	slli	r12,r12,4
 400454c:	39c003cc 	andi	r7,r7,15
 4004550:	010000c4 	movi	r4,3
 4004554:	1b07883a 	add	r3,r3,r12
 4004558:	21c00e2e 	bgeu	r4,r7,4004594 <memset+0x100>
 400455c:	1813883a 	mov	r9,r3
 4004560:	3811883a 	mov	r8,r7
 4004564:	010000c4 	movi	r4,3
 4004568:	49800015 	stw	r6,0(r9)
 400456c:	423fff04 	addi	r8,r8,-4
 4004570:	4a400104 	addi	r9,r9,4
 4004574:	223ffc36 	bltu	r4,r8,4004568 <__alt_data_end+0xfabfc568>
 4004578:	393fff04 	addi	r4,r7,-4
 400457c:	2008d0ba 	srli	r4,r4,2
 4004580:	39c000cc 	andi	r7,r7,3
 4004584:	21000044 	addi	r4,r4,1
 4004588:	2109883a 	add	r4,r4,r4
 400458c:	2109883a 	add	r4,r4,r4
 4004590:	1907883a 	add	r3,r3,r4
 4004594:	38000526 	beq	r7,zero,40045ac <memset+0x118>
 4004598:	19cf883a 	add	r7,r3,r7
 400459c:	19400005 	stb	r5,0(r3)
 40045a0:	18c00044 	addi	r3,r3,1
 40045a4:	38fffd1e 	bne	r7,r3,400459c <__alt_data_end+0xfabfc59c>
 40045a8:	f800283a 	ret
 40045ac:	f800283a 	ret
 40045b0:	2007883a 	mov	r3,r4
 40045b4:	300f883a 	mov	r7,r6
 40045b8:	003fc706 	br	40044d8 <__alt_data_end+0xfabfc4d8>

040045bc <lflush>:
 40045bc:	2080030b 	ldhu	r2,12(r4)
 40045c0:	00c00244 	movi	r3,9
 40045c4:	1080024c 	andi	r2,r2,9
 40045c8:	10c00226 	beq	r2,r3,40045d4 <lflush+0x18>
 40045cc:	0005883a 	mov	r2,zero
 40045d0:	f800283a 	ret
 40045d4:	40031401 	jmpi	4003140 <fflush>

040045d8 <__srefill_r>:
 40045d8:	defffc04 	addi	sp,sp,-16
 40045dc:	dc400115 	stw	r17,4(sp)
 40045e0:	dc000015 	stw	r16,0(sp)
 40045e4:	dfc00315 	stw	ra,12(sp)
 40045e8:	dc800215 	stw	r18,8(sp)
 40045ec:	2023883a 	mov	r17,r4
 40045f0:	2821883a 	mov	r16,r5
 40045f4:	20000226 	beq	r4,zero,4004600 <__srefill_r+0x28>
 40045f8:	20800e17 	ldw	r2,56(r4)
 40045fc:	10003c26 	beq	r2,zero,40046f0 <__srefill_r+0x118>
 4004600:	80c0030b 	ldhu	r3,12(r16)
 4004604:	1908000c 	andi	r4,r3,8192
 4004608:	1805883a 	mov	r2,r3
 400460c:	2000071e 	bne	r4,zero,400462c <__srefill_r+0x54>
 4004610:	81001917 	ldw	r4,100(r16)
 4004614:	18880014 	ori	r2,r3,8192
 4004618:	00f7ffc4 	movi	r3,-8193
 400461c:	20c8703a 	and	r4,r4,r3
 4004620:	8080030d 	sth	r2,12(r16)
 4004624:	1007883a 	mov	r3,r2
 4004628:	81001915 	stw	r4,100(r16)
 400462c:	80000115 	stw	zero,4(r16)
 4004630:	1100080c 	andi	r4,r2,32
 4004634:	2000571e 	bne	r4,zero,4004794 <__srefill_r+0x1bc>
 4004638:	1100010c 	andi	r4,r2,4
 400463c:	20001f26 	beq	r4,zero,40046bc <__srefill_r+0xe4>
 4004640:	81400c17 	ldw	r5,48(r16)
 4004644:	28000826 	beq	r5,zero,4004668 <__srefill_r+0x90>
 4004648:	80801004 	addi	r2,r16,64
 400464c:	28800226 	beq	r5,r2,4004658 <__srefill_r+0x80>
 4004650:	8809883a 	mov	r4,r17
 4004654:	40036340 	call	4003634 <_free_r>
 4004658:	80800f17 	ldw	r2,60(r16)
 400465c:	80000c15 	stw	zero,48(r16)
 4004660:	80800115 	stw	r2,4(r16)
 4004664:	1000391e 	bne	r2,zero,400474c <__srefill_r+0x174>
 4004668:	80800417 	ldw	r2,16(r16)
 400466c:	10004b26 	beq	r2,zero,400479c <__srefill_r+0x1c4>
 4004670:	8480030b 	ldhu	r18,12(r16)
 4004674:	908000cc 	andi	r2,r18,3
 4004678:	10001f1e 	bne	r2,zero,40046f8 <__srefill_r+0x120>
 400467c:	81800417 	ldw	r6,16(r16)
 4004680:	80800817 	ldw	r2,32(r16)
 4004684:	81c00517 	ldw	r7,20(r16)
 4004688:	81400717 	ldw	r5,28(r16)
 400468c:	81800015 	stw	r6,0(r16)
 4004690:	8809883a 	mov	r4,r17
 4004694:	103ee83a 	callr	r2
 4004698:	80800115 	stw	r2,4(r16)
 400469c:	00800e0e 	bge	zero,r2,40046d8 <__srefill_r+0x100>
 40046a0:	0005883a 	mov	r2,zero
 40046a4:	dfc00317 	ldw	ra,12(sp)
 40046a8:	dc800217 	ldw	r18,8(sp)
 40046ac:	dc400117 	ldw	r17,4(sp)
 40046b0:	dc000017 	ldw	r16,0(sp)
 40046b4:	dec00404 	addi	sp,sp,16
 40046b8:	f800283a 	ret
 40046bc:	1100040c 	andi	r4,r2,16
 40046c0:	20003026 	beq	r4,zero,4004784 <__srefill_r+0x1ac>
 40046c4:	1080020c 	andi	r2,r2,8
 40046c8:	1000241e 	bne	r2,zero,400475c <__srefill_r+0x184>
 40046cc:	18c00114 	ori	r3,r3,4
 40046d0:	80c0030d 	sth	r3,12(r16)
 40046d4:	003fe406 	br	4004668 <__alt_data_end+0xfabfc668>
 40046d8:	80c0030b 	ldhu	r3,12(r16)
 40046dc:	1000161e 	bne	r2,zero,4004738 <__srefill_r+0x160>
 40046e0:	18c00814 	ori	r3,r3,32
 40046e4:	00bfffc4 	movi	r2,-1
 40046e8:	80c0030d 	sth	r3,12(r16)
 40046ec:	003fed06 	br	40046a4 <__alt_data_end+0xfabfc6a4>
 40046f0:	40034c00 	call	40034c0 <__sinit>
 40046f4:	003fc206 	br	4004600 <__alt_data_end+0xfabfc600>
 40046f8:	00810034 	movhi	r2,1024
 40046fc:	1097a004 	addi	r2,r2,24192
 4004700:	11000017 	ldw	r4,0(r2)
 4004704:	01410034 	movhi	r5,1024
 4004708:	00800044 	movi	r2,1
 400470c:	29516f04 	addi	r5,r5,17852
 4004710:	8080030d 	sth	r2,12(r16)
 4004714:	40039440 	call	4003944 <_fwalk>
 4004718:	00800244 	movi	r2,9
 400471c:	8480030d 	sth	r18,12(r16)
 4004720:	9480024c 	andi	r18,r18,9
 4004724:	90bfd51e 	bne	r18,r2,400467c <__alt_data_end+0xfabfc67c>
 4004728:	800b883a 	mov	r5,r16
 400472c:	8809883a 	mov	r4,r17
 4004730:	4002ec80 	call	4002ec8 <__sflush_r>
 4004734:	003fd106 	br	400467c <__alt_data_end+0xfabfc67c>
 4004738:	18c01014 	ori	r3,r3,64
 400473c:	80000115 	stw	zero,4(r16)
 4004740:	00bfffc4 	movi	r2,-1
 4004744:	80c0030d 	sth	r3,12(r16)
 4004748:	003fd606 	br	40046a4 <__alt_data_end+0xfabfc6a4>
 400474c:	80c00e17 	ldw	r3,56(r16)
 4004750:	0005883a 	mov	r2,zero
 4004754:	80c00015 	stw	r3,0(r16)
 4004758:	003fd206 	br	40046a4 <__alt_data_end+0xfabfc6a4>
 400475c:	800b883a 	mov	r5,r16
 4004760:	8809883a 	mov	r4,r17
 4004764:	40030e40 	call	40030e4 <_fflush_r>
 4004768:	10000a1e 	bne	r2,zero,4004794 <__srefill_r+0x1bc>
 400476c:	8080030b 	ldhu	r2,12(r16)
 4004770:	00fffdc4 	movi	r3,-9
 4004774:	80000215 	stw	zero,8(r16)
 4004778:	1886703a 	and	r3,r3,r2
 400477c:	80000615 	stw	zero,24(r16)
 4004780:	003fd206 	br	40046cc <__alt_data_end+0xfabfc6cc>
 4004784:	00800244 	movi	r2,9
 4004788:	88800015 	stw	r2,0(r17)
 400478c:	18c01014 	ori	r3,r3,64
 4004790:	80c0030d 	sth	r3,12(r16)
 4004794:	00bfffc4 	movi	r2,-1
 4004798:	003fc206 	br	40046a4 <__alt_data_end+0xfabfc6a4>
 400479c:	800b883a 	mov	r5,r16
 40047a0:	8809883a 	mov	r4,r17
 40047a4:	4003acc0 	call	4003acc <__smakebuf_r>
 40047a8:	003fb106 	br	4004670 <__alt_data_end+0xfabfc670>

040047ac <_sbrk_r>:
 40047ac:	defffd04 	addi	sp,sp,-12
 40047b0:	dc000015 	stw	r16,0(sp)
 40047b4:	04010034 	movhi	r16,1024
 40047b8:	dc400115 	stw	r17,4(sp)
 40047bc:	841a9c04 	addi	r16,r16,27248
 40047c0:	2023883a 	mov	r17,r4
 40047c4:	2809883a 	mov	r4,r5
 40047c8:	dfc00215 	stw	ra,8(sp)
 40047cc:	80000015 	stw	zero,0(r16)
 40047d0:	4004ec00 	call	4004ec0 <sbrk>
 40047d4:	00ffffc4 	movi	r3,-1
 40047d8:	10c00526 	beq	r2,r3,40047f0 <_sbrk_r+0x44>
 40047dc:	dfc00217 	ldw	ra,8(sp)
 40047e0:	dc400117 	ldw	r17,4(sp)
 40047e4:	dc000017 	ldw	r16,0(sp)
 40047e8:	dec00304 	addi	sp,sp,12
 40047ec:	f800283a 	ret
 40047f0:	80c00017 	ldw	r3,0(r16)
 40047f4:	183ff926 	beq	r3,zero,40047dc <__alt_data_end+0xfabfc7dc>
 40047f8:	88c00015 	stw	r3,0(r17)
 40047fc:	003ff706 	br	40047dc <__alt_data_end+0xfabfc7dc>

04004800 <__sread>:
 4004800:	defffe04 	addi	sp,sp,-8
 4004804:	dc000015 	stw	r16,0(sp)
 4004808:	2821883a 	mov	r16,r5
 400480c:	2940038f 	ldh	r5,14(r5)
 4004810:	dfc00115 	stw	ra,4(sp)
 4004814:	4004c040 	call	4004c04 <_read_r>
 4004818:	10000716 	blt	r2,zero,4004838 <__sread+0x38>
 400481c:	80c01417 	ldw	r3,80(r16)
 4004820:	1887883a 	add	r3,r3,r2
 4004824:	80c01415 	stw	r3,80(r16)
 4004828:	dfc00117 	ldw	ra,4(sp)
 400482c:	dc000017 	ldw	r16,0(sp)
 4004830:	dec00204 	addi	sp,sp,8
 4004834:	f800283a 	ret
 4004838:	80c0030b 	ldhu	r3,12(r16)
 400483c:	18fbffcc 	andi	r3,r3,61439
 4004840:	80c0030d 	sth	r3,12(r16)
 4004844:	dfc00117 	ldw	ra,4(sp)
 4004848:	dc000017 	ldw	r16,0(sp)
 400484c:	dec00204 	addi	sp,sp,8
 4004850:	f800283a 	ret

04004854 <__seofread>:
 4004854:	0005883a 	mov	r2,zero
 4004858:	f800283a 	ret

0400485c <__swrite>:
 400485c:	2880030b 	ldhu	r2,12(r5)
 4004860:	defffb04 	addi	sp,sp,-20
 4004864:	dcc00315 	stw	r19,12(sp)
 4004868:	dc800215 	stw	r18,8(sp)
 400486c:	dc400115 	stw	r17,4(sp)
 4004870:	dc000015 	stw	r16,0(sp)
 4004874:	dfc00415 	stw	ra,16(sp)
 4004878:	10c0400c 	andi	r3,r2,256
 400487c:	2821883a 	mov	r16,r5
 4004880:	2023883a 	mov	r17,r4
 4004884:	3025883a 	mov	r18,r6
 4004888:	3827883a 	mov	r19,r7
 400488c:	18000526 	beq	r3,zero,40048a4 <__swrite+0x48>
 4004890:	2940038f 	ldh	r5,14(r5)
 4004894:	01c00084 	movi	r7,2
 4004898:	000d883a 	mov	r6,zero
 400489c:	4004ba40 	call	4004ba4 <_lseek_r>
 40048a0:	8080030b 	ldhu	r2,12(r16)
 40048a4:	8140038f 	ldh	r5,14(r16)
 40048a8:	10bbffcc 	andi	r2,r2,61439
 40048ac:	980f883a 	mov	r7,r19
 40048b0:	900d883a 	mov	r6,r18
 40048b4:	8809883a 	mov	r4,r17
 40048b8:	8080030d 	sth	r2,12(r16)
 40048bc:	dfc00417 	ldw	ra,16(sp)
 40048c0:	dcc00317 	ldw	r19,12(sp)
 40048c4:	dc800217 	ldw	r18,8(sp)
 40048c8:	dc400117 	ldw	r17,4(sp)
 40048cc:	dc000017 	ldw	r16,0(sp)
 40048d0:	dec00504 	addi	sp,sp,20
 40048d4:	400493c1 	jmpi	400493c <_write_r>

040048d8 <__sseek>:
 40048d8:	defffe04 	addi	sp,sp,-8
 40048dc:	dc000015 	stw	r16,0(sp)
 40048e0:	2821883a 	mov	r16,r5
 40048e4:	2940038f 	ldh	r5,14(r5)
 40048e8:	dfc00115 	stw	ra,4(sp)
 40048ec:	4004ba40 	call	4004ba4 <_lseek_r>
 40048f0:	00ffffc4 	movi	r3,-1
 40048f4:	10c00826 	beq	r2,r3,4004918 <__sseek+0x40>
 40048f8:	80c0030b 	ldhu	r3,12(r16)
 40048fc:	80801415 	stw	r2,80(r16)
 4004900:	18c40014 	ori	r3,r3,4096
 4004904:	80c0030d 	sth	r3,12(r16)
 4004908:	dfc00117 	ldw	ra,4(sp)
 400490c:	dc000017 	ldw	r16,0(sp)
 4004910:	dec00204 	addi	sp,sp,8
 4004914:	f800283a 	ret
 4004918:	80c0030b 	ldhu	r3,12(r16)
 400491c:	18fbffcc 	andi	r3,r3,61439
 4004920:	80c0030d 	sth	r3,12(r16)
 4004924:	dfc00117 	ldw	ra,4(sp)
 4004928:	dc000017 	ldw	r16,0(sp)
 400492c:	dec00204 	addi	sp,sp,8
 4004930:	f800283a 	ret

04004934 <__sclose>:
 4004934:	2940038f 	ldh	r5,14(r5)
 4004938:	400499c1 	jmpi	400499c <_close_r>

0400493c <_write_r>:
 400493c:	defffd04 	addi	sp,sp,-12
 4004940:	2805883a 	mov	r2,r5
 4004944:	dc000015 	stw	r16,0(sp)
 4004948:	04010034 	movhi	r16,1024
 400494c:	dc400115 	stw	r17,4(sp)
 4004950:	300b883a 	mov	r5,r6
 4004954:	841a9c04 	addi	r16,r16,27248
 4004958:	2023883a 	mov	r17,r4
 400495c:	380d883a 	mov	r6,r7
 4004960:	1009883a 	mov	r4,r2
 4004964:	dfc00215 	stw	ra,8(sp)
 4004968:	80000015 	stw	zero,0(r16)
 400496c:	4004f0c0 	call	4004f0c <write>
 4004970:	00ffffc4 	movi	r3,-1
 4004974:	10c00526 	beq	r2,r3,400498c <_write_r+0x50>
 4004978:	dfc00217 	ldw	ra,8(sp)
 400497c:	dc400117 	ldw	r17,4(sp)
 4004980:	dc000017 	ldw	r16,0(sp)
 4004984:	dec00304 	addi	sp,sp,12
 4004988:	f800283a 	ret
 400498c:	80c00017 	ldw	r3,0(r16)
 4004990:	183ff926 	beq	r3,zero,4004978 <__alt_data_end+0xfabfc978>
 4004994:	88c00015 	stw	r3,0(r17)
 4004998:	003ff706 	br	4004978 <__alt_data_end+0xfabfc978>

0400499c <_close_r>:
 400499c:	defffd04 	addi	sp,sp,-12
 40049a0:	dc000015 	stw	r16,0(sp)
 40049a4:	04010034 	movhi	r16,1024
 40049a8:	dc400115 	stw	r17,4(sp)
 40049ac:	841a9c04 	addi	r16,r16,27248
 40049b0:	2023883a 	mov	r17,r4
 40049b4:	2809883a 	mov	r4,r5
 40049b8:	dfc00215 	stw	ra,8(sp)
 40049bc:	80000015 	stw	zero,0(r16)
 40049c0:	4001d700 	call	4001d70 <close>
 40049c4:	00ffffc4 	movi	r3,-1
 40049c8:	10c00526 	beq	r2,r3,40049e0 <_close_r+0x44>
 40049cc:	dfc00217 	ldw	ra,8(sp)
 40049d0:	dc400117 	ldw	r17,4(sp)
 40049d4:	dc000017 	ldw	r16,0(sp)
 40049d8:	dec00304 	addi	sp,sp,12
 40049dc:	f800283a 	ret
 40049e0:	80c00017 	ldw	r3,0(r16)
 40049e4:	183ff926 	beq	r3,zero,40049cc <__alt_data_end+0xfabfc9cc>
 40049e8:	88c00015 	stw	r3,0(r17)
 40049ec:	003ff706 	br	40049cc <__alt_data_end+0xfabfc9cc>

040049f0 <_fclose_r>:
 40049f0:	28003926 	beq	r5,zero,4004ad8 <_fclose_r+0xe8>
 40049f4:	defffc04 	addi	sp,sp,-16
 40049f8:	dc400115 	stw	r17,4(sp)
 40049fc:	dc000015 	stw	r16,0(sp)
 4004a00:	dfc00315 	stw	ra,12(sp)
 4004a04:	dc800215 	stw	r18,8(sp)
 4004a08:	2023883a 	mov	r17,r4
 4004a0c:	2821883a 	mov	r16,r5
 4004a10:	20000226 	beq	r4,zero,4004a1c <_fclose_r+0x2c>
 4004a14:	20800e17 	ldw	r2,56(r4)
 4004a18:	10002726 	beq	r2,zero,4004ab8 <_fclose_r+0xc8>
 4004a1c:	8080030f 	ldh	r2,12(r16)
 4004a20:	1000071e 	bne	r2,zero,4004a40 <_fclose_r+0x50>
 4004a24:	0005883a 	mov	r2,zero
 4004a28:	dfc00317 	ldw	ra,12(sp)
 4004a2c:	dc800217 	ldw	r18,8(sp)
 4004a30:	dc400117 	ldw	r17,4(sp)
 4004a34:	dc000017 	ldw	r16,0(sp)
 4004a38:	dec00404 	addi	sp,sp,16
 4004a3c:	f800283a 	ret
 4004a40:	800b883a 	mov	r5,r16
 4004a44:	8809883a 	mov	r4,r17
 4004a48:	4002ec80 	call	4002ec8 <__sflush_r>
 4004a4c:	1025883a 	mov	r18,r2
 4004a50:	80800b17 	ldw	r2,44(r16)
 4004a54:	10000426 	beq	r2,zero,4004a68 <_fclose_r+0x78>
 4004a58:	81400717 	ldw	r5,28(r16)
 4004a5c:	8809883a 	mov	r4,r17
 4004a60:	103ee83a 	callr	r2
 4004a64:	10001616 	blt	r2,zero,4004ac0 <_fclose_r+0xd0>
 4004a68:	8080030b 	ldhu	r2,12(r16)
 4004a6c:	1080200c 	andi	r2,r2,128
 4004a70:	1000151e 	bne	r2,zero,4004ac8 <_fclose_r+0xd8>
 4004a74:	81400c17 	ldw	r5,48(r16)
 4004a78:	28000526 	beq	r5,zero,4004a90 <_fclose_r+0xa0>
 4004a7c:	80801004 	addi	r2,r16,64
 4004a80:	28800226 	beq	r5,r2,4004a8c <_fclose_r+0x9c>
 4004a84:	8809883a 	mov	r4,r17
 4004a88:	40036340 	call	4003634 <_free_r>
 4004a8c:	80000c15 	stw	zero,48(r16)
 4004a90:	81401117 	ldw	r5,68(r16)
 4004a94:	28000326 	beq	r5,zero,4004aa4 <_fclose_r+0xb4>
 4004a98:	8809883a 	mov	r4,r17
 4004a9c:	40036340 	call	4003634 <_free_r>
 4004aa0:	80001115 	stw	zero,68(r16)
 4004aa4:	40034d00 	call	40034d0 <__sfp_lock_acquire>
 4004aa8:	8000030d 	sth	zero,12(r16)
 4004aac:	40034d40 	call	40034d4 <__sfp_lock_release>
 4004ab0:	9005883a 	mov	r2,r18
 4004ab4:	003fdc06 	br	4004a28 <__alt_data_end+0xfabfca28>
 4004ab8:	40034c00 	call	40034c0 <__sinit>
 4004abc:	003fd706 	br	4004a1c <__alt_data_end+0xfabfca1c>
 4004ac0:	04bfffc4 	movi	r18,-1
 4004ac4:	003fe806 	br	4004a68 <__alt_data_end+0xfabfca68>
 4004ac8:	81400417 	ldw	r5,16(r16)
 4004acc:	8809883a 	mov	r4,r17
 4004ad0:	40036340 	call	4003634 <_free_r>
 4004ad4:	003fe706 	br	4004a74 <__alt_data_end+0xfabfca74>
 4004ad8:	0005883a 	mov	r2,zero
 4004adc:	f800283a 	ret

04004ae0 <fclose>:
 4004ae0:	00810034 	movhi	r2,1024
 4004ae4:	1097a104 	addi	r2,r2,24196
 4004ae8:	200b883a 	mov	r5,r4
 4004aec:	11000017 	ldw	r4,0(r2)
 4004af0:	40049f01 	jmpi	40049f0 <_fclose_r>

04004af4 <_fstat_r>:
 4004af4:	defffd04 	addi	sp,sp,-12
 4004af8:	2805883a 	mov	r2,r5
 4004afc:	dc000015 	stw	r16,0(sp)
 4004b00:	04010034 	movhi	r16,1024
 4004b04:	dc400115 	stw	r17,4(sp)
 4004b08:	841a9c04 	addi	r16,r16,27248
 4004b0c:	2023883a 	mov	r17,r4
 4004b10:	300b883a 	mov	r5,r6
 4004b14:	1009883a 	mov	r4,r2
 4004b18:	dfc00215 	stw	ra,8(sp)
 4004b1c:	80000015 	stw	zero,0(r16)
 4004b20:	4004c780 	call	4004c78 <fstat>
 4004b24:	00ffffc4 	movi	r3,-1
 4004b28:	10c00526 	beq	r2,r3,4004b40 <_fstat_r+0x4c>
 4004b2c:	dfc00217 	ldw	ra,8(sp)
 4004b30:	dc400117 	ldw	r17,4(sp)
 4004b34:	dc000017 	ldw	r16,0(sp)
 4004b38:	dec00304 	addi	sp,sp,12
 4004b3c:	f800283a 	ret
 4004b40:	80c00017 	ldw	r3,0(r16)
 4004b44:	183ff926 	beq	r3,zero,4004b2c <__alt_data_end+0xfabfcb2c>
 4004b48:	88c00015 	stw	r3,0(r17)
 4004b4c:	003ff706 	br	4004b2c <__alt_data_end+0xfabfcb2c>

04004b50 <_isatty_r>:
 4004b50:	defffd04 	addi	sp,sp,-12
 4004b54:	dc000015 	stw	r16,0(sp)
 4004b58:	04010034 	movhi	r16,1024
 4004b5c:	dc400115 	stw	r17,4(sp)
 4004b60:	841a9c04 	addi	r16,r16,27248
 4004b64:	2023883a 	mov	r17,r4
 4004b68:	2809883a 	mov	r4,r5
 4004b6c:	dfc00215 	stw	ra,8(sp)
 4004b70:	80000015 	stw	zero,0(r16)
 4004b74:	4004cf00 	call	4004cf0 <isatty>
 4004b78:	00ffffc4 	movi	r3,-1
 4004b7c:	10c00526 	beq	r2,r3,4004b94 <_isatty_r+0x44>
 4004b80:	dfc00217 	ldw	ra,8(sp)
 4004b84:	dc400117 	ldw	r17,4(sp)
 4004b88:	dc000017 	ldw	r16,0(sp)
 4004b8c:	dec00304 	addi	sp,sp,12
 4004b90:	f800283a 	ret
 4004b94:	80c00017 	ldw	r3,0(r16)
 4004b98:	183ff926 	beq	r3,zero,4004b80 <__alt_data_end+0xfabfcb80>
 4004b9c:	88c00015 	stw	r3,0(r17)
 4004ba0:	003ff706 	br	4004b80 <__alt_data_end+0xfabfcb80>

04004ba4 <_lseek_r>:
 4004ba4:	defffd04 	addi	sp,sp,-12
 4004ba8:	2805883a 	mov	r2,r5
 4004bac:	dc000015 	stw	r16,0(sp)
 4004bb0:	04010034 	movhi	r16,1024
 4004bb4:	dc400115 	stw	r17,4(sp)
 4004bb8:	300b883a 	mov	r5,r6
 4004bbc:	841a9c04 	addi	r16,r16,27248
 4004bc0:	2023883a 	mov	r17,r4
 4004bc4:	380d883a 	mov	r6,r7
 4004bc8:	1009883a 	mov	r4,r2
 4004bcc:	dfc00215 	stw	ra,8(sp)
 4004bd0:	80000015 	stw	zero,0(r16)
 4004bd4:	4004d740 	call	4004d74 <lseek>
 4004bd8:	00ffffc4 	movi	r3,-1
 4004bdc:	10c00526 	beq	r2,r3,4004bf4 <_lseek_r+0x50>
 4004be0:	dfc00217 	ldw	ra,8(sp)
 4004be4:	dc400117 	ldw	r17,4(sp)
 4004be8:	dc000017 	ldw	r16,0(sp)
 4004bec:	dec00304 	addi	sp,sp,12
 4004bf0:	f800283a 	ret
 4004bf4:	80c00017 	ldw	r3,0(r16)
 4004bf8:	183ff926 	beq	r3,zero,4004be0 <__alt_data_end+0xfabfcbe0>
 4004bfc:	88c00015 	stw	r3,0(r17)
 4004c00:	003ff706 	br	4004be0 <__alt_data_end+0xfabfcbe0>

04004c04 <_read_r>:
 4004c04:	defffd04 	addi	sp,sp,-12
 4004c08:	2805883a 	mov	r2,r5
 4004c0c:	dc000015 	stw	r16,0(sp)
 4004c10:	04010034 	movhi	r16,1024
 4004c14:	dc400115 	stw	r17,4(sp)
 4004c18:	300b883a 	mov	r5,r6
 4004c1c:	841a9c04 	addi	r16,r16,27248
 4004c20:	2023883a 	mov	r17,r4
 4004c24:	380d883a 	mov	r6,r7
 4004c28:	1009883a 	mov	r4,r2
 4004c2c:	dfc00215 	stw	ra,8(sp)
 4004c30:	80000015 	stw	zero,0(r16)
 4004c34:	4004df80 	call	4004df8 <read>
 4004c38:	00ffffc4 	movi	r3,-1
 4004c3c:	10c00526 	beq	r2,r3,4004c54 <_read_r+0x50>
 4004c40:	dfc00217 	ldw	ra,8(sp)
 4004c44:	dc400117 	ldw	r17,4(sp)
 4004c48:	dc000017 	ldw	r16,0(sp)
 4004c4c:	dec00304 	addi	sp,sp,12
 4004c50:	f800283a 	ret
 4004c54:	80c00017 	ldw	r3,0(r16)
 4004c58:	183ff926 	beq	r3,zero,4004c40 <__alt_data_end+0xfabfcc40>
 4004c5c:	88c00015 	stw	r3,0(r17)
 4004c60:	003ff706 	br	4004c40 <__alt_data_end+0xfabfcc40>

04004c64 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4004c64:	20000226 	beq	r4,zero,4004c70 <_exit+0xc>
    ALT_SIM_FAIL();
 4004c68:	002af070 	cmpltui	zero,zero,43969
 4004c6c:	003fff06 	br	4004c6c <__alt_data_end+0xfabfcc6c>
  } else {
    ALT_SIM_PASS();
 4004c70:	002af0b0 	cmpltui	zero,zero,43970
 4004c74:	003ffd06 	br	4004c6c <__alt_data_end+0xfabfcc6c>

04004c78 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004c78:	20000d16 	blt	r4,zero,4004cb0 <fstat+0x38>
 4004c7c:	21000324 	muli	r4,r4,12
 4004c80:	00810034 	movhi	r2,1024
 4004c84:	10951b04 	addi	r2,r2,21612
 4004c88:	2089883a 	add	r4,r4,r2
  
  if (fd)
 4004c8c:	20000826 	beq	r4,zero,4004cb0 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4004c90:	20800017 	ldw	r2,0(r4)
 4004c94:	10800817 	ldw	r2,32(r2)
 4004c98:	10000126 	beq	r2,zero,4004ca0 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
 4004c9c:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4004ca0:	00880004 	movi	r2,8192
 4004ca4:	28800115 	stw	r2,4(r5)
      return 0;
 4004ca8:	0005883a 	mov	r2,zero
 4004cac:	f800283a 	ret
 4004cb0:	d0a00c17 	ldw	r2,-32720(gp)
 4004cb4:	10000926 	beq	r2,zero,4004cdc <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4004cb8:	deffff04 	addi	sp,sp,-4
 4004cbc:	dfc00015 	stw	ra,0(sp)
 4004cc0:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4004cc4:	00c01444 	movi	r3,81
 4004cc8:	10c00015 	stw	r3,0(r2)
    return -1;
 4004ccc:	00bfffc4 	movi	r2,-1
  }
}
 4004cd0:	dfc00017 	ldw	ra,0(sp)
 4004cd4:	dec00104 	addi	sp,sp,4
 4004cd8:	f800283a 	ret
 4004cdc:	d0a30c04 	addi	r2,gp,-29648
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4004ce0:	00c01444 	movi	r3,81
 4004ce4:	10c00015 	stw	r3,0(r2)
    return -1;
 4004ce8:	00bfffc4 	movi	r2,-1
  }
}
 4004cec:	f800283a 	ret

04004cf0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4004cf0:	defff004 	addi	sp,sp,-64
 4004cf4:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004cf8:	20001316 	blt	r4,zero,4004d48 <isatty+0x58>
 4004cfc:	20800324 	muli	r2,r4,12
 4004d00:	00c10034 	movhi	r3,1024
 4004d04:	18d51b04 	addi	r3,r3,21612
 4004d08:	10c5883a 	add	r2,r2,r3
  
  if (fd)
 4004d0c:	10000e26 	beq	r2,zero,4004d48 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4004d10:	10800017 	ldw	r2,0(r2)
 4004d14:	10800817 	ldw	r2,32(r2)
 4004d18:	10000726 	beq	r2,zero,4004d38 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4004d1c:	d80b883a 	mov	r5,sp
 4004d20:	4004c780 	call	4004c78 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4004d24:	d8800117 	ldw	r2,4(sp)
 4004d28:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 4004d2c:	dfc00f17 	ldw	ra,60(sp)
 4004d30:	dec01004 	addi	sp,sp,64
 4004d34:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
 4004d38:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 4004d3c:	dfc00f17 	ldw	ra,60(sp)
 4004d40:	dec01004 	addi	sp,sp,64
 4004d44:	f800283a 	ret
 4004d48:	d0a00c17 	ldw	r2,-32720(gp)
 4004d4c:	10000726 	beq	r2,zero,4004d6c <isatty+0x7c>
 4004d50:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4004d54:	00c01444 	movi	r3,81
 4004d58:	10c00015 	stw	r3,0(r2)
    return 0;
 4004d5c:	0005883a 	mov	r2,zero
  }
}
 4004d60:	dfc00f17 	ldw	ra,60(sp)
 4004d64:	dec01004 	addi	sp,sp,64
 4004d68:	f800283a 	ret
 4004d6c:	d0a30c04 	addi	r2,gp,-29648
 4004d70:	003ff806 	br	4004d54 <__alt_data_end+0xfabfcd54>

04004d74 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4004d74:	defffe04 	addi	sp,sp,-8
 4004d78:	dfc00115 	stw	ra,4(sp)
 4004d7c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004d80:	20000e16 	blt	r4,zero,4004dbc <lseek+0x48>
 4004d84:	21000324 	muli	r4,r4,12
 4004d88:	00810034 	movhi	r2,1024
 4004d8c:	10951b04 	addi	r2,r2,21612
 4004d90:	2089883a 	add	r4,r4,r2
  
  if (fd) 
 4004d94:	20000926 	beq	r4,zero,4004dbc <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4004d98:	20800017 	ldw	r2,0(r4)
 4004d9c:	10800717 	ldw	r2,28(r2)
 4004da0:	10000d26 	beq	r2,zero,4004dd8 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4004da4:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
 4004da8:	10000f16 	blt	r2,zero,4004de8 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
 4004dac:	dfc00117 	ldw	ra,4(sp)
 4004db0:	dc000017 	ldw	r16,0(sp)
 4004db4:	dec00204 	addi	sp,sp,8
 4004db8:	f800283a 	ret
 4004dbc:	04001444 	movi	r16,81
 4004dc0:	d0a00c17 	ldw	r2,-32720(gp)
 4004dc4:	10000626 	beq	r2,zero,4004de0 <lseek+0x6c>
 4004dc8:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
 4004dcc:	14000015 	stw	r16,0(r2)
    rc = -1;
 4004dd0:	00bfffc4 	movi	r2,-1
  }

  return rc;
 4004dd4:	003ff506 	br	4004dac <__alt_data_end+0xfabfcdac>
 4004dd8:	04002184 	movi	r16,134
 4004ddc:	003ff806 	br	4004dc0 <__alt_data_end+0xfabfcdc0>
 4004de0:	d0a30c04 	addi	r2,gp,-29648
 4004de4:	003ff906 	br	4004dcc <__alt_data_end+0xfabfcdcc>
 4004de8:	00a1c83a 	sub	r16,zero,r2
 4004dec:	003ff406 	br	4004dc0 <__alt_data_end+0xfabfcdc0>

04004df0 <__malloc_lock>:
 4004df0:	f800283a 	ret

04004df4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4004df4:	f800283a 	ret

04004df8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4004df8:	defffe04 	addi	sp,sp,-8
 4004dfc:	dfc00115 	stw	ra,4(sp)
 4004e00:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004e04:	20002116 	blt	r4,zero,4004e8c <read+0x94>
 4004e08:	21000324 	muli	r4,r4,12
 4004e0c:	00810034 	movhi	r2,1024
 4004e10:	10951b04 	addi	r2,r2,21612
 4004e14:	2089883a 	add	r4,r4,r2
  
  if (fd)
 4004e18:	20001c26 	beq	r4,zero,4004e8c <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4004e1c:	20800217 	ldw	r2,8(r4)
 4004e20:	00c00044 	movi	r3,1
 4004e24:	108000cc 	andi	r2,r2,3
 4004e28:	10c00a26 	beq	r2,r3,4004e54 <read+0x5c>
        (fd->dev->read))
 4004e2c:	20800017 	ldw	r2,0(r4)
 4004e30:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4004e34:	10000726 	beq	r2,zero,4004e54 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4004e38:	103ee83a 	callr	r2
 4004e3c:	1021883a 	mov	r16,r2
 4004e40:	10000b16 	blt	r2,zero,4004e70 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 4004e44:	dfc00117 	ldw	ra,4(sp)
 4004e48:	dc000017 	ldw	r16,0(sp)
 4004e4c:	dec00204 	addi	sp,sp,8
 4004e50:	f800283a 	ret
 4004e54:	d0a00c17 	ldw	r2,-32720(gp)
 4004e58:	10001326 	beq	r2,zero,4004ea8 <read+0xb0>
 4004e5c:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
 4004e60:	00c00344 	movi	r3,13
 4004e64:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 4004e68:	00bfffc4 	movi	r2,-1
 4004e6c:	003ff506 	br	4004e44 <__alt_data_end+0xfabfce44>
 4004e70:	d0a00c17 	ldw	r2,-32720(gp)
 4004e74:	10000e26 	beq	r2,zero,4004eb0 <read+0xb8>
 4004e78:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
 4004e7c:	0421c83a 	sub	r16,zero,r16
 4004e80:	14000015 	stw	r16,0(r2)
          return -1;
 4004e84:	00bfffc4 	movi	r2,-1
 4004e88:	003fee06 	br	4004e44 <__alt_data_end+0xfabfce44>
 4004e8c:	d0a00c17 	ldw	r2,-32720(gp)
 4004e90:	10000926 	beq	r2,zero,4004eb8 <read+0xc0>
 4004e94:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4004e98:	00c01444 	movi	r3,81
 4004e9c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 4004ea0:	00bfffc4 	movi	r2,-1
 4004ea4:	003fe706 	br	4004e44 <__alt_data_end+0xfabfce44>
 4004ea8:	d0a30c04 	addi	r2,gp,-29648
 4004eac:	003fec06 	br	4004e60 <__alt_data_end+0xfabfce60>
 4004eb0:	d0a30c04 	addi	r2,gp,-29648
 4004eb4:	003ff106 	br	4004e7c <__alt_data_end+0xfabfce7c>
 4004eb8:	d0a30c04 	addi	r2,gp,-29648
 4004ebc:	003ff606 	br	4004e98 <__alt_data_end+0xfabfce98>

04004ec0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004ec0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004ec4:	00bfff84 	movi	r2,-2
 4004ec8:	2884703a 	and	r2,r5,r2
 4004ecc:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4004ed0:	d0a01417 	ldw	r2,-32688(gp)
 4004ed4:	00ffff04 	movi	r3,-4
 4004ed8:	108000c4 	addi	r2,r2,3
 4004edc:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4004ee0:	00c20034 	movhi	r3,2048
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4004ee4:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4004ee8:	1109883a 	add	r4,r2,r4
 4004eec:	18c00004 	addi	r3,r3,0
 4004ef0:	19000336 	bltu	r3,r4,4004f00 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 4004ef4:	d1201415 	stw	r4,-32688(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004ef8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 4004efc:	f800283a 	ret
 4004f00:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4004f04:	00bfffc4 	movi	r2,-1
 4004f08:	f800283a 	ret

04004f0c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4004f0c:	defffe04 	addi	sp,sp,-8
 4004f10:	dfc00115 	stw	ra,4(sp)
 4004f14:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004f18:	20002216 	blt	r4,zero,4004fa4 <write+0x98>
 4004f1c:	21000324 	muli	r4,r4,12
 4004f20:	00810034 	movhi	r2,1024
 4004f24:	10951b04 	addi	r2,r2,21612
 4004f28:	2089883a 	add	r4,r4,r2
  
  if (fd)
 4004f2c:	20001d26 	beq	r4,zero,4004fa4 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4004f30:	20800217 	ldw	r2,8(r4)
 4004f34:	108000cc 	andi	r2,r2,3
 4004f38:	10000a26 	beq	r2,zero,4004f64 <write+0x58>
 4004f3c:	20800017 	ldw	r2,0(r4)
 4004f40:	10800617 	ldw	r2,24(r2)
 4004f44:	10000726 	beq	r2,zero,4004f64 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4004f48:	103ee83a 	callr	r2
 4004f4c:	1021883a 	mov	r16,r2
 4004f50:	10000d16 	blt	r2,zero,4004f88 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 4004f54:	dfc00117 	ldw	ra,4(sp)
 4004f58:	dc000017 	ldw	r16,0(sp)
 4004f5c:	dec00204 	addi	sp,sp,8
 4004f60:	f800283a 	ret
 4004f64:	d0a00c17 	ldw	r2,-32720(gp)
 4004f68:	10000526 	beq	r2,zero,4004f80 <write+0x74>
 4004f6c:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
 4004f70:	00c00344 	movi	r3,13
 4004f74:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 4004f78:	00bfffc4 	movi	r2,-1
 4004f7c:	003ff506 	br	4004f54 <__alt_data_end+0xfabfcf54>
 4004f80:	d0a30c04 	addi	r2,gp,-29648
 4004f84:	003ffa06 	br	4004f70 <__alt_data_end+0xfabfcf70>
 4004f88:	d0a00c17 	ldw	r2,-32720(gp)
 4004f8c:	10000c26 	beq	r2,zero,4004fc0 <write+0xb4>
 4004f90:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
 4004f94:	0421c83a 	sub	r16,zero,r16
 4004f98:	14000015 	stw	r16,0(r2)
        return -1;
 4004f9c:	00bfffc4 	movi	r2,-1
 4004fa0:	003fec06 	br	4004f54 <__alt_data_end+0xfabfcf54>
 4004fa4:	d0a00c17 	ldw	r2,-32720(gp)
 4004fa8:	10000726 	beq	r2,zero,4004fc8 <write+0xbc>
 4004fac:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4004fb0:	00c01444 	movi	r3,81
 4004fb4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 4004fb8:	00bfffc4 	movi	r2,-1
 4004fbc:	003fe506 	br	4004f54 <__alt_data_end+0xfabfcf54>
 4004fc0:	d0a30c04 	addi	r2,gp,-29648
 4004fc4:	003ff306 	br	4004f94 <__alt_data_end+0xfabfcf94>
 4004fc8:	d0a30c04 	addi	r2,gp,-29648
 4004fcc:	003ff806 	br	4004fb0 <__alt_data_end+0xfabfcfb0>
