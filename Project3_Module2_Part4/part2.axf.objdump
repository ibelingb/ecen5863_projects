
E:/repos/ECEN5863_projects/Project3_Module2_Part4/part2.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 90 09 00 00 94 09 00 00 98 09 00 00     @...............
  30:	9c 09 00 00 8c 09 00 00 a0 09 00 00 a4 09 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000213 	bl	928 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000a8c 	.word	0x00000a8c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000ec8 	.word	0x00000ec8

00000124 <__cs3_heap_start_ptr>:
 124:	00000ef0 	.word	0x00000ef0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000ed0 	.word	0x00000ed0
 170:	00000ed3 	.word	0x00000ed3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000ed0 	.word	0x00000ed0
 1bc:	00000ed0 	.word	0x00000ed0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000ed0 	.word	0x00000ed0
 200:	00000000 	.word	0x00000000
 204:	00000a30 	.word	0x00000a30

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000a30 	.word	0x00000a30
 250:	00000ed4 	.word	0x00000ed4
 254:	00000a90 	.word	0x00000a90
 258:	00000000 	.word	0x00000000

0000025c <convertToSegmentDisplay>:

#include "address_map_arm.h"
#include "stdint.h"

// Convert uint8_t values to 7-segment display
uint8_t convertToSegmentDisplay(uint8_t input) {
 25c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 260:	e28db000 	add	r11, sp, #0
 264:	e24dd014 	sub	sp, sp, #20
 268:	e1a03000 	mov	r3, r0
 26c:	e54b300d 	strb	r3, [r11, #-13]
	uint8_t segmentValue;
	switch (input) {
 270:	e55b300d 	ldrb	r3, [r11, #-13]
 274:	e3530009 	cmp	r3, #9
 278:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 27c:	ea000027 	b	320 <convertToSegmentDisplay+0xc4>
 280:	000002a8 	.word	0x000002a8
 284:	000002b4 	.word	0x000002b4
 288:	000002c0 	.word	0x000002c0
 28c:	000002cc 	.word	0x000002cc
 290:	000002d8 	.word	0x000002d8
 294:	000002e4 	.word	0x000002e4
 298:	000002f0 	.word	0x000002f0
 29c:	000002fc 	.word	0x000002fc
 2a0:	00000308 	.word	0x00000308
 2a4:	00000314 	.word	0x00000314
		case 0:
			segmentValue = 0x3F;
 2a8:	e3a0303f 	mov	r3, #63	; 0x3f
 2ac:	e54b3005 	strb	r3, [r11, #-5]
			break;
 2b0:	ea00001a 	b	320 <convertToSegmentDisplay+0xc4>
		case 1:
			segmentValue = 0x06;
 2b4:	e3a03006 	mov	r3, #6
 2b8:	e54b3005 	strb	r3, [r11, #-5]
			break;
 2bc:	ea000017 	b	320 <convertToSegmentDisplay+0xc4>
		case 2:
			segmentValue = 0x5B;
 2c0:	e3a0305b 	mov	r3, #91	; 0x5b
 2c4:	e54b3005 	strb	r3, [r11, #-5]
			break;
 2c8:	ea000014 	b	320 <convertToSegmentDisplay+0xc4>
		case 3:
			segmentValue = 0x4F;
 2cc:	e3a0304f 	mov	r3, #79	; 0x4f
 2d0:	e54b3005 	strb	r3, [r11, #-5]
			break;
 2d4:	ea000011 	b	320 <convertToSegmentDisplay+0xc4>
		case 4:
			segmentValue = 0x66;
 2d8:	e3a03066 	mov	r3, #102	; 0x66
 2dc:	e54b3005 	strb	r3, [r11, #-5]
			break;
 2e0:	ea00000e 	b	320 <convertToSegmentDisplay+0xc4>
		case 5:
			segmentValue = 0x6D;
 2e4:	e3a0306d 	mov	r3, #109	; 0x6d
 2e8:	e54b3005 	strb	r3, [r11, #-5]
			break;
 2ec:	ea00000b 	b	320 <convertToSegmentDisplay+0xc4>
		case 6:
			segmentValue = 0x7C;
 2f0:	e3a0307c 	mov	r3, #124	; 0x7c
 2f4:	e54b3005 	strb	r3, [r11, #-5]
			break;
 2f8:	ea000008 	b	320 <convertToSegmentDisplay+0xc4>
		case 7:
			segmentValue = 0x07;
 2fc:	e3a03007 	mov	r3, #7
 300:	e54b3005 	strb	r3, [r11, #-5]
			break;
 304:	ea000005 	b	320 <convertToSegmentDisplay+0xc4>
		case 8:
			segmentValue = 0xFF;
 308:	e3e03000 	mvn	r3, #0
 30c:	e54b3005 	strb	r3, [r11, #-5]
			break;
 310:	ea000002 	b	320 <convertToSegmentDisplay+0xc4>
		case 9:
			segmentValue = 0x67;
 314:	e3a03067 	mov	r3, #103	; 0x67
 318:	e54b3005 	strb	r3, [r11, #-5]
			break;
 31c:	e1a00000 	nop			; (mov r0, r0)
	}

	return (segmentValue);
 320:	e55b3005 	ldrb	r3, [r11, #-5]
}
 324:	e1a00003 	mov	r0, r3
 328:	e28bd000 	add	sp, r11, #0
 32c:	e8bd0800 	ldmfd	sp!, {r11}
 330:	e12fff1e 	bx	lr

00000334 <main>:

int main(void)
{
 334:	e92d4800 	push	{r11, lr}
 338:	e28db004 	add	r11, sp, #4
 33c:	e24dd030 	sub	sp, sp, #48	; 0x30
	/* Declare volatile pointers to I/O registers (volatile means that the locations
	 * will not be cached, even in registers) */
	volatile int * MPcore_private_timer_ptr	= (int *) MPCORE_PRIV_TIMER;
 340:	e3a03cc6 	mov	r3, #50688	; 0xc600
 344:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 348:	e50b3010 	str	r3, [r11, #-16]
	volatile int * HEX3_HEX0_ptr			= (int *) HEX3_HEX0_BASE;
 34c:	e3a03020 	mov	r3, #32
 350:	e34f3f20 	movt	r3, #65312	; 0xff20
 354:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	volatile int * HEX5_HEX4_ptr			= (int *) HEX5_HEX4_BASE;
 358:	e3a03030 	mov	r3, #48	; 0x30
 35c:	e34f3f20 	movt	r3, #65312	; 0xff20
 360:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	volatile int * KEY_ptr = (int *) KEY_BASE;
 364:	e3a03050 	mov	r3, #80	; 0x50
 368:	e34f3f20 	movt	r3, #65312	; 0xff20
 36c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	
	int runApp = 1;
 370:	e3a03001 	mov	r3, #1
 374:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	int counter = 2000000;						// timeout = 1/(200 MHz) x 200x10^8 = .01 sec
 378:	e3083480 	movw	r3, #33920	; 0x8480
 37c:	e340301e 	movt	r3, #30
 380:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	int HEX30_bits = 0x0000000F;				// initial pattern for HEX displays
 384:	e3a0300f 	mov	r3, #15
 388:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	int HEX54_bits = 0x0000000F;				// initial pattern for HEX displays
 38c:	e3a0300f 	mov	r3, #15
 390:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4

	uint8_t DD0 = 0;
 394:	e3a03000 	mov	r3, #0
 398:	e54b3005 	strb	r3, [r11, #-5]
	uint8_t DD1 = 0;
 39c:	e3a03000 	mov	r3, #0
 3a0:	e54b3006 	strb	r3, [r11, #-6]
	uint8_t SS0 = 5;
 3a4:	e3a03005 	mov	r3, #5
 3a8:	e54b3007 	strb	r3, [r11, #-7]
	uint8_t SS1 = 4;
 3ac:	e3a03004 	mov	r3, #4
 3b0:	e54b3008 	strb	r3, [r11, #-8]
	uint8_t MM0 = 9;
 3b4:	e3a03009 	mov	r3, #9
 3b8:	e54b3009 	strb	r3, [r11, #-9]
	uint8_t MM1 = 5;
 3bc:	e3a03005 	mov	r3, #5
 3c0:	e54b300a 	strb	r3, [r11, #-10]

	uint8_t SEGMENT0 = 0;
 3c4:	e3a03000 	mov	r3, #0
 3c8:	e54b302d 	strb	r3, [r11, #-45]	; 0xffffffd3
	uint8_t SEGMENT1 = 0;
 3cc:	e3a03000 	mov	r3, #0
 3d0:	e54b302e 	strb	r3, [r11, #-46]	; 0xffffffd2
	uint8_t SEGMENT2 = 0;
 3d4:	e3a03000 	mov	r3, #0
 3d8:	e54b302f 	strb	r3, [r11, #-47]	; 0xffffffd1
	uint8_t SEGMENT3 = 0;
 3dc:	e3a03000 	mov	r3, #0
 3e0:	e54b3030 	strb	r3, [r11, #-48]	; 0xffffffd0
	uint8_t SEGMENT4 = 0;
 3e4:	e3a03000 	mov	r3, #0
 3e8:	e54b3031 	strb	r3, [r11, #-49]	; 0xffffffcf
	uint8_t SEGMENT5 = 0;
 3ec:	e3a03000 	mov	r3, #0
 3f0:	e54b3032 	strb	r3, [r11, #-50]	; 0xffffffce

	*(MPcore_private_timer_ptr) = counter;		// write to timer load register
 3f4:	e51b3010 	ldr	r3, [r11, #-16]
 3f8:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
 3fc:	e5832000 	str	r2, [r3]
	*(MPcore_private_timer_ptr + 2) = 0b011;	// mode = 1 (auto), enable = 1
 400:	e51b3010 	ldr	r3, [r11, #-16]
 404:	e2833008 	add	r3, r3, #8
 408:	e3a02003 	mov	r2, #3
 40c:	e5832000 	str	r2, [r3]

	while(1)
	{
		while (*(MPcore_private_timer_ptr + 3) == 0)
 410:	e1a00000 	nop			; (mov r0, r0)
 414:	e51b3010 	ldr	r3, [r11, #-16]
 418:	e283300c 	add	r3, r3, #12
 41c:	e5933000 	ldr	r3, [r3]
 420:	e3530000 	cmp	r3, #0
 424:	0afffffa 	beq	414 <main+0xe0>
			;								 // wait for timer to expire
		*(MPcore_private_timer_ptr + 3) = 1; // reset timer flag bit
 428:	e51b3010 	ldr	r3, [r11, #-16]
 42c:	e283300c 	add	r3, r3, #12
 430:	e3a02001 	mov	r2, #1
 434:	e5832000 	str	r2, [r3]

		// Check if button pressed to run/stop app
		if (*KEY_ptr != 0)
 438:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 43c:	e5933000 	ldr	r3, [r3]
 440:	e3530000 	cmp	r3, #0
 444:	0a000004 	beq	45c <main+0x128>
		{
			while(*KEY_ptr != 0);
 448:	e1a00000 	nop			; (mov r0, r0)
 44c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 450:	e5933000 	ldr	r3, [r3]
 454:	e3530000 	cmp	r3, #0
 458:	1afffffb 	bne	44c <main+0x118>
		}

		// Increment DD0 variable when timer expires
		// Increment all other individual segments based on rollover events from the preceding counter
		DD0 += 1;
 45c:	e55b3005 	ldrb	r3, [r11, #-5]
 460:	e2833001 	add	r3, r3, #1
 464:	e54b3005 	strb	r3, [r11, #-5]
		if (DD0 == 10)
 468:	e55b3005 	ldrb	r3, [r11, #-5]
 46c:	e353000a 	cmp	r3, #10
 470:	1a000004 	bne	488 <main+0x154>
		{
			DD0 = 0;
 474:	e3a03000 	mov	r3, #0
 478:	e54b3005 	strb	r3, [r11, #-5]
			DD1 += 1;
 47c:	e55b3006 	ldrb	r3, [r11, #-6]
 480:	e2833001 	add	r3, r3, #1
 484:	e54b3006 	strb	r3, [r11, #-6]
		}
		if (DD1 == 10)
 488:	e55b3006 	ldrb	r3, [r11, #-6]
 48c:	e353000a 	cmp	r3, #10
 490:	1a000004 	bne	4a8 <main+0x174>
		{
			DD1 = 0;
 494:	e3a03000 	mov	r3, #0
 498:	e54b3006 	strb	r3, [r11, #-6]
			SS0 += 1;
 49c:	e55b3007 	ldrb	r3, [r11, #-7]
 4a0:	e2833001 	add	r3, r3, #1
 4a4:	e54b3007 	strb	r3, [r11, #-7]
		}
		if (SS0 == 10)
 4a8:	e55b3007 	ldrb	r3, [r11, #-7]
 4ac:	e353000a 	cmp	r3, #10
 4b0:	1a000004 	bne	4c8 <main+0x194>
		{
			SS0 = 0;
 4b4:	e3a03000 	mov	r3, #0
 4b8:	e54b3007 	strb	r3, [r11, #-7]
			SS1 += 1;
 4bc:	e55b3008 	ldrb	r3, [r11, #-8]
 4c0:	e2833001 	add	r3, r3, #1
 4c4:	e54b3008 	strb	r3, [r11, #-8]
		}
		if (SS1 == 6)
 4c8:	e55b3008 	ldrb	r3, [r11, #-8]
 4cc:	e3530006 	cmp	r3, #6
 4d0:	1a000004 	bne	4e8 <main+0x1b4>
		{
			SS1 = 0;
 4d4:	e3a03000 	mov	r3, #0
 4d8:	e54b3008 	strb	r3, [r11, #-8]
			MM0 += 1;
 4dc:	e55b3009 	ldrb	r3, [r11, #-9]
 4e0:	e2833001 	add	r3, r3, #1
 4e4:	e54b3009 	strb	r3, [r11, #-9]
		}
		if (MM0 == 10)
 4e8:	e55b3009 	ldrb	r3, [r11, #-9]
 4ec:	e353000a 	cmp	r3, #10
 4f0:	1a000004 	bne	508 <main+0x1d4>
		{
			MM0 = 0;
 4f4:	e3a03000 	mov	r3, #0
 4f8:	e54b3009 	strb	r3, [r11, #-9]
			MM1 += 1;
 4fc:	e55b300a 	ldrb	r3, [r11, #-10]
 500:	e2833001 	add	r3, r3, #1
 504:	e54b300a 	strb	r3, [r11, #-10]
		}
		if (MM1 == 6)
 508:	e55b300a 	ldrb	r3, [r11, #-10]
 50c:	e3530006 	cmp	r3, #6
 510:	1a000003 	bne	524 <main+0x1f0>
		{
			// Reset MM values to 0, wrapping MM segments
			MM0 = 0;
 514:	e3a03000 	mov	r3, #0
 518:	e54b3009 	strb	r3, [r11, #-9]
			MM1 = 0;
 51c:	e3a03000 	mov	r3, #0
 520:	e54b300a 	strb	r3, [r11, #-10]
		}

		// Set each 7-segment based on the value of each counter
		SEGMENT0 = convertToSegmentDisplay(DD0);
 524:	e55b3005 	ldrb	r3, [r11, #-5]
 528:	e1a00003 	mov	r0, r3
 52c:	ebffff4a 	bl	25c <convertToSegmentDisplay>
 530:	e1a03000 	mov	r3, r0
 534:	e54b302d 	strb	r3, [r11, #-45]	; 0xffffffd3
		SEGMENT1 = convertToSegmentDisplay(DD1);
 538:	e55b3006 	ldrb	r3, [r11, #-6]
 53c:	e1a00003 	mov	r0, r3
 540:	ebffff45 	bl	25c <convertToSegmentDisplay>
 544:	e1a03000 	mov	r3, r0
 548:	e54b302e 	strb	r3, [r11, #-46]	; 0xffffffd2
		SEGMENT2 = convertToSegmentDisplay(SS0);
 54c:	e55b3007 	ldrb	r3, [r11, #-7]
 550:	e1a00003 	mov	r0, r3
 554:	ebffff40 	bl	25c <convertToSegmentDisplay>
 558:	e1a03000 	mov	r3, r0
 55c:	e54b302f 	strb	r3, [r11, #-47]	; 0xffffffd1
		SEGMENT3 = convertToSegmentDisplay(SS1);
 560:	e55b3008 	ldrb	r3, [r11, #-8]
 564:	e1a00003 	mov	r0, r3
 568:	ebffff3b 	bl	25c <convertToSegmentDisplay>
 56c:	e1a03000 	mov	r3, r0
 570:	e54b3030 	strb	r3, [r11, #-48]	; 0xffffffd0
		SEGMENT4 = convertToSegmentDisplay(MM0);
 574:	e55b3009 	ldrb	r3, [r11, #-9]
 578:	e1a00003 	mov	r0, r3
 57c:	ebffff36 	bl	25c <convertToSegmentDisplay>
 580:	e1a03000 	mov	r3, r0
 584:	e54b3031 	strb	r3, [r11, #-49]	; 0xffffffcf
		SEGMENT5 = convertToSegmentDisplay(MM1);
 588:	e55b300a 	ldrb	r3, [r11, #-10]
 58c:	e1a00003 	mov	r0, r3
 590:	ebffff31 	bl	25c <convertToSegmentDisplay>
 594:	e1a03000 	mov	r3, r0
 598:	e54b3032 	strb	r3, [r11, #-50]	; 0xffffffce
		HEX30_bits = (SEGMENT0 | (SEGMENT1 << 8) | (SEGMENT2 << 16) | (SEGMENT3 << 24));
 59c:	e55b202d 	ldrb	r2, [r11, #-45]	; 0xffffffd3
 5a0:	e55b302e 	ldrb	r3, [r11, #-46]	; 0xffffffd2
 5a4:	e1a03403 	lsl	r3, r3, #8
 5a8:	e1822003 	orr	r2, r2, r3
 5ac:	e55b302f 	ldrb	r3, [r11, #-47]	; 0xffffffd1
 5b0:	e1a03803 	lsl	r3, r3, #16
 5b4:	e1822003 	orr	r2, r2, r3
 5b8:	e55b3030 	ldrb	r3, [r11, #-48]	; 0xffffffd0
 5bc:	e1a03c03 	lsl	r3, r3, #24
 5c0:	e1823003 	orr	r3, r2, r3
 5c4:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
		HEX54_bits = (SEGMENT4 | (SEGMENT5 << 8));
 5c8:	e55b2031 	ldrb	r2, [r11, #-49]	; 0xffffffcf
 5cc:	e55b3032 	ldrb	r3, [r11, #-50]	; 0xffffffce
 5d0:	e1a03403 	lsl	r3, r3, #8
 5d4:	e1823003 	orr	r3, r2, r3
 5d8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4

		*(HEX3_HEX0_ptr) = HEX30_bits; // display pattern on HEX3 ... HEX0
 5dc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 5e0:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
 5e4:	e5832000 	str	r2, [r3]
		*(HEX5_HEX4_ptr) = HEX54_bits; // display pattern on HEX5 ... HEX4
 5e8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 5ec:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
 5f0:	e5832000 	str	r2, [r3]
	}
 5f4:	e1a00000 	nop			; (mov r0, r0)
	*(MPcore_private_timer_ptr) = counter;		// write to timer load register
	*(MPcore_private_timer_ptr + 2) = 0b011;	// mode = 1 (auto), enable = 1

	while(1)
	{
		while (*(MPcore_private_timer_ptr + 3) == 0)
 5f8:	eaffff84 	b	410 <main+0xdc>

000005fc <atexit>:
 5fc:	e1a01000 	mov	r1, r0
 600:	e3a00000 	mov	r0, #0
 604:	e92d4008 	push	{r3, lr}
 608:	e1a02000 	mov	r2, r0
 60c:	e1a03000 	mov	r3, r0
 610:	eb00000e 	bl	650 <__register_exitproc>
 614:	e8bd4008 	pop	{r3, lr}
 618:	e12fff1e 	bx	lr

0000061c <exit>:
 61c:	e92d4008 	push	{r3, lr}
 620:	e3a01000 	mov	r1, #0
 624:	e1a04000 	mov	r4, r0
 628:	eb000045 	bl	744 <__call_exitprocs>
 62c:	e59f3018 	ldr	r3, [pc, #24]	; 64c <exit+0x30>
 630:	e5930000 	ldr	r0, [r3]
 634:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 638:	e3530000 	cmp	r3, #0
 63c:	11a0e00f 	movne	lr, pc
 640:	112fff13 	bxne	r3
 644:	e1a00004 	mov	r0, r4
 648:	eb0000c9 	bl	974 <_exit>
 64c:	00000a34 	.word	0x00000a34

00000650 <__register_exitproc>:
 650:	e59fc0e4 	ldr	r12, [pc, #228]	; 73c <__register_exitproc+0xec>
 654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 658:	e59c4000 	ldr	r4, [r12]
 65c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 660:	e35c0000 	cmp	r12, #0
 664:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 668:	e59c5004 	ldr	r5, [r12, #4]
 66c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 670:	e355001f 	cmp	r5, #31
 674:	e24dd010 	sub	sp, sp, #16
 678:	e1a06000 	mov	r6, r0
 67c:	da000015 	ble	6d8 <__register_exitproc+0x88>
 680:	e59f00b8 	ldr	r0, [pc, #184]	; 740 <__register_exitproc+0xf0>
 684:	e3500000 	cmp	r0, #0
 688:	1a000001 	bne	694 <__register_exitproc+0x44>
 68c:	e3e00000 	mvn	r0, #0
 690:	ea000018 	b	6f8 <__register_exitproc+0xa8>
 694:	e3a00e19 	mov	r0, #400	; 0x190
 698:	e58d100c 	str	r1, [sp, #12]
 69c:	e58d2008 	str	r2, [sp, #8]
 6a0:	e58d3004 	str	r3, [sp, #4]
 6a4:	e320f000 	nop	{0}
 6a8:	e250c000 	subs	r12, r0, #0
 6ac:	e59d100c 	ldr	r1, [sp, #12]
 6b0:	e59d2008 	ldr	r2, [sp, #8]
 6b4:	e59d3004 	ldr	r3, [sp, #4]
 6b8:	0afffff3 	beq	68c <__register_exitproc+0x3c>
 6bc:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 6c0:	e3a00000 	mov	r0, #0
 6c4:	e58c0004 	str	r0, [r12, #4]
 6c8:	e58c5000 	str	r5, [r12]
 6cc:	e584c148 	str	r12, [r4, #328]	; 0x148
 6d0:	e58c0188 	str	r0, [r12, #392]	; 0x188
 6d4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 6d8:	e3560000 	cmp	r6, #0
 6dc:	e59c4004 	ldr	r4, [r12, #4]
 6e0:	1a000007 	bne	704 <__register_exitproc+0xb4>
 6e4:	e2843002 	add	r3, r4, #2
 6e8:	e2844001 	add	r4, r4, #1
 6ec:	e78c1103 	str	r1, [r12, r3, lsl #2]
 6f0:	e58c4004 	str	r4, [r12, #4]
 6f4:	e3a00000 	mov	r0, #0
 6f8:	e28dd010 	add	sp, sp, #16
 6fc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 700:	e12fff1e 	bx	lr
 704:	e3a00001 	mov	r0, #1
 708:	e1a00410 	lsl	r0, r0, r4
 70c:	e08c8104 	add	r8, r12, r4, lsl #2
 710:	e3560002 	cmp	r6, #2
 714:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 718:	e5883108 	str	r3, [r8, #264]	; 0x108
 71c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 720:	e1877000 	orr	r7, r7, r0
 724:	01830000 	orreq	r0, r3, r0
 728:	e1a05008 	mov	r5, r8
 72c:	e5882088 	str	r2, [r8, #136]	; 0x88
 730:	e58c7188 	str	r7, [r12, #392]	; 0x188
 734:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 738:	eaffffe9 	b	6e4 <__register_exitproc+0x94>
 73c:	00000a34 	.word	0x00000a34
 740:	00000000 	.word	0x00000000

00000744 <__call_exitprocs>:
 744:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 748:	e59f3168 	ldr	r3, [pc, #360]	; 8b8 <__call_exitprocs+0x174>
 74c:	e5933000 	ldr	r3, [r3]
 750:	e24dd014 	sub	sp, sp, #20
 754:	e58d3004 	str	r3, [sp, #4]
 758:	e2833f52 	add	r3, r3, #328	; 0x148
 75c:	e58d0008 	str	r0, [sp, #8]
 760:	e58d300c 	str	r3, [sp, #12]
 764:	e1a07001 	mov	r7, r1
 768:	e3a08001 	mov	r8, #1
 76c:	e59d3004 	ldr	r3, [sp, #4]
 770:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 774:	e3560000 	cmp	r6, #0
 778:	e59db00c 	ldr	r11, [sp, #12]
 77c:	0a000033 	beq	850 <__call_exitprocs+0x10c>
 780:	e5965004 	ldr	r5, [r6, #4]
 784:	e2554001 	subs	r4, r5, #1
 788:	5286a088 	addpl	r10, r6, #136	; 0x88
 78c:	5285501f 	addpl	r5, r5, #31
 790:	508a5105 	addpl	r5, r10, r5, lsl #2
 794:	5a000007 	bpl	7b8 <__call_exitprocs+0x74>
 798:	ea000029 	b	844 <__call_exitprocs+0x100>
 79c:	e5953000 	ldr	r3, [r5]
 7a0:	e1530007 	cmp	r3, r7
 7a4:	0a000005 	beq	7c0 <__call_exitprocs+0x7c>
 7a8:	e2444001 	sub	r4, r4, #1
 7ac:	e3740001 	cmn	r4, #1
 7b0:	e2455004 	sub	r5, r5, #4
 7b4:	0a000022 	beq	844 <__call_exitprocs+0x100>
 7b8:	e3570000 	cmp	r7, #0
 7bc:	1afffff6 	bne	79c <__call_exitprocs+0x58>
 7c0:	e5963004 	ldr	r3, [r6, #4]
 7c4:	e06a2005 	rsb	r2, r10, r5
 7c8:	e2433001 	sub	r3, r3, #1
 7cc:	e0862002 	add	r2, r6, r2
 7d0:	e1530004 	cmp	r3, r4
 7d4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 7d8:	13a01000 	movne	r1, #0
 7dc:	05864004 	streq	r4, [r6, #4]
 7e0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 7e4:	e3530000 	cmp	r3, #0
 7e8:	0affffee 	beq	7a8 <__call_exitprocs+0x64>
 7ec:	e1a02418 	lsl	r2, r8, r4
 7f0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 7f4:	e1120001 	tst	r2, r1
 7f8:	e5969004 	ldr	r9, [r6, #4]
 7fc:	0a000016 	beq	85c <__call_exitprocs+0x118>
 800:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 804:	e1120001 	tst	r2, r1
 808:	1a000016 	bne	868 <__call_exitprocs+0x124>
 80c:	e59d0008 	ldr	r0, [sp, #8]
 810:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 814:	e1a0e00f 	mov	lr, pc
 818:	e12fff13 	bx	r3
 81c:	e5963004 	ldr	r3, [r6, #4]
 820:	e1530009 	cmp	r3, r9
 824:	1affffd0 	bne	76c <__call_exitprocs+0x28>
 828:	e59b3000 	ldr	r3, [r11]
 82c:	e1530006 	cmp	r3, r6
 830:	1affffcd 	bne	76c <__call_exitprocs+0x28>
 834:	e2444001 	sub	r4, r4, #1
 838:	e3740001 	cmn	r4, #1
 83c:	e2455004 	sub	r5, r5, #4
 840:	1affffdc 	bne	7b8 <__call_exitprocs+0x74>
 844:	e59f1070 	ldr	r1, [pc, #112]	; 8bc <__call_exitprocs+0x178>
 848:	e3510000 	cmp	r1, #0
 84c:	1a000009 	bne	878 <__call_exitprocs+0x134>
 850:	e28dd014 	add	sp, sp, #20
 854:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 858:	e12fff1e 	bx	lr
 85c:	e1a0e00f 	mov	lr, pc
 860:	e12fff13 	bx	r3
 864:	eaffffec 	b	81c <__call_exitprocs+0xd8>
 868:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 86c:	e1a0e00f 	mov	lr, pc
 870:	e12fff13 	bx	r3
 874:	eaffffe8 	b	81c <__call_exitprocs+0xd8>
 878:	e5963004 	ldr	r3, [r6, #4]
 87c:	e3530000 	cmp	r3, #0
 880:	e5963000 	ldr	r3, [r6]
 884:	1a000008 	bne	8ac <__call_exitprocs+0x168>
 888:	e3530000 	cmp	r3, #0
 88c:	0a000006 	beq	8ac <__call_exitprocs+0x168>
 890:	e1a00006 	mov	r0, r6
 894:	e58b3000 	str	r3, [r11]
 898:	e320f000 	nop	{0}
 89c:	e59b6000 	ldr	r6, [r11]
 8a0:	e3560000 	cmp	r6, #0
 8a4:	1affffb5 	bne	780 <__call_exitprocs+0x3c>
 8a8:	eaffffe8 	b	850 <__call_exitprocs+0x10c>
 8ac:	e1a0b006 	mov	r11, r6
 8b0:	e1a06003 	mov	r6, r3
 8b4:	eafffff9 	b	8a0 <__call_exitprocs+0x15c>
 8b8:	00000a34 	.word	0x00000a34
 8bc:	00000000 	.word	0x00000000

000008c0 <register_fini>:
 8c0:	e92d4008 	push	{r3, lr}
 8c4:	e59f3010 	ldr	r3, [pc, #16]	; 8dc <register_fini+0x1c>
 8c8:	e3530000 	cmp	r3, #0
 8cc:	159f000c 	ldrne	r0, [pc, #12]	; 8e0 <register_fini+0x20>
 8d0:	1bffff49 	blne	5fc <atexit>
 8d4:	e8bd4008 	pop	{r3, lr}
 8d8:	e12fff1e 	bx	lr
 8dc:	00000a5c 	.word	0x00000a5c
 8e0:	000008e4 	.word	0x000008e4

000008e4 <__libc_fini_array>:
 8e4:	e92d4038 	push	{r3, r4, r5, lr}
 8e8:	e59f5030 	ldr	r5, [pc, #48]	; 920 <__libc_fini_array+0x3c>
 8ec:	e59f4030 	ldr	r4, [pc, #48]	; 924 <__libc_fini_array+0x40>
 8f0:	e0654004 	rsb	r4, r5, r4
 8f4:	e1b04144 	asrs	r4, r4, #2
 8f8:	10855104 	addne	r5, r5, r4, lsl #2
 8fc:	0a000004 	beq	914 <__libc_fini_array+0x30>
 900:	e5353004 	ldr	r3, [r5, #-4]!
 904:	e1a0e00f 	mov	lr, pc
 908:	e12fff13 	bx	r3
 90c:	e2544001 	subs	r4, r4, #1
 910:	1afffffa 	bne	900 <__libc_fini_array+0x1c>
 914:	eb000050 	bl	a5c <__libc_fini>
 918:	e8bd4038 	pop	{r3, r4, r5, lr}
 91c:	e12fff1e 	bx	lr
 920:	00000a74 	.word	0x00000a74
 924:	00000a78 	.word	0x00000a78

00000928 <__cs3_premain>:
 928:	e92d4008 	push	{r3, lr}
 92c:	eb00001d 	bl	9a8 <__libc_init_array>
 930:	e59f3030 	ldr	r3, [pc, #48]	; 968 <__cs3_premain+0x40>
 934:	e3530000 	cmp	r3, #0
 938:	15930000 	ldrne	r0, [r3]
 93c:	01a00003 	moveq	r0, r3
 940:	e59f3024 	ldr	r3, [pc, #36]	; 96c <__cs3_premain+0x44>
 944:	e3530000 	cmp	r3, #0
 948:	15931000 	ldrne	r1, [r3]
 94c:	01a01003 	moveq	r1, r3
 950:	e3a02000 	mov	r2, #0
 954:	ebfffe76 	bl	334 <main>
 958:	e59f3010 	ldr	r3, [pc, #16]	; 970 <__cs3_premain+0x48>
 95c:	e3530000 	cmp	r3, #0
 960:	1bffff2d 	blne	61c <exit>
 964:	eafffffe 	b	964 <__cs3_premain+0x3c>
	...
 970:	0000061c 	.word	0x0000061c

00000974 <_exit>:
 974:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 978:	e3a00018 	mov	r0, #24
 97c:	e59f1004 	ldr	r1, [pc, #4]	; 988 <_exit+0x14>
 980:	ef123456 	svc	0x00123456
 984:	eafffffe 	b	984 <_exit+0x10>
 988:	00020026 	.word	0x00020026

0000098c <__cs3_isr_interrupt>:
 98c:	eafffffe 	b	98c <__cs3_isr_interrupt>

00000990 <__cs3_isr_undef>:
 990:	eafffffe 	b	990 <__cs3_isr_undef>

00000994 <__cs3_isr_swi>:
 994:	eafffffe 	b	994 <__cs3_isr_swi>

00000998 <__cs3_isr_pabort>:
 998:	eafffffe 	b	998 <__cs3_isr_pabort>

0000099c <__cs3_isr_dabort>:
 99c:	eafffffe 	b	99c <__cs3_isr_dabort>

000009a0 <__cs3_isr_irq>:
 9a0:	eafffffe 	b	9a0 <__cs3_isr_irq>

000009a4 <__cs3_isr_fiq>:
 9a4:	eafffffe 	b	9a4 <__cs3_isr_fiq>

000009a8 <__libc_init_array>:
 9a8:	e92d4070 	push	{r4, r5, r6, lr}
 9ac:	e59f506c 	ldr	r5, [pc, #108]	; a20 <__libc_init_array+0x78>
 9b0:	e59f606c 	ldr	r6, [pc, #108]	; a24 <__libc_init_array+0x7c>
 9b4:	e0656006 	rsb	r6, r5, r6
 9b8:	e1b06146 	asrs	r6, r6, #2
 9bc:	12455004 	subne	r5, r5, #4
 9c0:	13a04000 	movne	r4, #0
 9c4:	0a000005 	beq	9e0 <__libc_init_array+0x38>
 9c8:	e5b53004 	ldr	r3, [r5, #4]!
 9cc:	e2844001 	add	r4, r4, #1
 9d0:	e1a0e00f 	mov	lr, pc
 9d4:	e12fff13 	bx	r3
 9d8:	e1560004 	cmp	r6, r4
 9dc:	1afffff9 	bne	9c8 <__libc_init_array+0x20>
 9e0:	e59f5040 	ldr	r5, [pc, #64]	; a28 <__libc_init_array+0x80>
 9e4:	e59f6040 	ldr	r6, [pc, #64]	; a2c <__libc_init_array+0x84>
 9e8:	e0656006 	rsb	r6, r5, r6
 9ec:	eb000012 	bl	a3c <_init>
 9f0:	e1b06146 	asrs	r6, r6, #2
 9f4:	12455004 	subne	r5, r5, #4
 9f8:	13a04000 	movne	r4, #0
 9fc:	0a000005 	beq	a18 <__libc_init_array+0x70>
 a00:	e5b53004 	ldr	r3, [r5, #4]!
 a04:	e2844001 	add	r4, r4, #1
 a08:	e1a0e00f 	mov	lr, pc
 a0c:	e12fff13 	bx	r3
 a10:	e1560004 	cmp	r6, r4
 a14:	1afffff9 	bne	a00 <__libc_init_array+0x58>
 a18:	e8bd4070 	pop	{r4, r5, r6, lr}
 a1c:	e12fff1e 	bx	lr
 a20:	00000a54 	.word	0x00000a54
 a24:	00000a54 	.word	0x00000a54
 a28:	00000a54 	.word	0x00000a54
 a2c:	00000a5c 	.word	0x00000a5c

Disassembly of section .rodata:

00000a34 <_global_impure_ptr>:
 a34:	00000aa0 00000043                       ....C...

00000a3c <_init>:
 a3c:	e1a0c00d 	mov	r12, sp
 a40:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a44:	e24cb004 	sub	r11, r12, #4
 a48:	e24bd028 	sub	sp, r11, #40	; 0x28
 a4c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a50:	e12fff1e 	bx	lr

00000a54 <__init_array_start>:
 a54:	000008c0 	.word	0x000008c0

00000a58 <__frame_dummy_init_array_entry>:
 a58:	00000208                                ....

00000a5c <__libc_fini>:
 a5c:	e1a0c00d 	mov	r12, sp
 a60:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a64:	e24cb004 	sub	r11, r12, #4
 a68:	e24bd028 	sub	sp, r11, #40	; 0x28
 a6c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a70:	e12fff1e 	bx	lr

00000a74 <__fini_array_start>:
 a74:	000001c4 	.word	0x000001c4

00000a78 <__cs3_regions>:
	...
 a84:	00000ed0 	.word	0x00000ed0
 a88:	00000020 	.word	0x00000020

00000a8c <__cs3_regions_end>:
 a8c:	00000000 	.word	0x00000000
